// Generated by Haxe 4.3.2
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var DownloadWrapper = function(id) {
	if(id != null) {
		haxe_Log.trace(id,{ fileName : "src/DownloadWrapper.hx", lineNumber : 17, className : "DownloadWrapper", methodName : "new"});
		var elem = window.document.getElementById(id);
		var el = window.document.createElement("div");
		el.id = "wrapper_download";
		el.className = "btn-group";
		el.appendChild(this.btnCreator("jpg"));
		el.appendChild(this.btnCreator("png"));
		el.appendChild(this.btnCreator("svg"));
		elem.appendChild(el);
	}
};
DownloadWrapper.__name__ = "DownloadWrapper";
DownloadWrapper.svgExport = function(svg,filename) {
	cc_tool_ExportFile.downloadTextFile(svg.outerHTML,"" + filename + ".svg");
};
DownloadWrapper.svg2Canvas = function(svg,isJpg,filename) {
	if(isJpg == null) {
		isJpg = true;
	}
	var svgW = Std.parseInt(svg.getAttribute("width"));
	var svgH = Std.parseInt(svg.getAttribute("height"));
	var canvas = window.document.createElement("canvas");
	var ctx = canvas.getContext("2d",null);
	canvas.width = svgW;
	canvas.height = svgH;
	var image = new Image();
	image.onload = function() {
		if(isJpg) {
			ctx.fillStyle = "white";
			ctx.fillRect(0,0,canvas.width,canvas.height);
		}
		ctx.drawImage(image,0,0,svgW,svgH);
		cc_tool_ExportFile.downloadImageBg(ctx,isJpg,filename);
	};
	image.onerror = function(e) {
		$global.console.log(e);
	};
	var str = svg.outerHTML;
	var xml = Xml.parse(str);
	var s = haxe_xml_Printer.print(xml);
	var tmp = encodeURIComponent(s);
	image.src = "data:image/svg+xml;charset=utf-8," + tmp;
	window.document.body.appendChild(canvas);
	window.document.body.appendChild(image);
};
DownloadWrapper.prototype = {
	btnCreator: function(id) {
		var anchor = window.document.createElement("a");
		anchor.setAttribute("download-id","" + id);
		anchor.className = "btn btn-dark btn-sm";
		anchor.href = "#" + id;
		anchor.onclick = $bind(this,this.onButtonClickHandler);
		anchor.innerHTML = "" + id + " ";
		return anchor;
	}
	,onButtonClickHandler: function(e) {
		var attr = (js_Boot.__cast(e.currentTarget , HTMLAnchorElement)).getAttribute("download-id");
		var wrapperDiv = (js_Boot.__cast(e.currentTarget , HTMLAnchorElement)).parentElement.parentElement;
		var svg = wrapperDiv.getElementsByTagName("svg")[0];
		var filename = "" + wrapperDiv.id + "_" + new Date().getTime();
		switch(attr) {
		case "jpg":
			DownloadWrapper.svg2Canvas(svg,true,"" + filename);
			break;
		case "png":
			DownloadWrapper.svg2Canvas(svg,false,"" + filename);
			break;
		case "svg":
			cc_tool_ExportFile.downloadTextFile(svg.outerHTML,"" + filename + ".svg");
			break;
		default:
			haxe_Log.trace("case '" + attr + "': trace ('" + attr + "');",{ fileName : "src/DownloadWrapper.hx", lineNumber : 57, className : "DownloadWrapper", methodName : "onButtonClickHandler"});
		}
	}
	,__class__: DownloadWrapper
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = "EReg";
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,__class__: EReg
};
var GUISettings = function() {
	this.update = function() {
		haxe_Log.trace("update",{ fileName : "src/GUISettings.hx", lineNumber : 27, className : "GUISettings", methodName : "update"});
	};
	this.jpg = function() {
		haxe_Log.trace("jpg",{ fileName : "src/GUISettings.hx", lineNumber : 23, className : "GUISettings", methodName : "jpg"});
	};
	this.png = function() {
		haxe_Log.trace("png",{ fileName : "src/GUISettings.hx", lineNumber : 19, className : "GUISettings", methodName : "png"});
	};
	this.svg = function() {
		haxe_Log.trace("svg",{ fileName : "src/GUISettings.hx", lineNumber : 15, className : "GUISettings", methodName : "svg"});
	};
	this.quotes = model_constants_Quotes.array;
	this.fontsize = 40;
	this.maxSize = 0.8;
	this.message = "test";
};
GUISettings.__name__ = "GUISettings";
GUISettings.prototype = {
	__class__: GUISettings
};
Math.__name__ = "Math";
var Globals = function() { };
Globals.__name__ = "Globals";
var HxOverrides = function() { };
HxOverrides.__name__ = "HxOverrides";
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Lambda = function() { };
Lambda.__name__ = "Lambda";
Lambda.has = function(it,elt) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1 == elt) {
			return true;
		}
	}
	return false;
};
var MainShadowbox = function() {
	window.document.addEventListener("DOMContentLoaded",function(event) {
		$global.console.log("" + model_constants_App.NAME + " Dom ready :: build: " + model_constants_App.BUILD + " ");
		var cc = new art_SVGShadowBox();
		var svg = window.document.getElementsByTagName("svg")[0];
	});
};
MainShadowbox.__name__ = "MainShadowbox";
MainShadowbox.main = function() {
	var app = new MainShadowbox();
};
MainShadowbox.prototype = {
	__class__: MainShadowbox
};
var Reflect = function() { };
Reflect.__name__ = "Reflect";
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
var Settings = function(width,height,type) {
	if(type == null) {
		type = "svg";
	}
	this.isAnimation = true;
	this.isAutostart = false;
	this.isScaled = false;
	this.margin = 0;
	this.padding = 0;
	this.type = "svg";
	this.set_width(width);
	this.set_height(height);
	this.set_type(type.toLowerCase());
};
Settings.__name__ = "Settings";
Settings.prototype = {
	get_width: function() {
		return this.width;
	}
	,set_width: function(value) {
		return this.width = value;
	}
	,get_height: function() {
		return this.height;
	}
	,set_height: function(value) {
		return this.height = value;
	}
	,get_type: function() {
		return this.type;
	}
	,set_type: function(value) {
		return this.type = value;
	}
	,get_padding: function() {
		return this.padding;
	}
	,set_padding: function(value) {
		return this.padding = value;
	}
	,get_isScaled: function() {
		return this.isScaled;
	}
	,set_isScaled: function(value) {
		return this.isScaled = value;
	}
	,get_element: function() {
		return this.element;
	}
	,set_element: function(value) {
		return this.element = value;
	}
	,get_elementID: function() {
		return this.elementID;
	}
	,set_elementID: function(value) {
		return this.elementID = value;
	}
	,get_margin: function() {
		return this.margin;
	}
	,set_margin: function(value) {
		return this.margin = value;
	}
	,get_isAutostart: function() {
		return this.isAutostart;
	}
	,set_isAutostart: function(value) {
		return this.isAutostart = value;
	}
	,get_sizeType: function() {
		return this.sizeType;
	}
	,set_sizeType: function(value) {
		return this.sizeType = value;
	}
	,get_isAnimation: function() {
		return this.isAnimation;
	}
	,set_isAnimation: function(value) {
		return this.isAnimation = value;
	}
	,get_viewBox: function() {
		return this.viewBox;
	}
	,set_viewBox: function(value) {
		if(value.length != 4) {
			$global.console.warn("Expect 4 float values: \"0 0 300 400\"");
		}
		return this.viewBox = value;
	}
	,__class__: Settings
	,__properties__: {set_sizeType:"set_sizeType",get_sizeType:"get_sizeType",set_viewBox:"set_viewBox",get_viewBox:"get_viewBox",set_elementID:"set_elementID",get_elementID:"get_elementID",set_element:"set_element",get_element:"get_element",set_isAnimation:"set_isAnimation",get_isAnimation:"get_isAnimation",set_isAutostart:"set_isAutostart",get_isAutostart:"get_isAutostart",set_isScaled:"set_isScaled",get_isScaled:"get_isScaled",set_margin:"set_margin",get_margin:"get_margin",set_padding:"set_padding",get_padding:"get_padding",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_type:"set_type",get_type:"get_type"}
};
var SketchOption = function() {
	this._dpi = 72;
	this._padding = 20;
	this._scale = false;
	this._type = "canvas";
	this._container = window.document.body;
	this._autopause = true;
	this._autostart = true;
	this._autoclear = true;
	this._fullscreen = true;
};
SketchOption.__name__ = "SketchOption";
SketchOption.prototype = {
	get_width: function() {
		return this._width;
	}
	,set_width: function(value) {
		this._fullscreen = false;
		if(this._height == null) {
			this._height = value;
		}
		return this._width = value;
	}
	,get_height: function() {
		return this._height;
	}
	,set_height: function(value) {
		this._fullscreen = false;
		if(this._width == null) {
			this._width = value;
		}
		return this._height = value;
	}
	,get_fullscreen: function() {
		return this._fullscreen;
	}
	,set_fullscreen: function(value) {
		return this._fullscreen = value;
	}
	,get_autoclear: function() {
		return this._autoclear;
	}
	,set_autoclear: function(value) {
		return this._autostart = value;
	}
	,get_autostart: function() {
		return this._autostart;
	}
	,set_autostart: function(value) {
		return this._autostart = value;
	}
	,get_autopause: function() {
		return this._autopause;
	}
	,set_autopause: function(value) {
		return this._autopause = value;
	}
	,get_container: function() {
		return this._container;
	}
	,set_container: function(value) {
		return this._container = value;
	}
	,get_type: function() {
		return this._type;
	}
	,set_type: function(value) {
		return this._type = value;
	}
	,get_scale: function() {
		return this._scale;
	}
	,set_scale: function(value) {
		return this._scale = value;
	}
	,get_padding: function() {
		return this._padding;
	}
	,set_padding: function(value) {
		return this._padding = value;
	}
	,get_dpi: function() {
		return this._dpi;
	}
	,set_dpi: function(value) {
		return this._dpi = value;
	}
	,__class__: SketchOption
	,__properties__: {set_dpi:"set_dpi",get_dpi:"get_dpi",set_padding:"set_padding",get_padding:"get_padding",set_scale:"set_scale",get_scale:"get_scale",set_type:"set_type",get_type:"get_type",set_container:"set_container",get_container:"get_container",set_autopause:"set_autopause",get_autopause:"get_autopause",set_autostart:"set_autostart",get_autostart:"get_autostart",set_autoclear:"set_autoclear",get_autoclear:"get_autoclear",set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width"}
};
var Sketch = function() {
	this.document = window.document;
	this.window = window;
};
Sketch.__name__ = "Sketch";
Sketch.create = function(name,opt) {
	if(opt != null) {
		Sketch.option = opt;
	}
	if(Sketch.option.get_type() == "canvas") {
		return new Sketch().createCanvas(name);
	} else {
		return new Sketch().createGLCanvas(name);
	}
};
Sketch.createHiddenCanvas = function(name,option,isDebug) {
	if(isDebug == null) {
		isDebug = false;
	}
	if(option == null) {
		option = new SketchOption();
	}
	var body = window.document.querySelector("body");
	var canvas = window.document.createElement("canvas");
	body.appendChild(canvas);
	var __w = Math.min(Global.w * 0.50,option.get_width());
	canvas.setAttribute("id","hiddencanvas-" + name);
	canvas.style.position = "absolute";
	canvas.style.left = "0px";
	canvas.style.top = "0px";
	canvas.style.border = "1px solid pink";
	canvas.style.width = "" + __w + "px";
	canvas.width = option.get_width();
	canvas.height = option.get_height();
	if(!isDebug) {
		var tmp = option.get_width();
		canvas.style.left = -(tmp * 1.5) + "px";
	}
	var ctx = canvas.getContext("2d");
	return ctx;
};
Sketch.prototype = {
	createCanvas: function(name) {
		var body = this.document.querySelector("body");
		if(this.document.getElementById("canvas-wrapper") != null) {
			var element = this.document.getElementById("canvas-wrapper");
			element.parentNode.removeChild(element);
			this.window.addEventListener(Global.RESIZE,null,false);
			this.window.addEventListener(Global.MOUSE_MOVE,null,false);
			this.window.addEventListener(Global.MOUSE_DOWN,null,false);
			this.window.addEventListener(Global.MOUSE_UP,null,false);
			this.window.addEventListener(Global.KEY_DOWN,null,false);
		}
		var container = this.document.createElement("div");
		container.setAttribute("id","canvas-wrapper");
		container.className = "canvas-wrapper-container";
		this.canvas = this.document.createElement("canvas");
		this.canvas.setAttribute("id",name);
		body.appendChild(container);
		container.appendChild(this.canvas);
		this.ctx = this.canvas.getContext("2d");
		new Sketch().init(this.ctx);
		this.onResizeHandler();
		this.window.addEventListener(Global.RESIZE,$bind(this,this.onResizeHandler),false);
		return this.ctx;
	}
	,createGLCanvas: function(name) {
		return null;
	}
	,checkForId: function(id) {
		return true;
	}
	,onResizeHandler: function() {
		var c = this.document.getElementsByTagName("canvas");
		if(Sketch.option == null) {
			return;
		}
		if(Sketch.option.get_fullscreen()) {
			Global.w = this.window.innerWidth;
			Global.h = this.window.innerHeight;
			Sketch.option.set_width(Global.w);
			Sketch.option.set_height(Global.h);
		} else {
			Global.w = Sketch.option.get_width();
			Global.h = Sketch.option.get_height();
		}
		var _g = 0;
		var _g1 = c.length;
		while(_g < _g1) {
			var i = _g++;
			var _c = c[i];
			if(Sketch.option.get_scale()) {
				var padding = Sketch.option.get_padding();
				var scaleX = (this.window.innerWidth - 2 * padding) / Global.w;
				var scaleY = (this.window.innerHeight - 2 * padding) / Global.h;
				var scale = Math.min(scaleX,scaleY);
				var tmp = "" + Sketch.option.get_width() * scale;
				_c.style.width = tmp + "px";
				var tmp1 = "" + Sketch.option.get_height() * scale;
				_c.style.height = tmp1 + "px";
			}
			if(_c.id.indexOf("hiddencanvas-") != -1) {
				continue;
			}
			_c.width = Global.w;
			_c.height = Global.h;
		}
		$global.console.log("RESIZE :: w=" + Global.w + " , h=" + Global.h);
	}
	,init: function(ctx) {
		var _gthis = this;
		this.window.addEventListener(Global.MOUSE_MOVE,function(e) {
			Global.mouseX = e.clientX;
			Global.mouseY = e.clientY;
			Global.mouseMoved = true;
		});
		this.window.addEventListener(Global.MOUSE_DOWN,function(e) {
			Global.mouseDown = true;
		});
		this.window.addEventListener(Global.MOUSE_UP,function(e) {
			Global.mouseDown = false;
		});
		this.window.addEventListener(Global.KEY_DOWN,function(e) {
			if(e.metaKey == true && e.key == "r") {
				haxe_Log.trace("cmd + r",{ fileName : "Sketch.hx", lineNumber : 198, className : "Sketch", methodName : "init"});
				$global.location.reload();
			}
			if(e.metaKey == true && e.key == "s" && e.shiftKey == false) {
				e.preventDefault();
				e.stopPropagation();
				haxe_Log.trace("cmd + s",{ fileName : "Sketch.hx", lineNumber : 204, className : "Sketch", methodName : "init"});
				cc_tool_ExportFile.downloadImageBg(ctx,true);
			}
			if(e.metaKey == true && e.key == "s" && e.shiftKey == true) {
				e.preventDefault();
				e.stopPropagation();
				haxe_Log.trace("cmd + shift + s",{ fileName : "Sketch.hx", lineNumber : 210, className : "Sketch", methodName : "init"});
				cc_tool_ExportFile.downloadImage(ctx,false);
			}
			if(e.metaKey == true && (e.code == "KeyS" && e.altKey == true)) {
				e.preventDefault();
				e.stopPropagation();
				haxe_Log.trace("cmd + alt + s",{ fileName : "Sketch.hx", lineNumber : 216, className : "Sketch", methodName : "init"});
				cc_tool_ExportFile.onBase64Handler(ctx,true);
			}
			if(e.metaKey == true && e.key == "f") {
				if(!Global.isFullscreen) {
					_gthis.openFullscreen();
					Global.isFullscreen = true;
				} else {
					_gthis.closeFullscreen();
					Global.isFullscreen = false;
				}
			}
		},false);
	}
	,openFullscreen: function() {
		var elem = this.document.documentElement;
		if(elem.requestFullscreen != null) {
			elem.requestFullscreen();
		} else if(elem.mozRequestFullScreen) {
			elem.mozRequestFullScreen();
		} else if(elem.webkitRequestFullscreen) {
			elem.webkitRequestFullscreen();
		} else if(elem.msRequestFullscreen) {
			elem.msRequestFullscreen();
		}
	}
	,closeFullscreen: function() {
		if(this.document.exitFullscreen != null) {
			this.document.exitFullscreen();
		} else if(this.document.mozCancelFullScreen) {
			this.document.mozCancelFullScreen();
		} else if(this.document.webkitExitFullscreen) {
			this.document.webkitExitFullscreen();
		} else if(this.document.msExitFullscreen) {
			this.document.msExitFullscreen();
		}
	}
	,__class__: Sketch
};
var SketchBase = function(ctx) {
	this.dpiScale = 1;
	this.isDebug = false;
	this.isDrawActive = true;
	if(this.isDebug) {
		haxe_Log.trace("START :: " + this.toString(),{ fileName : "Sketch.hx", lineNumber : 515, className : "SketchBase", methodName : "new"});
	}
	if(ctx == null) {
		var option = new SketchOption();
		option.set_width(1080);
		option.set_autostart(true);
		option.set_padding(10);
		option.set_scale(true);
		ctx = Sketch.create("creative_code_mck",option);
	}
	this.dpiScale = Sketch.option.get_dpi() / 72;
	this.ctx = ctx;
	window.addEventListener(Global.RESIZE,$bind(this,this._reset),false);
	window.addEventListener(Global.KEY_DOWN,$bind(this,this._keyDown),false);
	window.addEventListener(Global.KEY_UP,$bind(this,this._keyUp),false);
	this.setup();
	this._draw();
};
SketchBase.__name__ = "SketchBase";
SketchBase.prototype = {
	_keyDown: function(e) {
		if(e.key == " ") {
			this.draw();
		}
	}
	,_keyUp: function(e) {
	}
	,_reset: function() {
		this.ctx.clearRect(0,0,Global.w,Global.h);
		this._draw();
	}
	,_draw: function(timestamp) {
		this.draw();
		this.__export();
		if(this.isDrawActive) {
			window.requestAnimationFrame($bind(this,this._draw));
		}
	}
	,setup: function() {
		if(this.isDebug) {
			haxe_Log.trace("SETUP :: " + this.toString() + " -> override public function draw()",{ fileName : "Sketch.hx", lineNumber : 578, className : "SketchBase", methodName : "setup"});
		}
	}
	,draw: function() {
		if(this.isDebug) {
			haxe_Log.trace("DRAW :: " + this.toString() + " -> override public function draw()",{ fileName : "Sketch.hx", lineNumber : 586, className : "SketchBase", methodName : "draw"});
		}
	}
	,__export: function() {
	}
	,pause: function() {
		this.isDrawActive = !this.isDrawActive;
	}
	,stop: function() {
		this.isDrawActive = false;
	}
	,play: function() {
		this.isDrawActive = true;
		this._draw();
	}
	,start: function() {
		this.play();
	}
	,onKeyDown: function(e) {
	}
	,scaled: function(value) {
		return value * this.dpiScale;
	}
	,scaledInt: function(value) {
		return value * this.dpiScale | 0;
	}
	,get_w2: function() {
		return Global.w / 2;
	}
	,get_h2: function() {
		return Global.h / 2;
	}
	,get_w4: function() {
		return Global.w / 4;
	}
	,get_h4: function() {
		return Global.h / 4;
	}
	,get_w3: function() {
		return Global.w / 3;
	}
	,get_h3: function() {
		return Global.h / 3;
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		var className = c.__name__;
		return className;
	}
	,__class__: SketchBase
	,__properties__: {get_h3:"get_h3",get_w3:"get_w3",get_h4:"get_h4",get_w4:"get_w4",get_h2:"get_h2",get_w2:"get_w2"}
};
var Global = function() { };
Global.__name__ = "Global";
var Sketcher = function(settings) {
	this.WRAPPER_ID = "sketcher_wrapper";
	this.SVG_ID = "sketcher_svg";
	this.WEBGL_ID = "sketcher_canvas_webgl";
	this.CANVAS_ID = "sketcher_canvas";
	this.baseArray = [];
	this.settings = settings;
	Globals.w = settings.get_width();
	Globals.h = settings.get_height();
	var u = new Date().getTime();
	if("" + u == Sketcher.UNIQ_ID) {
		Sketcher.UNIQ_ID = "" + u + "_1";
	} else {
		Sketcher.UNIQ_ID = "" + u;
	}
	Sketcher.SVG_UNIQ_ID = "" + this.WRAPPER_ID + "_" + this.SVG_ID + "_" + Sketcher.UNIQ_ID;
	if(settings.get_elementID() != null) {
		this.WRAPPER_ID = settings.get_elementID();
	}
	if(settings.get_isScaled() == true) {
		if(window.document.getElementById("" + settings.get_elementID() + "-style") == null) {
			var node = window.document.createElement("style");
			node.id = "" + settings.get_elementID() + "-style";
			node.innerHTML = "\n\t\t\t\t<!-- no padding -->\n\t\t\t\t.sketcher-wrapper{width: 100%;height: 100%; max-width: 100vh;padding: 0;margin: 0 auto;display: flex;align-items: center;justify-content: center;}\n\t\t\t\tsvg {width: 100%; height: 100%; background-color:#ffffff; }\n\t\t\t\tcanvas{width: 100%; background-color:#ffffff; }\n\t\t\t\t";
			window.document.body.appendChild(node);
		}
	}
	if(settings.get_padding() != null && settings.get_padding() >= 0) {
		if(window.document.getElementById("" + settings.get_elementID() + "-style") == null) {
			var node = window.document.createElement("style");
			node.id = "" + settings.get_elementID() + "-style";
			node.innerHTML = "\n\t\t\t\t<!-- with padding -->\n\t\t\t\t.sketcher-wrapper{width: 100%;height: 100%; max-width: 100vh;padding: 0;margin: 0 auto;display: flex;align-items: center;justify-content: center;}\n\t\t\t\tsvg {padding: " + settings.get_padding() + "px; width: 100%;  height: 100%; background-color:#ffffff; }\n\t\t\t\tcanvas {padding: " + settings.get_padding() + "px; width: 100%; background-color:#ffffff; }\n\t\t\t\t";
			window.document.body.appendChild(node);
		}
	}
};
Sketcher.__name__ = "Sketcher";
Sketcher.create = function(settings) {
	var sketcher = new Sketcher(settings);
	sketcher.baseArray = [];
	return sketcher;
};
Sketcher.prototype = {
	appendTo: function(element) {
		if(element == null) {
			return this;
		}
		this.element = element;
		switch(this.settings.get_type()) {
		case "canvas":
			this.canvas = window.document.createElement("canvas");
			this.canvas.width = this.settings.get_width();
			this.canvas.height = this.settings.get_height();
			this.canvas.id = this.CANVAS_ID;
			Sketcher.ctx = this.canvas.getContext("2d",null);
			element.appendChild(this.canvas);
			break;
		case "svg":
			var svgW = "" + this.settings.get_width();
			var svgH = "" + this.settings.get_height();
			var svgViewBox = "0 0 " + this.settings.get_width() + " " + this.settings.get_height();
			if(this.settings.get_sizeType() != null) {
				svgW = "" + Math.round(sketcher_util_MathUtil.px2mm(this.settings.get_width())) + this.settings.get_sizeType();
				svgH = "" + Math.round(sketcher_util_MathUtil.px2mm(this.settings.get_height())) + this.settings.get_sizeType();
			}
			if(this.settings.get_viewBox() != null) {
				svgViewBox = "" + this.settings.get_viewBox()[0] + " " + this.settings.get_viewBox()[1] + " " + this.settings.get_viewBox()[2] + " " + this.settings.get_viewBox()[3];
			}
			var _xml = "<?xml version=\"1.0\" standalone=\"no\"?><svg width=\"" + svgW + "\" height=\"" + svgH + "\" viewBox=\"" + svgViewBox + "\" version=\"1.1\" id=\"" + Sketcher.SVG_UNIQ_ID + "\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"></svg>";
			element.innerHTML = _xml;
			this.svgEl = element;
			break;
		case "webgl":
			this.canvas = window.document.createElement("canvas");
			this.canvas.width = this.settings.get_width();
			this.canvas.height = this.settings.get_height();
			this.canvas.id = this.WEBGL_ID;
			Sketcher.gl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.canvas,null);
			element.appendChild(this.canvas);
			break;
		default:
			haxe_Log.trace("case '" + this.settings.get_type().toLowerCase() + "': trace ('" + this.settings.get_type().toLowerCase() + "');",{ fileName : "Sketcher.hx", lineNumber : 171, className : "Sketcher", methodName : "appendTo"});
		}
		return this;
	}
	,makeBackground: function(color) {
		var shape = new sketcher_draw_Background(color);
		this.baseArray.unshift(shape);
		return shape;
	}
	,makeText: function(str,x,y) {
		var shape = new sketcher_draw_Text(str,x,y);
		this.baseArray.push(shape);
		return shape;
	}
	,makeCircle: function(x,y,radius) {
		var shape = new sketcher_draw_Circle(x,y,radius);
		this.baseArray.push(shape);
		return shape;
	}
	,makeRectangle: function(x,y,width,height,isCenter) {
		if(isCenter == null) {
			isCenter = true;
		}
		var shape = new sketcher_draw_Rectangle(x,y,width,height,isCenter);
		this.baseArray.push(shape);
		return shape;
	}
	,makeRectangleInt: function(x,y,width,height,isCenter) {
		if(isCenter == null) {
			isCenter = true;
		}
		var shape = new sketcher_draw_Rectangle(x,y,width,height);
		this.baseArray.push(shape);
		return shape;
	}
	,makeButton: function(x,y,width,height,isCenter) {
		if(isCenter == null) {
			isCenter = true;
		}
		var shape = new sketcher_draw_Button(x,y,width,height,isCenter);
		this.baseArray.push(shape);
		return shape;
	}
	,makeRoundedRectangle: function(x,y,width,height,radius,isCenter) {
		if(isCenter == null) {
			isCenter = true;
		}
		if(!isCenter) {
			x = Math.round(width / 2);
			y = Math.round(height / 2);
		}
		var shape = new sketcher_draw_Rectangle(x,y,width,height);
		shape.set_radius(radius);
		this.baseArray.push(shape);
		return shape;
	}
	,makeLine: function(x1,y1,x2,y2) {
		var shape = new sketcher_draw_Line(x1,y1,x2,y2);
		this.baseArray.push(shape);
		return shape;
	}
	,makeLinePoint: function(p1,p2) {
		var shape = new sketcher_draw_Line(p1.x,p1.y,p2.x,p2.y);
		this.baseArray.push(shape);
		return shape;
	}
	,makeEllipse: function(x,y,rx,ry) {
		var shape = new sketcher_draw_Ellipse(x,y,rx,ry);
		this.baseArray.push(shape);
		return shape;
	}
	,makePolygon: function(sides) {
		var shape = new sketcher_draw_Polygon(sides);
		this.baseArray.push(shape);
		return shape;
	}
	,makePolygonPoint: function(sides) {
		var _sides = [];
		var _g = 0;
		while(_g < sides.length) {
			var i = sides[_g];
			++_g;
			_sides.push(i.x);
			_sides.push(i.y);
		}
		var shape = new sketcher_draw_Polygon(_sides);
		shape.set_arrPoint(sides);
		this.baseArray.push(shape);
		return shape;
	}
	,makePath: function(x,y) {
		var shape = new sketcher_draw_Path(x,y);
		this.baseArray.push(shape);
		return shape;
	}
	,makePolyLine: function(sides) {
		var shape = new sketcher_draw_PolyLine(sides);
		this.baseArray.push(shape);
		return shape;
	}
	,makePolyLinePoint: function(sides) {
		var _sides = [];
		var _g = 0;
		while(_g < sides.length) {
			var i = sides[_g];
			++_g;
			_sides.push(i.x);
			_sides.push(i.y);
		}
		var shape = new sketcher_draw_PolyLine(_sides);
		this.baseArray.push(shape);
		return shape;
	}
	,makeGradient: function(color0,color1,isLinear) {
		if(isLinear == null) {
			isLinear = true;
		}
		var shape = new sketcher_draw_Gradient(color0,color1,isLinear);
		this.baseArray.push(shape);
		return shape;
	}
	,makeImage: function(x,y,href,width,height,isCenter) {
		if(isCenter == null) {
			isCenter = false;
		}
		var shape = new sketcher_draw_Image(x,y,href,width,height,isCenter);
		this.baseArray.push(shape);
		return shape;
	}
	,makeImageFromImage: function(x,y,img,width,height,isCenter) {
		if(isCenter == null) {
			isCenter = false;
		}
		var shape = new sketcher_draw_Image(x,y,"",width,height,isCenter);
		shape.set_image(img);
		this.baseArray.push(shape);
		return shape;
	}
	,makeGroup: function(array) {
		var shape = new sketcher_draw_Group(array);
		var _g = 0;
		var _g1 = array.length;
		while(_g < _g1) {
			var j = _g++;
			var _base = array[j];
			var _g2 = 0;
			var _g3 = this.baseArray.length;
			while(_g2 < _g3) {
				var i = _g2++;
				var base = this.baseArray[i];
				if(base == _base) {
					this.baseArray[i] = null;
				}
			}
		}
		this.baseArray.push(shape);
		return shape;
	}
	,makeMask: function(array) {
		var shape = new sketcher_draw_Mask(array);
		var _g = 0;
		var _g1 = array.length;
		while(_g < _g1) {
			var j = _g++;
			var _base = array[j];
			var _g2 = 0;
			var _g3 = this.baseArray.length;
			while(_g2 < _g3) {
				var i = _g2++;
				var base = this.baseArray[i];
				if(base == _base) {
					this.baseArray[i] = null;
				}
			}
		}
		this.baseArray.push(shape);
		return shape;
	}
	,makeMarker: function(array) {
		var shape = new sketcher_draw_Marker(array);
		var _g = 0;
		var _g1 = array.length;
		while(_g < _g1) {
			var j = _g++;
			var _base = array[j];
			var _g2 = 0;
			var _g3 = this.baseArray.length;
			while(_g2 < _g3) {
				var i = _g2++;
				var base = this.baseArray[i];
				if(base == _base) {
					this.baseArray[i] = null;
				}
			}
		}
		this.baseArray.push(shape);
		return shape;
	}
	,makeMirror: function(dir) {
		var shape = new sketcher_draw_Mirror(dir);
		if(this.settings.get_type().toLowerCase() == "svg") {
			shape.baseArray = this.baseArray;
		}
		this.baseArray.push(shape);
		return shape;
	}
	,makeX: function(x,y,color) {
		if(color == null) {
			color = "red";
		}
		var cx = Math.round(x);
		var cy = Math.round(y);
		var r = 5;
		var polyline = new sketcher_draw_PolyLine([cx,cy,cx - r,cy,cx,cy,cx + r,cy,cx,cy,cx,cy - r,cx,cy,cx,cy + r,cx,cy]);
		polyline.set_id("registration_marker_" + polyline.get_count());
		polyline.set_desc("Registration Marker\nx: " + cx + ", y: " + cy);
		polyline.set_strokeColor(color);
		polyline.set_strokeWeight(1);
		polyline.set_fillColor(color);
		polyline.set_lineCap("butt");
		polyline.set_lineJoin("miter");
		this.baseArray.push(polyline);
		return polyline;
	}
	,makeXCross: function(x,y,size) {
		var cx = x;
		var cy = y;
		var r = size;
		var polyline = new sketcher_draw_PolyLine([cx,cy,cx - r,cy,cx,cy,cx + r,cy,cx,cy,cx,cy - r,cx,cy,cx,cy + r,cx,cy]);
		polyline.set_id("xcross_" + polyline.get_count());
		polyline.set_desc("xcross\nx: " + cx + ", y: " + cy + ", size:" + size);
		polyline.set_lineCap("butt");
		polyline.set_lineJoin("bevel");
		this.baseArray.push(polyline);
		return polyline;
	}
	,clear: function() {
		this.baseArray = [];
		if(this.settings.get_type().toLowerCase() == "svg") {
			if(this.getSVGElement() != null) {
				this.getSVGElement().innerHTML = "";
			} else {
				this.element.innerHTML = "";
			}
		}
		if(this.settings.get_type().toLowerCase() == "canvas") {
			Sketcher.ctx.clearRect(0,0,this.settings.get_width(),this.settings.get_height());
		}
	}
	,getBaseArray: function() {
		return this.baseArray;
	}
	,getSVG: function() {
		var div = window.document.getElementById(this.WRAPPER_ID);
		return div.innerHTML;
	}
	,getSVGElement: function() {
		var svg = window.document.getElementById("" + Sketcher.SVG_UNIQ_ID);
		return svg;
	}
	,update: function() {
		if(this.element == null) {
			return;
		}
		switch(this.settings.get_type()) {
		case "canvas":
			var _g = 0;
			var _g1 = this.baseArray.length;
			while(_g < _g1) {
				var i = _g++;
				var base = this.baseArray[i];
				if(base == null) {
					continue;
				}
				base.ctx(Sketcher.ctx);
			}
			this.baseArray = [];
			break;
		case "svg":
			var svgW = "" + this.settings.get_width();
			var svgH = "" + this.settings.get_height();
			var svgViewBox = "0 0 " + this.settings.get_width() + " " + this.settings.get_height();
			if(this.settings.get_sizeType() != null) {
				svgW += "" + this.settings.get_sizeType();
				svgH += "" + this.settings.get_sizeType();
			}
			if(this.settings.get_viewBox() != null) {
				svgViewBox = "" + this.settings.get_viewBox()[0] + " " + this.settings.get_viewBox()[1] + " " + this.settings.get_viewBox()[2] + " " + this.settings.get_viewBox()[3];
			}
			var _xml = "<?xml version=\"1.0\" standalone=\"no\"?><svg width=\"" + svgW + "\" height=\"" + svgH + "\" viewBox=\"" + svgViewBox + "\" version=\"1.1\" id=\"" + Sketcher.SVG_UNIQ_ID + "\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\">";
			var svgInnerHtml = "";
			var content = "";
			var defs = "";
			var _g = 0;
			var _g1 = this.baseArray.length;
			while(_g < _g1) {
				var i = _g++;
				var base = this.baseArray[i];
				if(base == null) {
					continue;
				}
				var draw = base.svg(this.settings);
				switch(base.type) {
				case "gradient":case "marker":case "mask":
					defs += draw;
					break;
				default:
					content += draw;
				}
			}
			_xml += "<defs>" + defs + "</defs>";
			_xml += content + "</svg>";
			svgInnerHtml += "<defs>" + defs + "</defs>";
			svgInnerHtml += content + "</svg>";
			this.svg = _xml;
			if(this.getSVGElement() != null) {
				this.getSVGElement().innerHTML = svgInnerHtml;
			} else {
				this.element.innerHTML = _xml;
			}
			break;
		case "webgl":
			haxe_Log.trace("webgl",{ fileName : "Sketcher.hx", lineNumber : 761, className : "Sketcher", methodName : "update"});
			var _g = 0;
			var _g1 = this.baseArray.length;
			while(_g < _g1) {
				var i = _g++;
				var base = this.baseArray[i];
				if(base == null) {
					continue;
				}
				base.gl(Sketcher.gl);
			}
			this.baseArray = [];
			break;
		default:
			haxe_Log.trace("case '" + this.settings.get_type() + "': trace ('" + this.settings.get_type() + "');",{ fileName : "Sketcher.hx", lineNumber : 772, className : "Sketcher", methodName : "update"});
		}
	}
	,__class__: Sketcher
};
var SketcherBase = function(settings) {
	this.isSet = false;
	this.description = "";
	this.patternName = "";
	this.isDebug = false;
	this.isDrawActive = true;
	if(this.isDebug) {
		haxe_Log.trace("START :: " + this.toString(),{ fileName : "SketcherBase.hx", lineNumber : 39, className : "SketcherBase", methodName : "new"});
	}
	this.sketchSettings(settings);
	if(!this.isSet) {
		window.addEventListener(Globals.RESIZE,$bind(this,this._reset),false);
		window.addEventListener(Globals.KEY_DOWN,$bind(this,this._keyDown),false);
		window.addEventListener(Globals.KEY_UP,$bind(this,this._keyUp),false);
		window.addEventListener(Globals.MOUSE_UP,$bind(this,this._mouseUp));
	}
	this.setup();
	this._draw();
	$global.console.groupCollapsed("Default cc-sketcher keyboard shortcuts are activated");
	$global.console.info("• [cmd + r] = reload page\n• [cmd + s] = save jpg\n• [cmd + shift + s] = save png\n• [cmd + ctrl + s] = save transparant png\n• [cmd + alt + s] = save svg\n• [cmd + f] = toggle fullscreen");
	$global.console.groupEnd();
	this.isSet = true;
};
SketcherBase.__name__ = "SketcherBase";
SketcherBase.prototype = {
	sketchSettings: function(settings) {
		if(settings == null) {
			var stageW = 1080;
			var stageH = 1080;
			settings = new Settings(stageW,stageH,"canvas");
			settings.set_isAutostart(true);
			settings.set_padding(10);
			settings.set_isScaled(false);
			settings.set_elementID("sketcher-canvas-wrapper");
		}
		if(settings != null && settings.get_element() != null) {
			haxe_Log.trace(settings.get_element(),{ fileName : "SketcherBase.hx", lineNumber : 77, className : "SketcherBase", methodName : "sketchSettings"});
		}
		if(window.document.getElementById(settings.get_elementID()) != null) {
			window.document.getElementById(settings.get_elementID()).innerHTML = "";
		}
		if(settings.get_elementID() != null && window.document.getElementById(settings.get_elementID()) == null) {
			var div0 = window.document.createElement("div");
			div0.id = "" + settings.get_elementID();
			div0.className = "sketcher-wrapper " + settings.get_type() + "-wrapper";
			window.document.body.appendChild(div0);
			this.sketch = Sketcher.create(settings).appendTo(div0);
		} else {
			this.sketch = Sketcher.create(settings).appendTo(window.document.getElementById(settings.get_elementID()));
		}
	}
	,_keyDown: function(e) {
		if(e.metaKey == true && e.key == "r") {
			$global.console.log("[cmd + r] = reload page");
			$global.location.reload();
		}
		if(e.metaKey == true && e.key == "s" && e.shiftKey == false && e.ctrlKey == false) {
			e.preventDefault();
			e.stopPropagation();
			$global.console.log("[cmd + s] = save jpg");
			if(this.sketch.settings.get_type() == "svg") {
				haxe_Log.trace("svg-jpg",{ fileName : "SketcherBase.hx", lineNumber : 116, className : "SketcherBase", methodName : "_keyDown"});
				sketcher_export_FileExport.svg2Canvas(this.sketch.getSVGElement(),true,this.getFileName());
			} else {
				haxe_Log.trace("canvas-jpg",{ fileName : "SketcherBase.hx", lineNumber : 120, className : "SketcherBase", methodName : "_keyDown"});
				sketcher_export_FileExport.downloadImageBg(this.sketch.canvas.getContext("2d",null),true,this.getFileName());
			}
		}
		if(e.metaKey == true && e.key == "s" && e.shiftKey == true) {
			e.preventDefault();
			e.stopPropagation();
			$global.console.log("[cmd + shift + s] = save png");
			if(this.sketch.settings.get_type() == "svg") {
				haxe_Log.trace("svg-png",{ fileName : "SketcherBase.hx", lineNumber : 133, className : "SketcherBase", methodName : "_keyDown"});
				sketcher_export_FileExport.svg2Canvas(this.sketch.getSVGElement(),false,this.getFileName());
			} else {
				haxe_Log.trace("canvas-png",{ fileName : "SketcherBase.hx", lineNumber : 137, className : "SketcherBase", methodName : "_keyDown"});
				sketcher_export_FileExport.downloadImageBg(this.sketch.canvas.getContext("2d",null),false,this.getFileName());
			}
		}
		if(e.metaKey == true && e.key == "s" && e.ctrlKey == true) {
			e.preventDefault();
			e.stopPropagation();
			$global.console.log("[cmd + ctrl + s] = save transparant png");
			if(this.sketch.settings.get_type() == "svg") {
				haxe_Log.trace("svg-png-transparant",{ fileName : "SketcherBase.hx", lineNumber : 148, className : "SketcherBase", methodName : "_keyDown"});
				sketcher_export_FileExport.svg2Canvas(this.sketch.getSVGElement(),false,this.getFileName(),true);
			} else {
				haxe_Log.trace("canvas-png-transparant",{ fileName : "SketcherBase.hx", lineNumber : 152, className : "SketcherBase", methodName : "_keyDown"});
				sketcher_export_FileExport.downloadImageBg(this.sketch.canvas.getContext("2d",null),false,this.getFileName(),true);
			}
		}
		if(e.metaKey == true && (e.code == "KeyS" && e.altKey == true)) {
			e.preventDefault();
			e.stopPropagation();
			$global.console.log("[cmd + alt + s] = save svg");
			if(this.sketch.settings.get_type() == "svg") {
				haxe_Log.trace("svg-text",{ fileName : "SketcherBase.hx", lineNumber : 165, className : "SketcherBase", methodName : "_keyDown"});
				sketcher_export_FileExport.downloadTextFile(this.sketch.svg,"" + this.getFileName() + ".svg");
			} else {
				$global.console.warn("no canvas-2-svg");
			}
		}
		if(e.metaKey == true && e.key == "f") {
			e.preventDefault();
			e.stopPropagation();
			$global.console.log("[cmd + f] = toggle fullscreen");
			if(!Globals.isFullscreen) {
				this.openFullscreen();
				Globals.isFullscreen = true;
			} else {
				this.closeFullscreen();
				Globals.isFullscreen = false;
			}
		}
		if(e.key == " ") {
			this.draw();
		}
	}
	,_keyUp: function(e) {
	}
	,_mouseUp: function(e) {
		Globals.isMouseDown = false;
	}
	,_reset: function() {
		this.resize();
	}
	,_draw: function(timestamp) {
		this.draw();
		this.__export();
		if(!this.sketch.settings.get_isAnimation()) {
			return;
		}
		if(this.isDrawActive) {
			this.requestID = window.requestAnimationFrame($bind(this,this._draw));
		}
	}
	,setup: function() {
		if(this.isDebug) {
			haxe_Log.trace("SETUP :: " + this.toString() + " -> override public function draw()",{ fileName : "SketcherBase.hx", lineNumber : 227, className : "SketcherBase", methodName : "setup"});
		}
	}
	,draw: function() {
		if(this.isDebug) {
			haxe_Log.trace("DRAW :: " + this.toString() + " -> override public function draw()",{ fileName : "SketcherBase.hx", lineNumber : 235, className : "SketcherBase", methodName : "draw"});
		}
	}
	,resize: function() {
		if(this.isDebug) {
			haxe_Log.trace("RESIZE :: " + this.toString() + " -> override public function resize()",{ fileName : "SketcherBase.hx", lineNumber : 243, className : "SketcherBase", methodName : "resize"});
		}
	}
	,__export: function() {
	}
	,pause: function() {
		this.isDrawActive = !this.isDrawActive;
	}
	,stop: function() {
		this.isDrawActive = false;
	}
	,play: function() {
		this.isDrawActive = true;
		if(this.requestID == null) {
			this._draw();
		}
	}
	,start: function() {
		this.play();
	}
	,onKeyDown: function(e) {
	}
	,openFullscreen: function() {
		var elem = window.document.documentElement;
		if(elem.requestFullscreen != null) {
			elem.requestFullscreen();
		} else if(elem.mozRequestFullScreen) {
			elem.mozRequestFullScreen();
		} else if(elem.webkitRequestFullscreen) {
			elem.webkitRequestFullscreen();
		} else if(elem.msRequestFullscreen) {
			elem.msRequestFullscreen();
		}
	}
	,closeFullscreen: function() {
		if(window.document.exitFullscreen != null) {
			window.document.exitFullscreen();
		} else if(window.document.mozCancelFullScreen) {
			window.document.mozCancelFullScreen();
		} else if(window.document.webkitExitFullscreen) {
			window.document.webkitExitFullscreen();
		} else if(window.document.msExitFullscreen) {
			window.document.msExitFullscreen();
		}
	}
	,get_w2: function() {
		return Globals.w / 2;
	}
	,get_h2: function() {
		return Globals.h / 2;
	}
	,get_w4: function() {
		return Globals.w / 4;
	}
	,get_h4: function() {
		return Globals.h / 4;
	}
	,get_w3: function() {
		return Globals.w / 3;
	}
	,get_h3: function() {
		return Globals.h / 3;
	}
	,getFileName: function() {
		if(this.patternName == "" && this.description == "") {
			this.patternName = "CC-Sketcher-MatthijsKamstra";
		} else if(this.patternName == "" && this.description != "") {
			this.patternName = this.description;
		}
		var date = new Date();
		var year = "" + date.getFullYear();
		var month = StringTools.lpad("" + (date.getMonth() + 1),"0",2);
		var day = StringTools.lpad("" + date.getDate(),"0",2);
		return "" + StringTools.replace(StringTools.replace(this.patternName," ","_"),"\n","_") + "-" + year + month + day + "-" + date.getTime();
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		var className = c.__name__;
		return className;
	}
	,__class__: SketcherBase
	,__properties__: {get_h3:"get_h3",get_w3:"get_w3",get_h4:"get_h4",get_w4:"get_w4",get_h2:"get_h2",get_w2:"get_w2"}
};
var Std = function() { };
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	do {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
	} while(n > 0);
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var XmlType = {};
XmlType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
Xml.__name__ = "Xml";
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return this.attributeMap.h[att];
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		this.attributeMap.h[att] = value;
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return Object.prototype.hasOwnProperty.call(this.attributeMap.h,att);
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.attributeMap.h);
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var art_PapertoySketcherBase = function(set) {
	this.mm20 = Math.ceil(cc_model_constants_Paper.mm2pixel(20));
	this.dashArray = [5.];
	this.isFondEmbedded = false;
	var paperW = Math.ceil(cc_model_constants_Paper.mm2pixel(210));
	var paperH = Math.ceil(cc_model_constants_Paper.mm2pixel(297));
	this.cx = paperW / 2;
	this.cy = paperH / 2;
	this.settings = new Settings(paperW,paperH,"svg");
	this.settings.set_isAutostart(true);
	this.settings.set_padding(10);
	this.settings.set_isScaled(false);
	this.settings.set_elementID("sketcher-svg");
	SketcherBase.call(this,this.settings);
};
art_PapertoySketcherBase.__name__ = "art.PapertoySketcherBase";
art_PapertoySketcherBase.__super__ = SketcherBase;
art_PapertoySketcherBase.prototype = $extend(SketcherBase.prototype,{
	draw: function() {
		$global.console.log("DRAW (PapertoySketcherBase) :: " + this.toString());
		this.sketch.clear();
		var group = this.sketch.makeGroup([]);
		group.set_id("sketch basics");
		this.createColofon();
	}
	,createColofon: function() {
		var sizeW = 50;
		var sizeH = Math.round(cc_model_constants_Paper.mm2pixel(4));
		var round = this.sketch.makeRoundedRectangle(0,0,100,60,2,false);
		round.set_fill(cc_util_ColorUtil.getColourObj(cc_util_ColorUtil.WHITE));
		round.set_stroke(cc_util_ColorUtil.getColourObj(cc_util_ColorUtil.GRAY));
		round.setPosition(-23,-23);
		var text0 = this.sketch.makeText("fold",0,Math.round(sizeH * 0));
		text0.set_fontFamily("Arial");
		text0.set_fontSize("8px");
		text0.set_textAlign(sketcher_draw_TextAlignType.Right);
		text0.set_textBaseline(sketcher_draw_TextBaselineType.Middle);
		var text1 = this.sketch.makeText("cut",0,Math.round(sizeH * 1.5));
		text1.set_fontFamily("Arial");
		text1.set_fontSize("8px");
		text1.set_textAlign(sketcher_draw_TextAlignType.Right);
		text1.set_textBaseline(sketcher_draw_TextBaselineType.Middle);
		var colofonFold = this.sketch.makeRectangle(Math.round(sizeW / 2 + 10),Math.round(sizeH * 0),sizeW,sizeH);
		colofonFold.set_dash(this.dashArray);
		colofonFold.set_fill(cc_util_ColorUtil.getColourObj(cc_util_ColorUtil.WHITE));
		colofonFold.set_stroke(cc_util_ColorUtil.getColourObj(cc_util_ColorUtil.BLACK));
		var cut = this.sketch.makeRectangle(Math.round(sizeW / 2 + 10),Math.round(sizeH * 1.5),sizeW,sizeH);
		cut.set_fill(cc_util_ColorUtil.getColourObj(cc_util_ColorUtil.WHITE));
		cut.set_stroke(cc_util_ColorUtil.getColourObj(cc_util_ColorUtil.BLACK));
		var group = this.sketch.makeGroup([round,text0,text1,colofonFold,cut]);
		group.set_id("sketch colofon");
		group.setPosition(30,800);
	}
	,onEmbedHandler: function(e) {
		$global.console.log("onEmbedHandler :: " + this.toString() + " -> \"" + e + "\"");
	}
	,__class__: art_PapertoySketcherBase
});
var art_SVGShadowBox = function() {
	this.testArray = [];
	this.colorArray = [];
	this.cutArray = [];
	this.quoteArray = [];
	this.designArray = [];
	this.glueArray = [];
	this._currentQuote = model_constants_Quotes.array[0];
	this.guisettings = new GUISettings();
	var _gthis = this;
	this.shapeName = "ShadowBox";
	var filename = "quote-shadowbox-" + new Date().getTime();
	cc_draw_Text.embedGoogleFont("Roboto|Oswald:200,300,400,500,600,700",$bind(this,this.onEmbedHandler));
	this.setDatGui();
	this.guisettings.jpg = function() {
		var svg = _gthis.sketch.getSVGElement();
		DownloadWrapper.svg2Canvas(svg,true,"" + filename);
	};
	this.guisettings.png = function() {
		var svg = _gthis.sketch.getSVGElement();
		DownloadWrapper.svg2Canvas(svg,false,"" + filename);
	};
	this.guisettings.svg = function() {
		var svg = _gthis.sketch.getSVGElement();
		DownloadWrapper.svgExport(svg,"" + filename);
	};
	this.guisettings.update = function() {
		_gthis.update();
	};
	art_PapertoySketcherBase.call(this);
};
art_SVGShadowBox.__name__ = "art.SVGShadowBox";
art_SVGShadowBox.__super__ = art_PapertoySketcherBase;
art_SVGShadowBox.prototype = $extend(art_PapertoySketcherBase.prototype,{
	init: function() {
		this.padding = cc_model_constants_Paper.mm2pixel(5);
		this.sbWidth = cc_model_constants_Paper.mm2pixel(10);
		this.sbHeight = cc_model_constants_Paper.mm2pixel(10);
		this.sbImageWidth = cc_model_constants_Paper.mm2pixel(50);
		this.sbImageHeight = cc_model_constants_Paper.mm2pixel(100);
		this.dotted = this.sbWidth / 4 | 0;
		this.sbImageWidthMax = this.settings.get_width() - 2 * this.padding - 4 * this.sbWidth - 4 * this.sbHeight;
		this.sbImageHeightMax = this.settings.get_height() - 2 * this.padding - 4 * this.sbWidth - 4 * this.sbHeight;
		this.sbImageWidth = this.sbImageWidthMax | 0;
		this.sbImageHeight = this.sbImageHeightMax | 0;
	}
	,update: function() {
		this.glueArray = [];
		this.designArray = [];
		this.quoteArray = [];
		this.cutArray = [];
		this.colorArray = [];
		this.testArray = [];
		this.sketch.clear();
		this.draw();
	}
	,draw: function() {
		$global.console.log("DRAW (" + this.shapeName + ") :: " + this.toString());
		art_PapertoySketcherBase.prototype.draw.call(this);
		this.init();
		this.fitText("Quote shadowbox".toUpperCase());
		var rect = this.sketch.makeRectangle(this.cx,this.cy,this.sbImageWidth,this.sbImageHeight);
		rect.set_fill("#F5F5F5");
		rect.set_dash(this.dashArray);
		this.designArray.push(rect);
		var rect = this.sketch.makeRectangle(this.cx,this.cy,this.sbImageWidth - 2 * this.sbWidth,this.sbImageHeight - 2 * this.sbWidth);
		rect.set_stroke(cc_util_ColorUtil.getColourObj(cc_util_ColorUtil.GRAY));
		this.designArray.push(rect);
		var rect = this.sketch.makeRectangle(this.cx,this.cy,this.sbImageWidth,this.sbImageHeight + this.sbHeight * 8);
		rect.set_id("color-layer-one");
		this.colorArray.push(rect);
		var rect = this.sketch.makeRectangle(this.cx,this.cy,this.sbImageWidth + this.sbWidth * 8,this.sbImageHeight);
		rect.set_id("color-layer-two");
		this.colorArray.push(rect);
		var rect = this.sketch.makeRectangle(this.cx + this.sbImageWidth / 2 + this.sbWidth / 2 + this.sbWidth * 0,this.cy,this.sbWidth,this.sbImageHeight);
		rect.set_dash(this.dashArray);
		this.designArray.push(rect);
		var rect = this.sketch.makeRectangle(this.cx + this.sbImageWidth / 2 + this.sbWidth / 2 + this.sbWidth,this.cy,this.sbWidth,this.sbImageHeight);
		rect.set_opacity(0);
		rect.set_dash(this.dashArray);
		this.designArray.push(rect);
		var rect = this.sketch.makeRectangle(this.cx + this.sbImageWidth / 2 + this.sbWidth / 2 + this.sbWidth * 3,this.cy,this.sbWidth,this.sbImageHeight);
		rect.set_fill("#F5F5F5");
		rect.set_strokeOpacity(0);
		this.designArray.push(rect);
		var rect = this.sketch.makeRectangle(this.cx + this.sbImageWidth / 2 + this.sbWidth / 2 + this.sbWidth * 2,this.cy,this.sbWidth,this.sbImageHeight);
		rect.set_dash(this.dashArray);
		this.designArray.push(rect);
		var rect = this.sketch.makeRectangle(this.cx - this.sbImageWidth / 2 - this.sbWidth / 2 - this.sbWidth * 0,this.cy,this.sbWidth,this.sbImageHeight);
		rect.set_dash(this.dashArray);
		this.designArray.push(rect);
		var rect = this.sketch.makeRectangle(this.cx - this.sbImageWidth / 2 - this.sbWidth / 2 - this.sbWidth,this.cy,this.sbWidth,this.sbImageHeight);
		rect.set_opacity(0);
		rect.set_dash(this.dashArray);
		this.designArray.push(rect);
		var rect = this.sketch.makeRectangle(this.cx - this.sbImageWidth / 2 - this.sbWidth / 2 - this.sbWidth * 3,this.cy,this.sbWidth,this.sbImageHeight);
		rect.set_fill("#F5F5F5");
		rect.set_strokeOpacity(0);
		this.designArray.push(rect);
		var rect = this.sketch.makeRectangle(this.cx - this.sbImageWidth / 2 - this.sbWidth / 2 - this.sbWidth * 2,this.cy,this.sbWidth,this.sbImageHeight);
		rect.set_dash(this.dashArray);
		this.designArray.push(rect);
		var rect = this.sketch.makeRectangle(this.cx,this.cy - this.sbImageHeight / 2 - this.sbHeight / 2 - this.sbHeight * 0,this.sbImageWidth,this.sbHeight);
		rect.set_dash(this.dashArray);
		this.designArray.push(rect);
		var rect = this.sketch.makeRectangle(this.cx,this.cy - this.sbImageHeight / 2 - this.sbHeight / 2 - this.sbHeight,this.sbImageWidth,this.sbHeight);
		rect.set_opacity(0);
		rect.set_dash(this.dashArray);
		this.designArray.push(rect);
		var rect = this.sketch.makeRectangle(this.cx,this.cy - this.sbImageHeight / 2 - this.sbHeight / 2 - this.sbHeight * 3,this.sbImageWidth - this.sbWidth * 2,this.sbHeight);
		rect.set_fill("#F5F5F5");
		rect.set_strokeOpacity(0);
		this.designArray.push(rect);
		var rect = this.sketch.makeRectangle(this.cx,this.cy - this.sbImageHeight / 2 - this.sbHeight / 2 - this.sbHeight * 2,this.sbImageWidth - this.sbWidth * 2,this.sbHeight);
		rect.set_dash(this.dashArray);
		this.designArray.push(rect);
		var rect = this.sketch.makeRectangle(this.cx,this.cy + this.sbImageHeight / 2 + this.sbHeight / 2 + this.sbHeight * 0,this.sbImageWidth,this.sbHeight);
		rect.set_dash(this.dashArray);
		this.designArray.push(rect);
		var rect = this.sketch.makeRectangle(this.cx,this.cy + this.sbImageHeight / 2 + this.sbHeight / 2 + this.sbHeight,this.sbImageWidth,this.sbHeight);
		rect.set_opacity(0);
		rect.set_dash(this.dashArray);
		this.designArray.push(rect);
		var rect = this.sketch.makeRectangle(this.cx,this.cy + this.sbImageHeight / 2 + this.sbHeight / 2 + this.sbHeight * 3,this.sbImageWidth - this.sbWidth * 2,this.sbHeight);
		rect.set_fill("#F5F5F5");
		rect.set_strokeOpacity(0);
		this.designArray.push(rect);
		var rect = this.sketch.makeRectangle(this.cx,this.cy + this.sbImageHeight / 2 + this.sbHeight / 2 + this.sbHeight * 2,this.sbImageWidth - this.sbWidth * 2,this.sbHeight);
		rect.set_dash(this.dashArray);
		this.designArray.push(rect);
		this.setText();
		var _cornerTL_x = this.padding + 2 * this.sbWidth + 2 * this.sbHeight;
		var _cornerTL_y = this.padding + 2 * this.sbWidth + 2 * this.sbHeight;
		var _cornerTR_x = this.padding + 2 * this.sbWidth + 2 * this.sbHeight + this.sbImageWidth;
		var _cornerTR_y = this.padding + 2 * this.sbWidth + 2 * this.sbHeight;
		var _cornerBR_x = this.padding + 2 * this.sbWidth + 2 * this.sbHeight + this.sbImageWidth;
		var _cornerBR_y = this.padding + 2 * this.sbWidth + 2 * this.sbHeight + this.sbImageHeight;
		var _cornerBL_x = this.padding + 2 * this.sbWidth + 2 * this.sbHeight;
		var _cornerBL_y = this.padding + 2 * this.sbWidth + 2 * this.sbHeight + this.sbImageHeight;
		var minV = 2;
		var sides = [_cornerTL_x,_cornerTL_y,this.padding,_cornerTL_y,this.padding,_cornerTL_y + this.sbImageHeight,_cornerTL_x,_cornerTL_y + this.sbImageHeight,_cornerTL_x,_cornerTL_y + this.sbImageHeight,_cornerBL_x,_cornerBL_y,_cornerBL_x - this.sbWidth,_cornerBL_y + minV,_cornerBL_x - this.sbWidth,_cornerBL_y + this.sbHeight - minV,_cornerBL_x,_cornerBL_y + this.sbHeight,_cornerBL_x + this.sbWidth,_cornerBL_y + this.sbHeight + this.sbWidth,_cornerBL_x + this.sbWidth,_cornerBL_y + 2 * this.sbHeight + 2 * this.sbWidth,_cornerBR_x - this.sbWidth,_cornerBR_y + 2 * this.sbHeight + 2 * this.sbWidth,_cornerBR_x - this.sbWidth,_cornerBR_y + this.sbHeight + this.sbWidth,_cornerBR_x,_cornerBR_y + this.sbHeight,_cornerBR_x + this.sbWidth,_cornerBR_y + this.sbHeight - minV,_cornerBR_x + this.sbWidth,_cornerBR_y + minV,_cornerBR_x,_cornerBR_y,_cornerBR_x + 2 * this.sbWidth + 2 * this.sbHeight,_cornerBR_y,_cornerTR_x + 2 * this.sbWidth + 2 * this.sbHeight,_cornerTR_y,_cornerTR_x,_cornerTR_y,_cornerTR_x + this.sbWidth,_cornerTR_y - minV,_cornerTR_x + this.sbWidth,_cornerTR_y - this.sbHeight + minV,_cornerTR_x,_cornerTR_y - this.sbHeight,_cornerTR_x - this.sbWidth,_cornerTR_y - this.sbHeight - this.sbWidth,_cornerTR_x - this.sbWidth,_cornerTR_y - 2 * this.sbHeight - 2 * this.sbWidth,_cornerTL_x + this.sbWidth,_cornerTL_y - 2 * this.sbHeight - 2 * this.sbWidth,_cornerTL_x + this.sbWidth,_cornerTL_y - this.sbHeight - this.sbWidth,_cornerTL_x,_cornerTL_y - this.sbHeight,_cornerTL_x - this.sbWidth,_cornerTL_y - this.sbHeight + minV,_cornerTL_x - this.sbWidth,_cornerTL_y - minV,_cornerTL_x,_cornerTL_y];
		var poly = this.sketch.makePolyLine(sides);
		this.cutArray.push(poly);
		var group = this.sketch.makeGroup(this.colorArray);
		group.set_id(model_constants_Papertoy.COLOR_LAYER);
		group.set_fill(cc_util_ColorUtil.getColourObj(cc_util_ColorUtil.WHITE));
		group.set_stroke(cc_util_ColorUtil.getColourObj(cc_util_ColorUtil.WHITE));
		group.set_lineWeight(10);
		group.set_lineCap("round");
		var group = this.sketch.makeGroup(this.testArray);
		group.set_id("test test");
		var group = this.sketch.makeGroup(this.designArray);
		group.set_id(model_constants_Papertoy.DESIGN_LAYER);
		group.set_lineWeight(0.6);
		group.set_fill(cc_util_ColorUtil.getColourObj(cc_util_ColorUtil.WHITE));
		group.set_stroke(cc_util_ColorUtil.getColourObj(cc_util_ColorUtil.BLACK));
		var group = this.sketch.makeGroup(this.quoteArray);
		group.set_id(model_constants_Papertoy.TEXT_LAYER);
		var group = this.sketch.makeGroup(this.cutArray);
		group.set_id(model_constants_Papertoy.CUT_LAYER);
		group.set_fill(cc_util_ColorUtil.getColourObj(cc_util_ColorUtil.PURPLE));
		group.set_fillOpacity(0);
		group.set_stroke(cc_util_ColorUtil.getColourObj(cc_util_ColorUtil.BLACK));
		group.set_lineWeight(1.2);
		this.sketch.update();
		this.stop();
	}
	,setText: function() {
		var _padding = cc_model_constants_Paper.mm2pixel(5);
		var _paddingTop = 0;
		var _lineHeight = this.guisettings.fontsize;
		var _startx = this.padding + 2 * this.sbHeight + 3 * this.sbWidth + _padding;
		var _starty = this.padding + 2 * this.sbHeight + 3 * this.sbWidth + _padding;
		var _maxW = this.sbImageWidth - 2 * this.sbWidth - 2 * _padding;
		var _maxH = this.sbImageHeight - 2 * this.sbHeight - 2 * _padding;
		var _fontSize = this.guisettings.fontsize;
		var _fontFamilie = "'Oswald', sans-serif";
		var _fontWeight = "700";
		var isDebug = false;
		if(isDebug) {
			var red = this.sketch.makeRectangle(this.cx,this.cy,_maxW,_maxH);
			red.set_stroke(cc_util_ColorUtil.getColourObj(cc_util_ColorUtil.RED));
			this.designArray.push(red);
		}
		var textUtil = new util_TextUtil();
		textUtil.fontFamily = _fontFamilie;
		textUtil.fontWeight = _fontWeight;
		textUtil.fontSize = _fontSize;
		var lines = [];
		lines = textUtil.getLines(this._currentQuote.toUpperCase(),_maxW);
		var _g = 0;
		var _g1 = lines.length;
		while(_g < _g1) {
			var i = _g++;
			var line = lines[i];
			var yoffset = (i + 1) * _lineHeight;
			var text = this.sketch.makeText(line,_startx,_starty + yoffset);
			text.set_fontFamily(_fontFamilie);
			text.set_fontWeight(_fontWeight);
			text.set_fontSize("" + _fontSize + "px");
			text.set_fill(cc_util_ColorUtil.getColourObj(cc_util_ColorUtil.BLACK));
			this.quoteArray.push(text);
		}
	}
	,fitText: function(value) {
		var _padding = cc_model_constants_Paper.mm2pixel(5);
		var _maxW = 130;
		var _fontFamilie = "'Oswald', sans-serif";
		var _fontWeight = "700";
		var textUtil = new util_TextUtil();
		textUtil.fontFamily = _fontFamilie;
		textUtil.fontWeight = _fontWeight;
		var _fontSize = textUtil.getFittext(value,_maxW);
		var rect = textUtil.getBboxText(value);
		$global.console.log(rect);
		var isDebug = false;
		if(isDebug) {
			var red = this.sketch.makeRectangle(_padding + rect.x,_padding + rect.y + rect.height,rect.width,rect.height,false);
			red.set_stroke(cc_util_ColorUtil.getColourObj(cc_util_ColorUtil.RED));
			red.set_fillOpacity(0);
			this.testArray.push(red);
		}
		var text = this.sketch.makeText(value,_padding,_padding + rect.height);
		text.set_fontFamily(_fontFamilie);
		text.set_fontWeight(_fontWeight);
		text.set_fontSize("" + _fontSize + "px");
		text.set_textBaseline(sketcher_draw_TextBaselineType.Top);
		text.set_fill(cc_util_ColorUtil.getColourObj(cc_util_ColorUtil.BLACK));
		this.testArray.push(text);
	}
	,setDatGui: function() {
		var _gthis = this;
		var gui = new dat.gui.GUI();
		gui.remember(this.guisettings);
		gui.add(this.guisettings,"message");
		var controller0 = gui.add(this.guisettings,"fontsize");
		controller0.onChange(function(value) {
			_gthis.update();
		});
		var controller = gui.add(this.guisettings,"quotes",this.guisettings.quotes);
		controller.onChange(function(value) {
			_gthis._currentQuote = value;
			_gthis.update();
		});
		this._currentQuote = controller.getValue();
		gui.add(this.guisettings,"svg");
		gui.add(this.guisettings,"png");
		gui.add(this.guisettings,"jpg");
		gui.add(this.guisettings,"update");
	}
	,__class__: art_SVGShadowBox
});
var cc_AST = function() { };
cc_AST.__name__ = "cc.AST";
var cc_CanvasTools = function() { };
cc_CanvasTools.__name__ = "cc.CanvasTools";
cc_CanvasTools.square = function(ctx,x,y,width,height) {
	if(height == null) {
		height = width;
	}
	ctx.fillRect(x,y,width,height);
};
cc_CanvasTools.leftStrokeRect = function(ctx,x,y,width,height) {
	if(height == null) {
		height = width;
	}
	ctx.strokeRect(x,y,width,height);
};
cc_CanvasTools.centreStrokeRect = function(ctx,x,y,width,height) {
	if(height == null) {
		height = width;
	}
	ctx.strokeRect(x - width / 2,y - height / 2,width,height);
};
cc_CanvasTools.rectangleFillStroke = function(ctx,x,y,width,height) {
	if(height == null) {
		height = width;
	}
	ctx.strokeRect(x,y,width,height);
	ctx.fillRect(x,y,width,height);
};
cc_CanvasTools.centreFillRect = function(ctx,x,y,width,height) {
	if(height == null) {
		height = width;
	}
	ctx.fillRect(x - width / 2,y - height / 2,width,height);
};
cc_CanvasTools.roundRect = function(ctx,_x,_y,_width,_height,_radius,_fill,_stroke) {
	if(_stroke == null) {
		_stroke = false;
	}
	if(_fill == null) {
		_fill = true;
	}
	if(_radius == null) {
		_radius = 5;
	}
	_width = Math.abs(_width);
	_height = Math.abs(_height);
	_x -= _width / 2;
	_y -= _height / 2;
	var radius_tl = _radius;
	var radius_tr = _radius;
	var radius_br = _radius;
	var radius_bl = _radius;
	ctx.beginPath();
	ctx.moveTo(_x + radius_tl,_y);
	ctx.lineTo(_x + _width - radius_tr,_y);
	ctx.quadraticCurveTo(_x + _width,_y,_x + _width,_y + radius_tr);
	ctx.lineTo(_x + _width,_y + _height - radius_br);
	ctx.quadraticCurveTo(_x + _width,_y + _height,_x + _width - radius_br,_y + _height);
	ctx.lineTo(_x + radius_bl,_y + _height);
	ctx.quadraticCurveTo(_x,_y + _height,_x,_y + _height - radius_bl);
	ctx.lineTo(_x,_y + radius_tl);
	ctx.quadraticCurveTo(_x,_y,_x + radius_tl,_y);
	ctx.closePath();
	if(_fill) {
		ctx.fill();
	}
	if(_stroke) {
		ctx.stroke();
	}
};
cc_CanvasTools.makeCircle = function(ctx,x,y,radius) {
	ctx.beginPath();
	ctx.arc(x,y,radius,0,Math.PI * 2,true);
};
cc_CanvasTools.circle = function(ctx,x,y,radius) {
	cc_CanvasTools.makeCircle(ctx,x,y,radius);
	ctx.fill();
	ctx.closePath();
};
cc_CanvasTools.circleFillStroke = function(ctx,x,y,radius) {
	cc_CanvasTools.makeCircle(ctx,x,y,radius);
	ctx.fill();
	ctx.stroke();
	ctx.closePath();
};
cc_CanvasTools.circleFill = function(ctx,x,y,radius) {
	cc_CanvasTools.fillCircle(ctx,x,y,radius);
};
cc_CanvasTools.fillCircle = function(ctx,x,y,radius) {
	cc_CanvasTools.makeCircle(ctx,x,y,radius);
	ctx.fill();
	ctx.closePath();
};
cc_CanvasTools.circleStroke = function(ctx,x,y,radius) {
	cc_CanvasTools.strokeCircle(ctx,x,y,radius);
};
cc_CanvasTools.strokeCircle = function(ctx,x,y,radius) {
	cc_CanvasTools.makeCircle(ctx,x,y,radius);
	ctx.stroke();
	ctx.closePath();
};
cc_CanvasTools.strokePolygon = function(ctx,x,y,sides,size) {
	cc_CanvasTools.polygon(ctx,x,y,sides,size);
	ctx.stroke();
};
cc_CanvasTools.fillPolygon = function(ctx,x,y,sides,size) {
	cc_CanvasTools.polygon(ctx,x,y,sides,size);
	ctx.fill();
};
cc_CanvasTools.outlinedPolygon = function(ctx,x,y,_sides,_size,_fill,_stroke) {
	ctx.fillStyle = _fill;
	cc_CanvasTools.fillPolygon(ctx,x,y,_sides,_size);
	ctx.strokeStyle = _stroke;
	cc_CanvasTools.strokePolygon(ctx,x,y,_sides,_size);
};
cc_CanvasTools.polygon = function(ctx,x,y,sides,size) {
	ctx.beginPath();
	ctx.moveTo(x + size * Math.cos(0),y + size * Math.sin(0));
	var _g = 0;
	var _g1 = sides;
	while(_g < _g1) {
		var i = _g++;
		ctx.lineTo(x + size * Math.cos(i * 2 * Math.PI / sides),y + size * Math.sin(i * 2 * Math.PI / sides));
	}
	ctx.closePath();
};
cc_CanvasTools.eellipse = function(ctx,x,y,width,height) {
	ctx.beginPath();
	var i = 0;
	var counter = 0;
	while(i < Math.PI * 2) {
		haxe_Log.trace("" + counter + ". - " + i + " < " + Math.PI * 2,{ fileName : "cc/CanvasTools.hx", lineNumber : 196, className : "cc.CanvasTools", methodName : "eellipse"});
		ctx.lineTo(x + Math.cos(i) * width / 2,y + Math.sin(i) * height / 2);
		i += Math.PI / 16;
		++counter;
	}
	ctx.closePath();
};
cc_CanvasTools.ellipseFill = function(ctx,x,y,width,height) {
	cc_CanvasTools.fillEllipse(ctx,x,y,width,height);
};
cc_CanvasTools.fillEllipse = function(ctx,x,y,width,height) {
	ctx.beginPath();
	ctx.ellipse(x,y,width,height,0,0,2 * Math.PI);
	ctx.fill();
};
cc_CanvasTools.ellipseStroke = function(ctx,x,y,width,height) {
	cc_CanvasTools.strokeEllipse(ctx,x,y,width,height);
};
cc_CanvasTools.strokeEllipse = function(ctx,x,y,width,height) {
	ctx.beginPath();
	ctx.ellipse(x,y,width,height,0,0,2 * Math.PI);
	ctx.stroke();
};
cc_CanvasTools.ellipseFillStroke = function(ctx,x,y,width,height) {
	cc_CanvasTools.fillStrokeEllipse(ctx,x,y,width,height);
};
cc_CanvasTools.fillStrokeEllipse = function(ctx,x,y,width,height) {
	ctx.beginPath();
	ctx.ellipse(x,y,width,height,0,0,2 * Math.PI);
	ctx.fill();
	ctx.stroke();
};
cc_CanvasTools.line = function(ctx,x1,y1,x2,y2) {
	ctx.beginPath();
	ctx.moveTo(x1,y1);
	ctx.lineTo(x2,y2);
	ctx.stroke();
	ctx.beginPath();
};
cc_CanvasTools.triangle = function(ctx,x1,y1,x2,y2,x3,y3) {
	ctx.beginPath();
	ctx.moveTo(x1,y1);
	ctx.lineTo(x2,y2);
	ctx.lineTo(x3,y3);
	ctx.lineTo(x1,y1);
	ctx.stroke();
	ctx.closePath();
};
cc_CanvasTools.strokeTriangle = function(ctx,x1,y1,x2,y2,x3,y3) {
	ctx.beginPath();
	ctx.moveTo(x1,y1);
	ctx.lineTo(x2,y2);
	ctx.lineTo(x3,y3);
	ctx.lineTo(x1,y1);
	ctx.stroke();
	ctx.closePath();
};
cc_CanvasTools.fillTriangle = function(ctx,x1,y1,x2,y2,x3,y3) {
	ctx.beginPath();
	ctx.moveTo(x1,y1);
	ctx.lineTo(x2,y2);
	ctx.lineTo(x3,y3);
	ctx.lineTo(x1,y1);
	ctx.fill();
	ctx.closePath();
};
cc_CanvasTools.eqDownFillTriangle = function(ctx,x,y,sz) {
	ctx.translate(x,y);
	ctx.rotate(cc_util_MathUtil.radians(180));
	cc_CanvasTools.fillTriangle(ctx,0,0 - sz,sz,sz / 2,0 - sz,sz / 2);
	ctx.rotate(cc_util_MathUtil.radians(-180));
	ctx.translate(-x,-y);
};
cc_CanvasTools.eqDownTriangle = function(ctx,x,y,sz) {
	ctx.translate(x,y);
	ctx.rotate(cc_util_MathUtil.radians(180));
	cc_CanvasTools.triangle(ctx,0,0 - sz,sz,sz / 2,0 - sz,sz / 2);
	ctx.rotate(cc_util_MathUtil.radians(-180));
	ctx.translate(-x,-y);
};
cc_CanvasTools.eqFillTriangle = function(ctx,x,y,sz) {
	cc_CanvasTools.fillTriangle(ctx,x,y - sz,x + sz,y + sz / 2,x - sz,y + sz / 2);
};
cc_CanvasTools.eqTriangle = function(ctx,x,y,sz) {
	cc_CanvasTools.triangle(ctx,x,y - sz,x + sz,y + sz / 2,x - sz,y + sz / 2);
};
cc_CanvasTools.strokeWeight = function(ctx,inPx) {
	ctx.lineWidth = inPx;
};
cc_CanvasTools.fillColour = function(ctx,r,g,b,a) {
	cc_CanvasTools.colour(ctx,r,g,b,a);
};
cc_CanvasTools.fillColourRGB = function(ctx,rgb,a) {
	cc_CanvasTools.colour(ctx,rgb.r,rgb.g,rgb.b,a);
};
cc_CanvasTools.colour = function(ctx,r,g,b,a) {
	var c = cc_util_ColorUtil.getColour(r,g,b,a);
	ctx.fillStyle = c;
};
cc_CanvasTools.colourObj = function(ctx,rgb,a) {
	var c = cc_util_ColorUtil.getColour(rgb.r,rgb.g,rgb.b,a);
	ctx.fillStyle = c;
};
cc_CanvasTools.colourRGB = function(ctx,rgb,a) {
	var c = cc_util_ColorUtil.getColour(rgb.r,rgb.g,rgb.b,a);
	ctx.fillStyle = c;
};
cc_CanvasTools.shadowColorRGB = function(ctx,rgb,a) {
	var c = cc_util_ColorUtil.getColour(rgb.r,rgb.g,rgb.b,a);
	ctx.shadowColor = c;
};
cc_CanvasTools.shadowSet = function(ctx,rgb,a,blur) {
	if(blur == null) {
		blur = 15;
	}
	if(a == null) {
		a = 1;
	}
	var c = cc_util_ColorUtil.getColour(rgb.r,rgb.g,rgb.b,a);
	ctx.shadowColor = c;
	ctx.shadowBlur = blur;
};
cc_CanvasTools.strokeColourObj = function(ctx,rgb,a) {
	cc_CanvasTools.lineColour(ctx,rgb.r,rgb.g,rgb.b,a);
};
cc_CanvasTools.lineColourRGB = function(ctx,rgb,a) {
	cc_CanvasTools.lineColour(ctx,rgb.r,rgb.g,rgb.b,a);
};
cc_CanvasTools.strokeColourRGB = function(ctx,rgb,a) {
	cc_CanvasTools.lineColour(ctx,rgb.r,rgb.g,rgb.b,a);
};
cc_CanvasTools.strokeColour = function(ctx,r,g,b,a) {
	cc_CanvasTools.lineColour(ctx,r,g,b,a);
};
cc_CanvasTools.lineColour = function(ctx,r,g,b,a) {
	ctx.strokeStyle = cc_util_ColorUtil.getColour(r,g,b,a);
};
cc_CanvasTools.colourName = function(ctx,name) {
	ctx.fillStyle = name;
};
cc_CanvasTools.background = function(ctx,r,g,b,a) {
	if(g == null) {
		ctx.fillStyle = cc_util_ColorUtil.rgb(r,r,r);
	} else if(b == null && a == null) {
		ctx.fillStyle = cc_util_ColorUtil.rgba(r,r,r,g);
	} else if(a == null) {
		ctx.fillStyle = cc_util_ColorUtil.rgb(r,g,b);
	} else {
		ctx.fillStyle = cc_util_ColorUtil.rgba(r,g,b,a);
	}
	ctx.fillRect(0,0,Global.w,Global.h);
};
cc_CanvasTools.backgroundObj = function(ctx,rgb) {
	cc_CanvasTools.background(ctx,rgb.r,rgb.g,rgb.b);
};
cc_CanvasTools.backgroundRGB = function(ctx,rgb) {
	cc_CanvasTools.background(ctx,rgb.r,rgb.g,rgb.b);
};
var cc_draw_Text = function(o,text) {
	this._textBaseline = "alphabetic";
	this._textAlign = "left";
	this._fontWeight = "";
	this._css = "";
	this._font = "Arial";
	this._rotate = 0;
	this._alpha = 1;
	this._radius = 100;
	this._y = 100;
	this._x = 100;
	if(((o) instanceof CanvasRenderingContext2D)) {
		this._ctx = o;
	} else {
		this._sketcher = o;
	}
	this._text = text;
};
cc_draw_Text.__name__ = "cc.draw.Text";
cc_draw_Text.create = function(o,text) {
	var Text1 = new cc_draw_Text(o,text);
	return Text1;
};
cc_draw_Text.fillText = function(ctx,text,x,y,css,size) {
	if(size == null) {
		size = 20;
	}
	ctx.font = "" + size + "px " + StringTools.replace(css,";","");
	ctx.textAlign = "left";
	ctx.fillText(text,x,y);
};
cc_draw_Text.centerFillText = function(ctx,text,x,y,css,size) {
	if(size == null) {
		size = 20;
	}
	ctx.font = "" + size + "px " + StringTools.replace(css,";","");
	ctx.textAlign = "center";
	ctx.fillText(text,x,y);
};
cc_draw_Text.hackCenterFillText = function(ctx,text,x,y,css) {
	ctx.font = "" + StringTools.replace(css,";","");
	ctx.textAlign = "center";
	ctx.fillText(text,x,y);
};
cc_draw_Text.embedGoogleFont = function(family,callback,callbackArray) {
	var _id = "embededGoogleFonts";
	var _url = "https://fonts.googleapis.com/css?family=";
	var link = window.document.getElementById(_id);
	if(link != null) {
		var temp = StringTools.replace(link.href,_url,"");
		family = temp + "|" + family;
	} else {
		link = window.document.createElement("link");
	}
	if(callbackArray == null) {
		callbackArray = [family];
	}
	link.href = "" + _url + family;
	link.rel = "stylesheet";
	link.id = _id;
	link.onload = function() {
		if(callback != null) {
			callback.apply(callback,callbackArray);
		}
	};
	window.document.head.appendChild(link);
};
cc_draw_Text.prototype = {
	text: function(text) {
		this._text = text;
		return this;
	}
	,id: function(id) {
		this.set__id(id);
		return this;
	}
	,x: function(x) {
		this.set__x(x);
		return this;
	}
	,y: function(y) {
		this.set__y(y);
		return this;
	}
	,pos: function(x,y) {
		this.set__x(x);
		this.set__y(y);
		return this;
	}
	,font: function(font) {
		this._font = StringTools.replace(StringTools.replace(font,";",""),"+"," ");
		return this;
	}
	,css: function(css) {
		this._css = css;
		return this;
	}
	,fontWeight: function(weight) {
		this._fontWeight = weight;
		return this;
	}
	,size: function(px) {
		this.set__size(px);
		if(this.get__leading() == null) {
			this.set__leading(px);
		}
		return this;
	}
	,leading: function(px) {
		this.set__leading(px);
		return this;
	}
	,textAlign: function(pos) {
		this._textAlign = pos;
		return this;
	}
	,leftAlign: function() {
		this._textAlign = "left";
		return this;
	}
	,rightAlign: function() {
		this._textAlign = "right";
		return this;
	}
	,centerAlign: function() {
		this._textAlign = "center";
		return this;
	}
	,topBaseline: function() {
		this._textBaseline = "top";
		return this;
	}
	,middleBaseline: function() {
		this._textBaseline = "middle";
		return this;
	}
	,bottomBaseline: function() {
		this._textBaseline = "bottom";
		return this;
	}
	,textBaseline: function(pos) {
		this._textBaseline = pos;
		return this;
	}
	,rotate: function(degree) {
		this.set__rotate(degree);
		return this;
	}
	,rotateLeft: function() {
		this.set__rotate(-90);
		return this;
	}
	,rotateRight: function() {
		this.set__rotate(90);
		return this;
	}
	,rotateDown: function() {
		this.set__rotate(180);
		return this;
	}
	,color: function(value,alpha) {
		if(alpha == null) {
			alpha = 1;
		}
		this._color = value;
		this.set__alpha(cc_util_MathUtil.clamp(alpha,0,1));
		return this;
	}
	,alpha: function(alpha) {
		this.set__alpha(cc_util_MathUtil.clamp(alpha,0,1));
		return this;
	}
	,visible: function(isVisible) {
		if(isVisible) {
			this.set__alpha(cc_util_MathUtil.clamp(1,0,1));
		} else {
			this.set__alpha(cc_util_MathUtil.clamp(0,0,1));
		}
		return this;
	}
	,draw: function() {
		if(this._ctx != null) {
			var isLines = false;
			this._ctx.save();
			if(this._text.indexOf("\n") != -1) {
				this._lineArray = this._text.split("\n");
				isLines = true;
			}
			var previousColor = this._ctx.fillStyle;
			if(this._color != null) {
				cc_CanvasTools.fillColourRGB(this._ctx,this._color,this.get__alpha());
			} else {
				var tmp = this._ctx;
				var int = Std.parseInt(StringTools.replace(previousColor,"#","0x"));
				var tmp1 = this.get__alpha();
				cc_CanvasTools.fillColourRGB(tmp,{ r : int >> 16 & 255, g : int >> 8 & 255, b : int & 255},tmp1);
			}
			var tmp = "" + this._css + " " + this.get__size() + "px " + this._font;
			this._ctx.font = StringTools.ltrim(tmp);
			this._ctx.textAlign = this._textAlign;
			this._ctx.textBaseline = this._textBaseline;
			this._ctx.translate(this.get__x(),this.get__y());
			this._ctx.rotate(cc_util_MathUtil.radians(this.get__rotate()));
			if(!isLines) {
				this._ctx.fillText(this._text,0,0);
			} else {
				var _g = 0;
				var _g1 = this._lineArray.length;
				while(_g < _g1) {
					var i = _g++;
					var line = this._lineArray[i];
					this._ctx.fillText(line,0,i * this.get__leading());
				}
			}
			this._ctx.restore();
			this._ctx.fillStyle = previousColor;
		}
		return this;
	}
	,drawCanvas: function() {
		var isLines = false;
		this._ctx.save();
		if(this._text.indexOf("\n") != -1) {
			this._lineArray = this._text.split("\n");
			isLines = true;
		}
		var previousColor = this._ctx.fillStyle;
		if(this._color != null) {
			cc_CanvasTools.fillColourRGB(this._ctx,this._color,this.get__alpha());
		} else {
			var tmp = this._ctx;
			var int = Std.parseInt(StringTools.replace(previousColor,"#","0x"));
			var tmp1 = this.get__alpha();
			cc_CanvasTools.fillColourRGB(tmp,{ r : int >> 16 & 255, g : int >> 8 & 255, b : int & 255},tmp1);
		}
		var tmp = "" + this._css + " " + this.get__size() + "px " + this._font;
		this._ctx.font = StringTools.ltrim(tmp);
		this._ctx.textAlign = this._textAlign;
		this._ctx.textBaseline = this._textBaseline;
		this._ctx.translate(this.get__x(),this.get__y());
		this._ctx.rotate(cc_util_MathUtil.radians(this.get__rotate()));
		if(!isLines) {
			this._ctx.fillText(this._text,0,0);
		} else {
			var _g = 0;
			var _g1 = this._lineArray.length;
			while(_g < _g1) {
				var i = _g++;
				var line = this._lineArray[i];
				this._ctx.fillText(line,0,i * this.get__leading());
			}
		}
		this._ctx.restore();
		this._ctx.fillStyle = previousColor;
	}
	,splitLines: function() {
		if(this._text.indexOf("\n") != -1) {
			this._lineArray = this._text.split("\n");
			return true;
		} else {
			return false;
		}
	}
	,get__x: function() {
		return this._x;
	}
	,set__x: function(value) {
		return this._x = value;
	}
	,get__y: function() {
		return this._y;
	}
	,set__y: function(value) {
		return this._y = value;
	}
	,get__radius: function() {
		return this._radius;
	}
	,set__radius: function(value) {
		return this._radius = value;
	}
	,get__alpha: function() {
		return this._alpha;
	}
	,set__alpha: function(value) {
		return this._alpha = value;
	}
	,get__rotate: function() {
		return this._rotate;
	}
	,set__rotate: function(value) {
		return this._rotate = value;
	}
	,get__gradient: function() {
		return this._gradient;
	}
	,set__gradient: function(value) {
		return this._gradient = value;
	}
	,get__size: function() {
		return this._size;
	}
	,set__size: function(value) {
		return this._size = value;
	}
	,get__leading: function() {
		return this._leading;
	}
	,set__leading: function(value) {
		return this._leading = value;
	}
	,get__id: function() {
		return this._id;
	}
	,set__id: function(value) {
		return this._id = value;
	}
	,toString: function() {
		return "Text: " + Std.string(JSON.parse(JSON.stringify(this)));
	}
	,__class__: cc_draw_Text
	,__properties__: {set__id:"set__id",get__id:"get__id",set__leading:"set__leading",get__leading:"get__leading",set__gradient:"set__gradient",get__gradient:"get__gradient",set__size:"set__size",get__size:"get__size",set__rotate:"set__rotate",get__rotate:"get__rotate",set__alpha:"set__alpha",get__alpha:"get__alpha",set__radius:"set__radius",get__radius:"get__radius",set__y:"set__y",get__y:"get__y",set__x:"set__x",get__x:"get__x"}
};
var cc_lets_Easing = function() { };
cc_lets_Easing.__name__ = "cc.lets.Easing";
cc_lets_Easing.linear = function(v) {
	return v;
};
cc_lets_Easing.quad = function(v) {
	return v * v;
};
cc_lets_Easing.cubic = function(v) {
	return v * v * v;
};
cc_lets_Easing.quart = function(v) {
	return v * v * v;
};
cc_lets_Easing.quint = function(v) {
	return v * v * v;
};
cc_lets_Easing.sine = function(v) {
	return 1 - Math.cos(v * Math.PI / 2);
};
cc_lets_Easing.circ = function(v) {
	return 1 - Math.sqrt(1 - v * v);
};
cc_lets_Easing.expo = function(v) {
	if(v == 0) {
		return 0;
	} else {
		return Math.pow(2,10 * (v - 1));
	}
};
cc_lets_Easing.back = function(v) {
	var s = 1.70158;
	return v * v * ((s + 1) * v - s);
};
cc_lets_Easing.bounce = function(v) {
	v = 1 - v;
	return 1 - (v < 0.363636363636363646 ? 7.5625 * v * v : v < 0.727272727272727293 ? 7.5625 * (v -= 0.545454545454545414) * v + .75 : v < 0.909090909090909061 ? 7.5625 * (v -= 0.818181818181818232) * v + .9375 : 7.5625 * (v -= 0.954545454545454586) * v + .984375);
};
cc_lets_Easing.elastic = function(v) {
	if(v == 0) {
		return 0;
	}
	if(v == 1) {
		return 1;
	}
	var p = .3;
	var s = p / 4;
	return -(Math.pow(2,10 * --v) * Math.sin((v - 0.075) * (2 * Math.PI) / 0.3));
};
cc_lets_Easing.reverse = function(f) {
	return function(v) {
		return 1 - f(1 - v);
	};
};
cc_lets_Easing.reflect = function(f) {
	return function(v) {
		if(v < 0.5) {
			return f(v * 2) / 2;
		} else {
			return 1 - f(2 - v * 2) / 2;
		}
	};
};
var cc_lets_Go = function(target,duration) {
	this.VERSION = "1.1.0";
	this.DEBUG = false;
	this.FRAME_RATE = 60;
	this._arc = 0;
	this._seconds = 0;
	this._delay = 0;
	this._initTime = 0;
	this._isDelayDone = false;
	this._isTimeBased = false;
	this._isOrbit = false;
	this._isWiggle = false;
	this._isYoyo = false;
	this._isFrom = false;
	this._props = new haxe_ds_StringMap();
	this._options = { };
	this._easing = cc_lets_easing_Quad.get_easeOut();
	this._id = "[lets.Go]" + this.VERSION + "." + new Date().getTime();
	this._seconds = duration;
	this._target = target;
	this._duration = this.getDuration(duration);
	if(this._isTimeBased) {
		this._initTime = this.getTimer();
	} else {
		this._initTime = this._duration;
	}
	cc_lets_Go._tweens.push(this);
	if(this.DEBUG) {
		$global.console.log("New Go - _id: \"" + this._id + "\" / _duration: " + this._duration + " / _initTime: " + this._initTime + " / _tweens.length: " + cc_lets_Go._tweens.length);
	}
	haxe_Timer.delay($bind(this,this.init),1);
};
cc_lets_Go.__name__ = "cc.lets.Go";
cc_lets_Go.to = function(target,duration) {
	var Go = new cc_lets_Go(target,duration);
	Go._isFrom = false;
	return Go;
};
cc_lets_Go.from = function(target,duration) {
	var Go = new cc_lets_Go(target,duration);
	Go._isFrom = true;
	Go.updateProperties(0);
	return Go;
};
cc_lets_Go.timer = function(duration) {
	var Go = new cc_lets_Go({ },duration);
	return Go;
};
cc_lets_Go.frames = function(frames) {
	var Go = new cc_lets_Go({ },frames * 60);
	return Go;
};
cc_lets_Go.wiggle = function(target,x,y,wiggleRoom) {
	if(wiggleRoom == null) {
		wiggleRoom = 10;
	}
	var _go = new cc_lets_Go(target,1 + Math.random());
	_go._isWiggle = true;
	var max = wiggleRoom;
	var min = -wiggleRoom;
	var value = x + Math.random() * (max - min) + min;
	var objValue = 0;
	if(Object.prototype.hasOwnProperty.call(_go._target,"x")) {
		objValue = Reflect.getProperty(_go._target,"x");
	}
	var _range = { key : "x", from : _go._isFrom ? value : objValue, to : !_go._isFrom ? value : objValue};
	_go._props.h["x"] = _range;
	if(_go._isFrom) {
		_go.updateProperties(0);
	}
	var value = y + Math.random() * (max - min) + min;
	var objValue = 0;
	if(Object.prototype.hasOwnProperty.call(_go._target,"y")) {
		objValue = Reflect.getProperty(_go._target,"y");
	}
	var _range = { key : "y", from : _go._isFrom ? value : objValue, to : !_go._isFrom ? value : objValue};
	_go._props.h["y"] = _range;
	if(_go._isFrom) {
		_go.updateProperties(0);
	}
	_go._easing = cc_lets_easing_Sine.get_easeInOut();
	_go._options.onComplete = function() {
		cc_lets_Go.wiggle(target,x,y,wiggleRoom);
	};
	_go._options.onCompleteParams = null;
	return _go;
};
cc_lets_Go.wiggleProp = function(target,prop,value,wiggleRoom) {
	if(wiggleRoom == null) {
		wiggleRoom = 10;
	}
	var _go = new cc_lets_Go(target,1 + Math.random());
	_go._isWiggle = true;
	var max = wiggleRoom;
	var min = -wiggleRoom;
	var value1 = value + Math.random() * (max - min) + min;
	var objValue = 0;
	if(Object.prototype.hasOwnProperty.call(_go._target,prop)) {
		objValue = Reflect.getProperty(_go._target,prop);
	}
	var _range = { key : prop, from : _go._isFrom ? value1 : objValue, to : !_go._isFrom ? value1 : objValue};
	_go._props.h[prop] = _range;
	if(_go._isFrom) {
		_go.updateProperties(0);
	}
	_go._easing = cc_lets_easing_Sine.get_easeInOut();
	_go._options.onComplete = function() {
		cc_lets_Go.wiggleProp(target,prop,value,wiggleRoom);
	};
	_go._options.onCompleteParams = null;
	return _go;
};
cc_lets_Go.orbit = function(target,x,y,radius,speed) {
	var _go = new cc_lets_Go(target,1 + Math.random());
	_go._isOrbit = true;
	var objValue = 0;
	if(Object.prototype.hasOwnProperty.call(_go._target,"x")) {
		objValue = Reflect.getProperty(_go._target,"x");
	}
	var _range = { key : "x", from : _go._isFrom ? x : objValue, to : !_go._isFrom ? x : objValue};
	_go._props.h["x"] = _range;
	if(_go._isFrom) {
		_go.updateProperties(0);
	}
	var objValue = 0;
	if(Object.prototype.hasOwnProperty.call(_go._target,"y")) {
		objValue = Reflect.getProperty(_go._target,"y");
	}
	var _range = { key : "y", from : _go._isFrom ? y : objValue, to : !_go._isFrom ? y : objValue};
	_go._props.h["y"] = _range;
	if(_go._isFrom) {
		_go.updateProperties(0);
	}
	var objValue = 0;
	if(Object.prototype.hasOwnProperty.call(_go._target,"cx")) {
		objValue = Reflect.getProperty(_go._target,"cx");
	}
	var _range = { key : "cx", from : _go._isFrom ? x : objValue, to : !_go._isFrom ? x : objValue};
	_go._props.h["cx"] = _range;
	if(_go._isFrom) {
		_go.updateProperties(0);
	}
	var objValue = 0;
	if(Object.prototype.hasOwnProperty.call(_go._target,"cy")) {
		objValue = Reflect.getProperty(_go._target,"cy");
	}
	var _range = { key : "cy", from : _go._isFrom ? y : objValue, to : !_go._isFrom ? y : objValue};
	_go._props.h["cy"] = _range;
	if(_go._isFrom) {
		_go.updateProperties(0);
	}
	var objValue = 0;
	if(Object.prototype.hasOwnProperty.call(_go._target,"radius")) {
		objValue = Reflect.getProperty(_go._target,"radius");
	}
	var _range = { key : "radius", from : _go._isFrom ? radius : objValue, to : !_go._isFrom ? radius : objValue};
	_go._props.h["radius"] = _range;
	if(_go._isFrom) {
		_go.updateProperties(0);
	}
	var objValue = 0;
	if(Object.prototype.hasOwnProperty.call(_go._target,"speed")) {
		objValue = Reflect.getProperty(_go._target,"speed");
	}
	var _range = { key : "speed", from : _go._isFrom ? speed : objValue, to : !_go._isFrom ? speed : objValue};
	_go._props.h["speed"] = _range;
	if(_go._isFrom) {
		_go.updateProperties(0);
	}
	var objValue = 0;
	if(Object.prototype.hasOwnProperty.call(_go._target,"angle")) {
		objValue = Reflect.getProperty(_go._target,"angle");
	}
	var _range = { key : "angle", from : _go._isFrom ? speed : objValue, to : !_go._isFrom ? speed : objValue};
	_go._props.h["angle"] = _range;
	if(_go._isFrom) {
		_go.updateProperties(0);
	}
	target["cx"] = x;
	target["cy"] = y;
	target["angle"] = 0;
	target["speed"] = speed;
	target["radius"] = radius;
	return _go;
};
cc_lets_Go.prototype = {
	isTimeBased: function(isTimeBased) {
		if(isTimeBased == null) {
			isTimeBased = true;
		}
		haxe_Log.trace("Fixme: this doesn\t work right now",{ fileName : "cc/lets/Go.hx", lineNumber : 216, className : "cc.lets.Go", methodName : "isTimeBased"});
		this._isTimeBased = isTimeBased;
		this._duration = this._duration / this.FRAME_RATE | 0;
		return this;
	}
	,width: function(value) {
		var objValue = 0;
		if(Object.prototype.hasOwnProperty.call(this._target,"width")) {
			objValue = Reflect.getProperty(this._target,"width");
		}
		var _range = { key : "width", from : this._isFrom ? value : objValue, to : !this._isFrom ? value : objValue};
		this._props.h["width"] = _range;
		if(this._isFrom) {
			this.updateProperties(0);
		}
		return this;
	}
	,height: function(value) {
		var objValue = 0;
		if(Object.prototype.hasOwnProperty.call(this._target,"height")) {
			objValue = Reflect.getProperty(this._target,"height");
		}
		var _range = { key : "height", from : this._isFrom ? value : objValue, to : !this._isFrom ? value : objValue};
		this._props.h["height"] = _range;
		if(this._isFrom) {
			this.updateProperties(0);
		}
		return this;
	}
	,x: function(value) {
		var objValue = 0;
		if(Object.prototype.hasOwnProperty.call(this._target,"x")) {
			objValue = Reflect.getProperty(this._target,"x");
		}
		var _range = { key : "x", from : this._isFrom ? value : objValue, to : !this._isFrom ? value : objValue};
		this._props.h["x"] = _range;
		if(this._isFrom) {
			this.updateProperties(0);
		}
		return this;
	}
	,y: function(value) {
		var objValue = 0;
		if(Object.prototype.hasOwnProperty.call(this._target,"y")) {
			objValue = Reflect.getProperty(this._target,"y");
		}
		var _range = { key : "y", from : this._isFrom ? value : objValue, to : !this._isFrom ? value : objValue};
		this._props.h["y"] = _range;
		if(this._isFrom) {
			this.updateProperties(0);
		}
		return this;
	}
	,z: function(value) {
		var objValue = 0;
		if(Object.prototype.hasOwnProperty.call(this._target,"z")) {
			objValue = Reflect.getProperty(this._target,"z");
		}
		var _range = { key : "z", from : this._isFrom ? value : objValue, to : !this._isFrom ? value : objValue};
		this._props.h["z"] = _range;
		if(this._isFrom) {
			this.updateProperties(0);
		}
		return this;
	}
	,pos: function(x,y,z) {
		var objValue = 0;
		if(Object.prototype.hasOwnProperty.call(this._target,"x")) {
			objValue = Reflect.getProperty(this._target,"x");
		}
		var _range = { key : "x", from : this._isFrom ? x : objValue, to : !this._isFrom ? x : objValue};
		this._props.h["x"] = _range;
		if(this._isFrom) {
			this.updateProperties(0);
		}
		var objValue = 0;
		if(Object.prototype.hasOwnProperty.call(this._target,"y")) {
			objValue = Reflect.getProperty(this._target,"y");
		}
		var _range = { key : "y", from : this._isFrom ? y : objValue, to : !this._isFrom ? y : objValue};
		this._props.h["y"] = _range;
		if(this._isFrom) {
			this.updateProperties(0);
		}
		if(z != null) {
			var objValue = 0;
			if(Object.prototype.hasOwnProperty.call(this._target,"z")) {
				objValue = Reflect.getProperty(this._target,"z");
			}
			var _range = { key : "z", from : this._isFrom ? z : objValue, to : !this._isFrom ? z : objValue};
			this._props.h["z"] = _range;
			if(this._isFrom) {
				this.updateProperties(0);
			}
		}
		return this;
	}
	,rotation: function(degree) {
		var objValue = 0;
		if(Object.prototype.hasOwnProperty.call(this._target,"rotation")) {
			objValue = Reflect.getProperty(this._target,"rotation");
		}
		var _range = { key : "rotation", from : this._isFrom ? degree : objValue, to : !this._isFrom ? degree : objValue};
		this._props.h["rotation"] = _range;
		if(this._isFrom) {
			this.updateProperties(0);
		}
		return this;
	}
	,degree: function(degree) {
		var objValue = 0;
		if(Object.prototype.hasOwnProperty.call(this._target,"rotation")) {
			objValue = Reflect.getProperty(this._target,"rotation");
		}
		var _range = { key : "rotation", from : this._isFrom ? degree : objValue, to : !this._isFrom ? degree : objValue};
		this._props.h["rotation"] = _range;
		if(this._isFrom) {
			this.updateProperties(0);
		}
		return this;
	}
	,radians: function(degree) {
		var value = degree * Math.PI / 180;
		var objValue = 0;
		if(Object.prototype.hasOwnProperty.call(this._target,"rotation")) {
			objValue = Reflect.getProperty(this._target,"rotation");
		}
		var _range = { key : "rotation", from : this._isFrom ? value : objValue, to : !this._isFrom ? value : objValue};
		this._props.h["rotation"] = _range;
		if(this._isFrom) {
			this.updateProperties(0);
		}
		return this;
	}
	,alpha: function(value) {
		var objValue = 0;
		if(Object.prototype.hasOwnProperty.call(this._target,"alpha")) {
			objValue = Reflect.getProperty(this._target,"alpha");
		}
		var _range = { key : "alpha", from : this._isFrom ? value : objValue, to : !this._isFrom ? value : objValue};
		this._props.h["alpha"] = _range;
		if(this._isFrom) {
			this.updateProperties(0);
		}
		return this;
	}
	,scale: function(value) {
		var objValue = 0;
		if(Object.prototype.hasOwnProperty.call(this._target,"scaleX")) {
			objValue = Reflect.getProperty(this._target,"scaleX");
		}
		var _range = { key : "scaleX", from : this._isFrom ? value : objValue, to : !this._isFrom ? value : objValue};
		this._props.h["scaleX"] = _range;
		if(this._isFrom) {
			this.updateProperties(0);
		}
		var objValue = 0;
		if(Object.prototype.hasOwnProperty.call(this._target,"scaleY")) {
			objValue = Reflect.getProperty(this._target,"scaleY");
		}
		var _range = { key : "scaleY", from : this._isFrom ? value : objValue, to : !this._isFrom ? value : objValue};
		this._props.h["scaleY"] = _range;
		if(this._isFrom) {
			this.updateProperties(0);
		}
		var objValue = 0;
		if(Object.prototype.hasOwnProperty.call(this._target,"scale")) {
			objValue = Reflect.getProperty(this._target,"scale");
		}
		var _range = { key : "scale", from : this._isFrom ? value : objValue, to : !this._isFrom ? value : objValue};
		this._props.h["scale"] = _range;
		if(this._isFrom) {
			this.updateProperties(0);
		}
		return this;
	}
	,yoyo: function() {
		this._isYoyo = true;
		return this;
	}
	,arc: function(dir) {
		this._arc = 0;
		return this;
	}
	,delay: function(duration) {
		this._delay = this.getDuration(duration);
		return this;
	}
	,prop: function(key,value) {
		var objValue = 0;
		if(Object.prototype.hasOwnProperty.call(this._target,key)) {
			objValue = Reflect.getProperty(this._target,key);
		}
		var _range = { key : key, from : this._isFrom ? value : objValue, to : !this._isFrom ? value : objValue};
		this._props.h[key] = _range;
		if(this._isFrom) {
			this.updateProperties(0);
		}
		return this;
	}
	,onComplete: function(func,arr) {
		this._options.onComplete = func;
		this._options.onCompleteParams = arr;
		return this;
	}
	,onAnimationStart: function(func,arr) {
		this._options.onAnimationStart = func;
		this._options.onAnimationStartParams = arr;
		return this;
	}
	,onUpdate: function(func,arr) {
		this._options.onUpdate = func;
		this._options.onUpdateParams = arr;
		return this;
	}
	,ease: function(easing) {
		this._easing = easing;
		return this;
	}
	,stop: function() {
		this.destroy();
	}
	,init: function() {
		if(this._isTimeBased) {
			haxe_Log.trace("TODO: build timebased animation",{ fileName : "cc/lets/Go.hx", lineNumber : 486, className : "cc.lets.Go", methodName : "init"});
		} else if(cc_lets_Go._requestId == null) {
			cc_lets_Go._requestId = window.requestAnimationFrame($bind(this,this.onEnterFrameHandler));
		}
	}
	,onEnterFrameHandler: function(time) {
		if(cc_lets_Go._tweens.length <= 0) {
			if(!this._isTimeBased) {
				window.cancelAnimationFrame(cc_lets_Go._requestId);
				return;
			}
		} else {
			var _g = 0;
			var _g1 = cc_lets_Go._tweens.length;
			while(_g < _g1) {
				var i = _g++;
				if(cc_lets_Go._tweens[i] != null) {
					cc_lets_Go._tweens[i].update();
				}
			}
		}
		cc_lets_Go._requestId = window.requestAnimationFrame($bind(this,this.onEnterFrameHandler));
	}
	,update: function() {
		if(this._delay > 0 && this._isTimeBased) {
			haxe_Log.trace("FIXME this doesn't work yet",{ fileName : "cc/lets/Go.hx", lineNumber : 525, className : "cc.lets.Go", methodName : "update"});
		}
		if(this._delay > 0) {
			this._delay--;
			return;
		}
		if(!this._isDelayDone) {
			if(this.DEBUG) {
				haxe_Log.trace("should trigger only once: " + this._id,{ fileName : "cc/lets/Go.hx", lineNumber : 532, className : "cc.lets.Go", methodName : "update"});
			}
			if(Reflect.isFunction(this._options.onAnimationStart)) {
				var func = this._options.onAnimationStart;
				var arr = this._options.onAnimationStartParams != null ? this._options.onAnimationStartParams : [];
				func.apply(func,[arr]);
			}
		}
		this._isDelayDone = true;
		this._initTime--;
		var progressed = this._duration - this._initTime;
		if(this._isTimeBased) {
			progressed = this.getTimer() - this._initTime;
		}
		if(progressed >= this._duration) {
			this.updateProperties(this._duration);
			this.complete();
		} else {
			this.updateProperties(progressed);
		}
	}
	,updateProperties: function(time) {
		if(Reflect.isFunction(this._options.onUpdate)) {
			var func = this._options.onUpdate;
			var arr = this._options.onUpdateParams != null ? this._options.onUpdateParams : [];
			func.apply(func,[arr]);
		}
		if(this._props == null) {
			return;
		}
		var h = this._props.h;
		var n_h = h;
		var n_keys = Object.keys(h);
		var n_length = n_keys.length;
		var n_current = 0;
		while(n_current < n_length) {
			var n = n_keys[n_current++];
			var range = this._props.h[n];
			if(this._isOrbit) {
				var __cx = this._props.h["cx"];
				var __cy = this._props.h["cy"];
				var __angle = this._props.h["angle"];
				var __speed = this._props.h["speed"];
				var __rad = this._props.h["radius"];
				haxe_Log.trace("cx: " + __cx.to + ",  cy: " + __cy.to + " , " + __angle.to + ", " + __speed.to + ", " + __rad.to,{ fileName : "cc/lets/Go.hx", lineNumber : 590, className : "cc.lets.Go", methodName : "updateProperties"});
				haxe_Log.trace("" + n + " == \"angle\" : " + Std.string(n == "angle"),{ fileName : "cc/lets/Go.hx", lineNumber : 601, className : "cc.lets.Go", methodName : "updateProperties"});
				haxe_Log.trace(this._target,{ fileName : "cc/lets/Go.hx", lineNumber : 603, className : "cc.lets.Go", methodName : "updateProperties"});
				if(n == "angle") {
					var aa = __angle.to + __speed.to;
					Reflect.setProperty(this._target,n,aa);
				}
			} else {
				Reflect.setProperty(this._target,n,this._easing.ease(time,range.from,range.to - range.from,this._duration));
			}
		}
	}
	,complete: function() {
		if(this.DEBUG) {
			haxe_Log.trace("complete :: \"" + this._id + "\", _duration: " + this._duration + ", _seconds: " + this._seconds + ", _initTime: " + this._initTime + " / _tweens.length: " + cc_lets_Go._tweens.length,{ fileName : "cc/lets/Go.hx", lineNumber : 626, className : "cc.lets.Go", methodName : "complete"});
		}
		if(this._isYoyo) {
			var h = this._props.h;
			var n_h = h;
			var n_keys = Object.keys(h);
			var n_length = n_keys.length;
			var n_current = 0;
			while(n_current < n_length) {
				var n = n_keys[n_current++];
				var range = this._props.h[n];
				var _rangeReverse = { key : n, from : range.to, to : range.from};
				this._props.h[n] = _rangeReverse;
			}
			if(this._isTimeBased) {
				this._initTime = this.getTimer();
			} else {
				this._initTime = this._duration;
			}
			this._isYoyo = false;
			return;
		}
		var func = this._options.onComplete;
		var arr = this._options.onCompleteParams != null ? this._options.onCompleteParams : [];
		this.destroy();
		if(Reflect.isFunction(func)) {
			func.apply(func,arr);
		}
	}
	,getDuration: function(duration) {
		var d = 0;
		if(this._isTimeBased) {
			d = duration * 1000 | 0;
		} else {
			if(duration <= 0) {
				duration = 0.1;
			}
			d = duration * this.FRAME_RATE | 0;
		}
		return d;
	}
	,getTimer: function() {
		return new Date().getTime() | 0;
	}
	,destroy: function() {
		if(Lambda.has(cc_lets_Go._tweens,this)) {
			HxOverrides.remove(cc_lets_Go._tweens,this);
		}
		if(this._options) {
			this._easing = cc_lets_easing_Quad.get_easeOut();
			this._options = { };
			this._target = null;
			this._props = null;
			this._duration = 0;
			this._initTime = 0;
			this._delay = 0;
		}
	}
	,__class__: cc_lets_Go
};
var cc_lets_easing_IEasing = function() { };
cc_lets_easing_IEasing.__name__ = "cc.lets.easing.IEasing";
cc_lets_easing_IEasing.__isInterface__ = true;
cc_lets_easing_IEasing.prototype = {
	__class__: cc_lets_easing_IEasing
};
var cc_lets_easing_Quad = function() { };
cc_lets_easing_Quad.__name__ = "cc.lets.easing.Quad";
cc_lets_easing_Quad.__properties__ = {get_easeOut:"get_easeOut",get_easeInOut:"get_easeInOut",get_easeIn:"get_easeIn"};
cc_lets_easing_Quad.get_easeIn = function() {
	return new cc_lets_easing_QuadEaseIn();
};
cc_lets_easing_Quad.get_easeInOut = function() {
	return new cc_lets_easing_QuadEaseInOut();
};
cc_lets_easing_Quad.get_easeOut = function() {
	return new cc_lets_easing_QuadEaseOut();
};
var cc_lets_easing_QuadEaseIn = function() {
};
cc_lets_easing_QuadEaseIn.__name__ = "cc.lets.easing.QuadEaseIn";
cc_lets_easing_QuadEaseIn.__interfaces__ = [cc_lets_easing_IEasing];
cc_lets_easing_QuadEaseIn.prototype = {
	calculate: function(k) {
		return k * k;
	}
	,ease: function(t,b,c,d) {
		return c * (t /= d) * t + b;
	}
	,__class__: cc_lets_easing_QuadEaseIn
};
var cc_lets_easing_QuadEaseInOut = function() {
};
cc_lets_easing_QuadEaseInOut.__name__ = "cc.lets.easing.QuadEaseInOut";
cc_lets_easing_QuadEaseInOut.__interfaces__ = [cc_lets_easing_IEasing];
cc_lets_easing_QuadEaseInOut.prototype = {
	calculate: function(k) {
		if((k *= 2) < 1) {
			return 0.5 * k * k;
		}
		return -0.5 * ((k - 1) * (k - 3) - 1);
	}
	,ease: function(t,b,c,d) {
		if((t /= d / 2) < 1) {
			return c / 2 * t * t + b;
		}
		return -c / 2 * ((t - 1) * (t - 3) - 1) + b;
	}
	,__class__: cc_lets_easing_QuadEaseInOut
};
var cc_lets_easing_QuadEaseOut = function() {
};
cc_lets_easing_QuadEaseOut.__name__ = "cc.lets.easing.QuadEaseOut";
cc_lets_easing_QuadEaseOut.__interfaces__ = [cc_lets_easing_IEasing];
cc_lets_easing_QuadEaseOut.prototype = {
	calculate: function(k) {
		return -k * (k - 2);
	}
	,ease: function(t,b,c,d) {
		return -c * (t /= d) * (t - 2) + b;
	}
	,__class__: cc_lets_easing_QuadEaseOut
};
var cc_lets_easing_Sine = function() { };
cc_lets_easing_Sine.__name__ = "cc.lets.easing.Sine";
cc_lets_easing_Sine.__properties__ = {get_easeOut:"get_easeOut",get_easeInOut:"get_easeInOut",get_easeIn:"get_easeIn"};
cc_lets_easing_Sine.get_easeIn = function() {
	return new cc_lets_easing_SineEaseIn();
};
cc_lets_easing_Sine.get_easeInOut = function() {
	return new cc_lets_easing_SineEaseInOut();
};
cc_lets_easing_Sine.get_easeOut = function() {
	return new cc_lets_easing_SineEaseOut();
};
var cc_lets_easing_SineEaseIn = function() {
};
cc_lets_easing_SineEaseIn.__name__ = "cc.lets.easing.SineEaseIn";
cc_lets_easing_SineEaseIn.__interfaces__ = [cc_lets_easing_IEasing];
cc_lets_easing_SineEaseIn.prototype = {
	calculate: function(k) {
		return 1 - Math.cos(k * (Math.PI / 2));
	}
	,ease: function(t,b,c,d) {
		return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
	}
	,__class__: cc_lets_easing_SineEaseIn
};
var cc_lets_easing_SineEaseInOut = function() {
};
cc_lets_easing_SineEaseInOut.__name__ = "cc.lets.easing.SineEaseInOut";
cc_lets_easing_SineEaseInOut.__interfaces__ = [cc_lets_easing_IEasing];
cc_lets_easing_SineEaseInOut.prototype = {
	calculate: function(k) {
		return -(Math.cos(Math.PI * k) - 1) / 2;
	}
	,ease: function(t,b,c,d) {
		return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
	}
	,__class__: cc_lets_easing_SineEaseInOut
};
var cc_lets_easing_SineEaseOut = function() {
};
cc_lets_easing_SineEaseOut.__name__ = "cc.lets.easing.SineEaseOut";
cc_lets_easing_SineEaseOut.__interfaces__ = [cc_lets_easing_IEasing];
cc_lets_easing_SineEaseOut.prototype = {
	calculate: function(k) {
		return Math.sin(k * (Math.PI / 2));
	}
	,ease: function(t,b,c,d) {
		return c * Math.sin(t / d * (Math.PI / 2)) + b;
	}
	,__class__: cc_lets_easing_SineEaseOut
};
var cc_model_constants_Paper = function() { };
cc_model_constants_Paper.__name__ = "cc.model.constants.Paper";
cc_model_constants_Paper.inPixel = function(papersize) {
	var rectangle = { width : 0, height : 0, x : 0, y : 0};
	var w;
	var h;
	switch(papersize._hx_index) {
	case 0:
		w = 105;
		h = 148;
		break;
	case 1:
		w = 148;
		h = 210;
		break;
	case 2:
		w = 210;
		h = 297;
		break;
	case 3:
		w = 297;
		h = 420;
		break;
	case 4:
		w = 420;
		h = 594;
		break;
	case 5:
		w = 594;
		h = 841;
		break;
	}
	rectangle.width = cc_model_constants_Paper.mm2pixel(w) | 0;
	rectangle.height = cc_model_constants_Paper.mm2pixel(h) | 0;
	rectangle.x = 0;
	rectangle.y = 0;
	return rectangle;
};
cc_model_constants_Paper.inMM = function(papersize) {
	var w = 0;
	var h = 0;
	switch(papersize.toUpperCase()) {
	case "A1":
		w = 594;
		h = 841;
		break;
	case "A2":
		w = 420;
		h = 594;
		break;
	case "A3":
		w = 297;
		h = 420;
		break;
	case "A4":
		w = 210;
		h = 297;
		break;
	case "A5":
		w = 148;
		h = 210;
		break;
	case "A6":
		w = 105;
		h = 148;
		break;
	default:
		haxe_Log.trace("case '" + papersize + "': trace ('" + papersize + "');",{ fileName : "cc/model/constants/Paper.hx", lineNumber : 94, className : "cc.model.constants.Paper", methodName : "inMM"});
	}
	var rectangle = { width : w, height : h, x : 0, y : 0};
	return rectangle;
};
cc_model_constants_Paper.mm2pixel = function(value) {
	var dpi = 72;
	return value * dpi / 25.4;
};
cc_model_constants_Paper.pixel2mm = function(value) {
	var dpi = 72;
	return value * 25.4 / dpi;
};
cc_model_constants_Paper.convertmm2pixel = function(mm,dpi) {
	if(dpi == null) {
		dpi = 72;
	}
	return mm * dpi / 25.4;
};
var cc_model_constants_PaperSize = $hxEnums["cc.model.constants.PaperSize"] = { __ename__:true,__constructs__:null
	,A6: {_hx_name:"A6",_hx_index:0,__enum__:"cc.model.constants.PaperSize",toString:$estr}
	,A5: {_hx_name:"A5",_hx_index:1,__enum__:"cc.model.constants.PaperSize",toString:$estr}
	,A4: {_hx_name:"A4",_hx_index:2,__enum__:"cc.model.constants.PaperSize",toString:$estr}
	,A3: {_hx_name:"A3",_hx_index:3,__enum__:"cc.model.constants.PaperSize",toString:$estr}
	,A2: {_hx_name:"A2",_hx_index:4,__enum__:"cc.model.constants.PaperSize",toString:$estr}
	,A1: {_hx_name:"A1",_hx_index:5,__enum__:"cc.model.constants.PaperSize",toString:$estr}
};
cc_model_constants_PaperSize.__constructs__ = [cc_model_constants_PaperSize.A6,cc_model_constants_PaperSize.A5,cc_model_constants_PaperSize.A4,cc_model_constants_PaperSize.A3,cc_model_constants_PaperSize.A2,cc_model_constants_PaperSize.A1];
var cc_tool_ExportFile = function() { };
cc_tool_ExportFile.__name__ = "cc.tool.ExportFile";
cc_tool_ExportFile.downloadWebGLImage = function(domElement,isJpg,fileName) {
	if(fileName == null) {
		fileName = "test";
	}
	if(isJpg == null) {
		isJpg = false;
	}
	var imgData;
	var ext = isJpg ? "jpg" : "png";
	try {
		var strDownloadMime = "image/octet-stream";
		var strMime = "image/jpeg";
		imgData = domElement.toDataURL(strMime);
		$global.console.log(imgData);
		cc_tool_ExportFile.saveFile(StringTools.replace(imgData,strMime,strDownloadMime),fileName + ("." + ext));
	} catch( _g ) {
		$global.console.log("Browser does not support taking screenshot of 3d context");
		return;
	}
};
cc_tool_ExportFile.saveFile = function(strData,fileName) {
	var link = window.document.createElement("a");
	window.document.body.appendChild(link);
	link.href = strData;
	link.download = fileName;
	link.click();
	window.document.body.removeChild(link);
};
cc_tool_ExportFile.downloadImage = function(ctx,isJpg,fileName) {
	if(isJpg == null) {
		isJpg = false;
	}
	if(fileName == null) {
		var hash = $global.location.hash;
		hash = StringTools.replace(hash,"#","").toLowerCase();
		if(hash == "") {
			hash = "image";
		}
		fileName = "" + hash + "-" + new Date().getTime();
	}
	var link = window.document.createElement("a");
	link.href = ctx.canvas.toDataURL(isJpg ? "image/jpeg" : "",1);
	link.download = fileName;
	link.click();
};
cc_tool_ExportFile.onBase64Handler = function(ctx,isJpg) {
	if(isJpg == null) {
		isJpg = false;
	}
	var base64 = ctx.canvas.toDataURL(isJpg ? "image/jpeg" : "",1);
	cc_tool_ExportFile.clipboard(base64);
};
cc_tool_ExportFile.downloadTextFile = function(text,fileName) {
	if(fileName == null) {
		fileName = "CC-txt-" + new Date().getTime() + ".txt";
	}
	var element = window.document.createElement("a");
	element.setAttribute("href","data:text/plain;charset=utf-8," + encodeURIComponent(text));
	element.setAttribute("download",fileName);
	element.style.display = "none";
	window.document.body.appendChild(element);
	element.click();
	window.document.body.removeChild(element);
};
cc_tool_ExportFile.clipboard = function(text) {
	var win = "Ctrl+C";
	var mac = "Cmd+C";
	var copyCombo = win;
	var userAgent = $global.navigator.userAgent;
	var ereg = new EReg("iPhone|iPod|iPad|Android|BlackBerry","i");
	var ismac = ereg.match(userAgent);
	if(ismac) {
		copyCombo = mac;
	}
	window.prompt("Copy to clipboard: " + copyCombo + ", Enter",text);
};
cc_tool_ExportFile.downloadImageBg = function(ctx,isJpg,fileName,isTransparant) {
	if(isTransparant == null) {
		isTransparant = false;
	}
	if(isJpg == null) {
		isJpg = false;
	}
	haxe_Log.trace(ctx,{ fileName : "cc/tool/ExportFile.hx", lineNumber : 128, className : "cc.tool.ExportFile", methodName : "downloadImageBg", customParams : [isJpg,fileName,isTransparant]});
	var canvas = ctx.canvas;
	var ext = isJpg ? "jpg" : "png";
	if(fileName == null) {
		var hash = $global.location.hash;
		hash = StringTools.replace(hash,"#","").toLowerCase();
		if(hash == "") {
			hash = "image";
		}
		fileName = "" + hash + "-" + new Date().getTime();
	}
	var w = canvas.width;
	var h = canvas.height;
	var compositeOperation;
	var data = ctx.getImageData(0,0,w,h);
	if(!isTransparant) {
		compositeOperation = ctx.globalCompositeOperation;
		ctx.globalCompositeOperation = "destination-over";
		ctx.fillStyle = "#ffffff";
		ctx.fillRect(0,0,w,h);
		var imageData = canvas.toDataURL("image/png");
		ctx.clearRect(0,0,w,h);
		ctx.putImageData(data,0,0);
		ctx.globalCompositeOperation = compositeOperation;
	}
	var link = window.document.createElement("a");
	link.style.cssText = "display:none";
	link.download = fileName + ("." + ext);
	if(!HTMLCanvasElement.prototype.toBlob) {
		haxe_Log.trace("There is no blob",{ fileName : "cc/tool/ExportFile.hx", lineNumber : 187, className : "cc.tool.ExportFile", methodName : "downloadImageBg"});
		link.href = ctx.canvas.toDataURL(isJpg ? "image/jpeg" : "",1);
		link.click();
		link.remove();
	} else {
		haxe_Log.trace("Attack of the blob",{ fileName : "cc/tool/ExportFile.hx", lineNumber : 193, className : "cc.tool.ExportFile", methodName : "downloadImageBg"});
		ctx.canvas.toBlob(function(blob) {
			link.href = URL.createObjectURL(blob);
			link.click();
			link.remove();
		},isJpg ? "image/jpeg" : "",1);
	}
	window.document.body.appendChild(link);
};
cc_tool_ExportFile.prototype = {
	toString: function() {
		return "[ExportFile]";
	}
	,__class__: cc_tool_ExportFile
};
var cc_util_AnimateUtil = function() {
};
cc_util_AnimateUtil.__name__ = "cc.util.AnimateUtil";
cc_util_AnimateUtil.tween = function(pos,target,speed) {
	if(speed == null) {
		speed = 20;
	}
	pos += (target - pos) / speed;
	return pos;
};
cc_util_AnimateUtil.bounce = function(num,min,max,sz) {
	if(sz == null) {
		sz = 0;
	}
	if(num >= max - sz / 2 || num - sz / 2 <= min) {
		return true;
	} else {
		return false;
	}
};
cc_util_AnimateUtil.prototype = {
	__class__: cc_util_AnimateUtil
};
var cc_util_ColorUtil = function() {
};
cc_util_ColorUtil.__name__ = "cc.util.ColorUtil";
cc_util_ColorUtil.getColour = function(r,g,b,a) {
	var c;
	if(g == null) {
		c = cc_util_ColorUtil.rgb(r,r,r);
	} else if(b == null && a == null) {
		c = cc_util_ColorUtil.rgba(r,r,r,g);
	} else if(a == null) {
		c = cc_util_ColorUtil.rgb(r,g,b);
	} else {
		c = cc_util_ColorUtil.rgba(r,g,b,a);
	}
	return c;
};
cc_util_ColorUtil.getColourObj = function(rgb,a) {
	return cc_util_ColorUtil.getColour(rgb.r,rgb.g,rgb.b,a);
};
cc_util_ColorUtil.rgb = function(r,g,b) {
	if(g == null) {
		g = r;
	}
	if(b == null) {
		b = r;
	}
	return "rgb(" + cc_util_MathUtil.clamp(Math.round(r),0,255) + ", " + cc_util_MathUtil.clamp(Math.round(g),0,255) + ", " + cc_util_MathUtil.clamp(Math.round(b),0,255) + ")";
};
cc_util_ColorUtil.rgba = function(r,g,b,a) {
	if(g == null) {
		return "rgb(" + cc_util_MathUtil.clamp(Math.round(r),0,255) + ", " + cc_util_MathUtil.clamp(Math.round(r),0,255) + ", " + cc_util_MathUtil.clamp(Math.round(r),0,255) + ")";
	} else if(b == null) {
		return "rgba(" + cc_util_MathUtil.clamp(Math.round(r),0,255) + ", " + cc_util_MathUtil.clamp(Math.round(r),0,255) + ", " + cc_util_MathUtil.clamp(Math.round(r),0,255) + ", " + cc_util_MathUtil.clamp(g,0,1) + ")";
	} else if(a == null) {
		return "rgba(" + cc_util_MathUtil.clamp(Math.round(r),0,255) + ", " + cc_util_MathUtil.clamp(Math.round(g),0,255) + ", " + cc_util_MathUtil.clamp(Math.round(b),0,255) + ", 1)";
	} else {
		return "rgba(" + cc_util_MathUtil.clamp(Math.round(r),0,255) + ", " + cc_util_MathUtil.clamp(Math.round(g),0,255) + ", " + cc_util_MathUtil.clamp(Math.round(b),0,255) + ", " + cc_util_MathUtil.clamp(a,0,1) + ")";
	}
};
cc_util_ColorUtil.rgbToHex = function(r,g,b) {
	return StringTools.hex(r,2) + StringTools.hex(g,2) + StringTools.hex(b,2);
};
cc_util_ColorUtil.rgb2hex = function(r,g,b,a) {
	if(a == null) {
		a = 255;
	}
	return a << 24 | r << 16 | g << 8 | b;
};
cc_util_ColorUtil.randomColour = function() {
	var r = cc_util_MathUtil.randomInt(255);
	var g = cc_util_MathUtil.randomInt(255);
	var b = cc_util_MathUtil.randomInt(255);
	return cc_util_ColorUtil.rgb(r,g,b);
};
cc_util_ColorUtil.randomColourObject = function() {
	var r = cc_util_MathUtil.randomInt(255);
	var g = cc_util_MathUtil.randomInt(255);
	var b = cc_util_MathUtil.randomInt(255);
	return { r : r, g : g, b : b};
};
cc_util_ColorUtil.toRGB = function(int) {
	return { r : Math.round(int >> 16 & 255), g : Math.round(int >> 8 & 255), b : Math.round(int & 255)};
};
cc_util_ColorUtil.ttoRGB = function(int) {
	return { r : int >> 16 & 255, g : int >> 8 & 255, b : int & 255};
};
cc_util_ColorUtil.assumption = function(value) {
	var _r = 0;
	var _g = 0;
	var _b = 0;
	var _a = 1;
	value = StringTools.replace(value," ","");
	if(value.indexOf("rgba") != -1) {
		value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
		var arr = value.split(",");
		_r = arr[0];
		_g = arr[1];
		_b = arr[2];
		_a = arr[3];
	} else if(value.indexOf("rgb") != -1) {
		value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
		var arr = value.split(",");
		_r = arr[0];
		_g = arr[1];
		_b = arr[2];
	} else if(value.indexOf("#") != -1) {
		var int = Std.parseInt(StringTools.replace(value,"#","0x"));
		var rgb_r = int >> 16 & 255;
		var rgb_g = int >> 8 & 255;
		var rgb_b = int & 255;
		_r = rgb_r;
		_g = rgb_g;
		_b = rgb_b;
	}
	return { r : _r, g : _g, b : _b, a : _a};
};
cc_util_ColorUtil.hex2RGB = function(hex) {
	var int = Std.parseInt(StringTools.replace(hex,"#","0x"));
	return { r : int >> 16 & 255, g : int >> 8 & 255, b : int & 255};
};
cc_util_ColorUtil.prototype = {
	__class__: cc_util_ColorUtil
};
var cc_util_GridUtil = function(ctx) {
	this._isDebug = false;
	this._isPosition = false;
	this._isDimension = false;
	this._isNumbered = false;
	this._isCellSize = false;
	this.totalColumn = null;
	this.numVer = null;
	this.totalRow = null;
	this.numHor = null;
	this.cellHeight = null;
	this.cellWidth = null;
	this.isFullscreen = false;
	this.isCentered = false;
	this.gridY = 0;
	this.gridX = 0;
	this.height = null;
	this.width = null;
	this.y = null;
	this.x = null;
	this.total = null;
	this.array = [];
	if(ctx != null) {
		this._ctx = ctx;
	}
};
cc_util_GridUtil.__name__ = "cc.util.GridUtil";
cc_util_GridUtil.create = function(ctx) {
	var GridUtil = new cc_util_GridUtil(ctx);
	return GridUtil;
};
cc_util_GridUtil.createGrid = function(x,y,width,height,numHor,numVer) {
	if(numVer == null) {
		numVer = 1;
	}
	if(numHor == null) {
		numHor = 1;
	}
	var gridW = width / (numHor - 1);
	var gridH = height / (numVer - 1);
	var total = numHor * numVer;
	var xpos = 0;
	var ypos = 0;
	var arr = [];
	var _g = 0;
	var _g1 = total;
	while(_g < _g1) {
		var i = _g++;
		var point = { x : x + xpos * gridW, y : y + ypos * gridH};
		arr.push(point);
		++xpos;
		if(xpos >= numHor) {
			xpos = 0;
			++ypos;
		}
	}
	return arr;
};
cc_util_GridUtil.calcGrid = function(x,y,width,height,gridX,gridY,numHor,numVer) {
	if(numVer == null) {
		numVer = 1;
	}
	if(numHor == null) {
		numHor = 1;
	}
	if(gridY == null) {
		gridY = 1;
	}
	if(gridX == null) {
		gridX = 1;
	}
	if(height == null) {
		height = -1;
	}
	if(width == null) {
		width = -1;
	}
	if(y == null) {
		y = -1;
	}
	if(x == null) {
		x = -1;
	}
	var grid = new cc_util_GridUtil();
	grid.array = [];
	grid.x = 0;
	grid.y = 0;
	grid.width = 0;
	grid.height = 0;
	grid.gridX = 0;
	grid.gridY = 0;
	return grid;
};
cc_util_GridUtil.prototype = {
	xpos: function(x) {
		this._x = x;
		return this;
	}
	,ypos: function(y) {
		this._y = y;
		return this;
	}
	,pos: function(x,y) {
		this._x = x;
		this._y = y;
		return this;
	}
	,dimension: function(w,h) {
		this._w = w;
		this._h = h;
		return this;
	}
	,grid: function(hor,ver) {
		this._hor = hor;
		this._ver = ver;
		return this;
	}
	,size: function(w,h) {
		this._cellw = w;
		this._cellh = h;
		return this;
	}
	,centered: function() {
		this._center = true;
		return this;
	}
	,debug: function() {
		this._debug = true;
		return this;
	}
	,fullscreen: function() {
		this._fullscreen = true;
		return this;
	}
	,color: function(value) {
		this._color = value;
		return this;
	}
	,calc: function() {
		haxe_Log.trace("WIP",{ fileName : "cc/util/GridUtil.hx", lineNumber : 266, className : "cc.util.GridUtil", methodName : "calc"});
		return this;
	}
	,draw: function(isDebug) {
		if(isDebug == null) {
			isDebug = false;
		}
		var isDebug1 = isDebug;
		return this;
	}
	,setPosition: function(x,y) {
		if(this._isDebug) {
			$global.console.log("" + this.toString() + " setPostion");
		}
		this.x = x;
		this.y = y;
		this._isPosition = true;
		this.calculate();
	}
	,setIsCenterPoint: function(isCentered) {
		if(isCentered == null) {
			isCentered = true;
		}
		if(this._isDebug) {
			$global.console.log("" + this.toString() + " setCenterPoint");
		}
		this.isCentered = isCentered;
		this.calculate();
	}
	,setDebug: function(isDebug) {
		if(isDebug == null) {
			isDebug = true;
		}
		this._isDebug = isDebug;
		if(this._isDebug) {
			$global.console.log("" + this.toString() + " setDebug");
		}
	}
	,setIsFullscreen: function(isFullscreen) {
		if(isFullscreen == null) {
			isFullscreen = true;
		}
		if(this._isDebug) {
			$global.console.log("" + this.toString() + " setIsFullscreen");
		}
		this.isFullscreen = isFullscreen;
		this.calculate();
	}
	,setDimension: function(width,height) {
		if(this._isDebug) {
			$global.console.log("" + this.toString() + " setDimension (width: " + width + ", height: " + height + ")");
		}
		this.width = width;
		this.height = height;
		this._isDimension = true;
		this.calculate();
	}
	,setNumbered: function(numHor,numVer) {
		if(this._isDebug) {
			$global.console.log("" + this.toString() + " setNumbers (numHor: " + numHor + ", numVer: " + numVer + ")");
		}
		this.numHor = numHor;
		this.numVer = numVer;
		this._isNumbered = true;
		this.calculate();
	}
	,setCellSize: function(cellWidth,cellHeight) {
		if(cellHeight == null) {
			cellHeight = cellWidth;
		}
		if(this._isDebug) {
			$global.console.log("" + this.toString() + " setCellSize (cellWidth: " + cellWidth + ", cellHeight: " + cellHeight + ")");
		}
		this.cellWidth = cellWidth;
		this.cellHeight = cellHeight;
		this._isCellSize = true;
		this.calculate();
	}
	,row: function(sh) {
		return this.getTablePosition(sh).row;
	}
	,column: function(sh) {
		return this.getTablePosition(sh).column;
	}
	,getTablePosition: function(sh) {
		var index = this.array.indexOf(sh);
		var _row = Math.floor(index / this.numHor);
		var _column = index - _row * this.numHor;
		return { "row" : _row, "column" : _column};
	}
	,getIndex: function(point) {
		var index = this.array.indexOf(point);
		if(index == -1) {
			$global.console.warn("Looks like this point (" + point.x + ", " + point.y + ") is not in array");
		}
		return index;
	}
	,getTablePoint: function(row,column) {
		if(row >= this.totalRow) {
			$global.console.warn("looks like the row is outside the grid (" + row + " >= " + this.totalRow + ")");
			return null;
		}
		if(column >= this.totalColumn) {
			$global.console.warn("looks like the column is outside the grid (" + column + " >= " + this.totalColumn + ")");
			return null;
		}
		if(row < 0) {
			$global.console.warn("looks like the row is outside the grid (" + row + " < 0)");
			return null;
		}
		if(column < 0) {
			$global.console.warn("looks like the column is outside the grid (" + column + " < 0)");
			return null;
		}
		return this.array[Math.round(row * this.numHor + column)];
	}
	,reset: function() {
		this.array = [];
	}
	,calculate: function() {
		if(this._isDebug) {
			$global.console.log("" + this.toString() + " calculate()");
		}
		if(this._isCellSize && !this._isDimension) {
			if(this._isDebug) {
				$global.console.info("" + this.toString() + " solution #1: cellSize is set");
			}
			this.numHor = Math.floor(Global.w / this.cellWidth);
			this.numVer = Math.floor(Global.h / this.cellHeight);
			this.width = this.numHor * this.cellWidth;
			this.height = this.numVer * this.cellHeight;
			this.x = (Global.w - this.width) / 2;
			this.y = (Global.h - this.height) / 2;
		}
		if(this._isNumbered && !this._isDimension) {
			if(this._isDebug) {
				$global.console.info("" + this.toString() + " solution #2: numbered cells set");
			}
			var _w = this.width != null ? this.width : Global.w;
			var _h = this.height != null ? this.height : Global.h;
			this.cellWidth = _w / this.numHor;
			this.cellHeight = _h / this.numVer;
			this.width = this.numHor * this.cellWidth;
			this.height = this.numVer * this.cellHeight;
			this.x = (Global.w - this.width) / 2;
			this.y = (Global.h - this.height) / 2;
			$global.console.info("cellWidth: " + this.cellWidth + ", cellHeight: " + this.cellHeight + ", width: " + this.width + ", height: " + this.height + ", x: " + this.x + ", y: " + this.y);
		}
		if(this._isDimension && !this._isNumbered && !this._isCellSize) {
			if(this._isDebug) {
				$global.console.info("" + this.toString() + " solution #3: width/height set (" + this.width + ", " + this.height + ")");
			}
			var _cellWidth = this.cellWidth != null ? this.cellWidth : 50;
			var _cellHeight = this.cellHeight != null ? this.cellHeight : 50;
			this.numHor = Math.floor(this.width / _cellWidth);
			this.numVer = Math.floor(this.height / _cellHeight);
			this.width = this.numHor * _cellWidth;
			this.height = this.numVer * _cellHeight;
			this.cellWidth = this.width / this.numHor;
			this.cellHeight = this.height / this.numVer;
			this.x = (Global.w - this.width) / 2;
			this.y = (Global.h - this.height) / 2;
		}
		if(this._isDimension && !this._isCellSize) {
			if(this._isDebug) {
				$global.console.info("" + this.toString() + " solution #3a: width/height set (" + this.width + ", " + this.height + ") AND number row/cols (" + this.numHor + ", " + this.numVer + ")");
			}
			this.cellWidth = Math.floor(this.width / this.numHor);
			this.cellHeight = Math.floor(this.height / this.numVer);
			this.width = this.numHor * this.cellWidth;
			this.height = this.numVer * this.cellHeight;
			if(!this._isPosition) {
				this.x = (Global.w - this.width) / 2;
				this.y = (Global.h - this.height) / 2;
			}
		}
		if(this._isDimension && this._isNumbered && !this._isCellSize) {
			if(this._isDebug) {
				$global.console.info("" + this.toString() + " solution #3b: w/h set (" + this.width + ", " + this.height + ") AND number row/cols (" + this.numHor + ", " + this.numVer + ")");
				$global.console.info("" + this.toString() + "  (" + Global.w + ", " + Global.h + ")");
			}
			this.cellWidth = Math.floor(this.width / this.numHor);
			this.cellHeight = Math.floor(this.height / this.numVer);
			this.width = this.numHor * this.cellWidth;
			this.height = this.numVer * this.cellHeight;
		}
		if(this._isCellSize && this._isDimension) {
			if(this._isDebug) {
				$global.console.info("" + this.toString() + " solution #4: cellSize is set and width/height");
			}
			this.numHor = Math.floor(this.width / this.cellWidth);
			this.numVer = Math.floor(this.height / this.cellHeight);
			this.width = this.numHor * this.cellWidth;
			this.height = this.numVer * this.cellHeight;
			if(!this._isPosition) {
				this.x = (Global.w - this.width) / 2;
				this.y = (Global.h - this.height) / 2;
			}
		}
		if(this.isFullscreen && this._isCellSize) {
			if(this._isDebug) {
				$global.console.info("" + this.toString() + " solution #5: fullscreen and cellSize is set");
			}
			this.width = Global.w;
			this.height = Global.h;
			this.numHor = Math.ceil(this.width / this.cellWidth);
			this.numVer = Math.ceil(this.height / this.cellHeight);
			this.width = this.numHor * this.cellWidth;
			this.height = this.numVer * this.cellHeight;
			this.x = (Global.w - this.width) / 2;
			this.y = (Global.h - this.height) / 2;
		}
		var cx = 0.0;
		var cy = 0.0;
		if(this.isCentered) {
			cx = this.cellWidth / 2;
			cy = this.cellHeight / 2;
		}
		this.array = [];
		var total = Math.round(this.numHor * this.numVer);
		var xpos = 0;
		var ypos = 0;
		var _g = 0;
		var _g1 = total;
		while(_g < _g1) {
			var i = _g++;
			var point = { x : Math.round(this.x + xpos * this.cellWidth + cx), y : Math.round(this.y + ypos * this.cellHeight + cy)};
			this.array.push(point);
			++xpos;
			if(xpos >= this.numHor) {
				xpos = 0;
				++ypos;
			}
		}
		total = this.array.length;
		if(this._isDebug) {
			$global.console.groupCollapsed("" + this.toString() + " Sata");
			$global.console.log("x: " + this.x + ", y: " + this.y + ", width: " + this.width + ", height: " + this.height + ", cellWidth: " + this.cellWidth + ", cellHeight: " + this.cellHeight + ", numHor: " + this.numHor + ", numVer: " + this.numVer + ", array: " + this.array.length);
			$global.console.table(this.array);
			$global.console.groupEnd();
		}
		this.totalRow = Math.round(this.numVer);
		this.totalColumn = Math.round(this.numHor);
	}
	,toString: function() {
		return "[GridUtil]";
	}
	,__class__: cc_util_GridUtil
};
var cc_util_MathUtil = function() { };
cc_util_MathUtil.__name__ = "cc.util.MathUtil";
cc_util_MathUtil.radians = function(deg) {
	return deg * Math.PI / 180;
};
cc_util_MathUtil.degrees = function(rad) {
	return rad * 180 / Math.PI;
};
cc_util_MathUtil.degreesToPoint = function(deg,diameter) {
	var rad = Math.PI * deg / 180;
	var r = diameter / 2;
	return { x : r * Math.cos(rad), y : r * Math.sin(rad)};
};
cc_util_MathUtil.distributeAngles = function(me,total) {
	return me / total * 360;
};
cc_util_MathUtil.distance = function(x1,y1,x2,y2) {
	return cc_util_MathUtil.dist(x1,y1,x2,y2);
};
cc_util_MathUtil.dist = function(x1,y1,x2,y2) {
	x2 -= x1;
	y2 -= y1;
	return Math.sqrt(x2 * x2 + y2 * y2);
};
cc_util_MathUtil.pythagoreanTheorem = function(a,b,c) {
	if(a == null && b == null && c == null) {
		haxe_Log.trace("Really? Perhaps you should use some data",{ fileName : "cc/util/MathUtil.hx", lineNumber : 104, className : "cc.util.MathUtil", methodName : "pythagoreanTheorem"});
		return 0;
	}
	var value = 0.0;
	if(c == null || c == 0) {
		value = Math.sqrt(a * a + b * b);
	}
	if(a == null || a == 0) {
		value = Math.sqrt(c * c - b * b);
	}
	if(b == null || b == 0) {
		value = Math.sqrt(c * c - a * a);
	}
	return value;
};
cc_util_MathUtil.circumferenceCircle = function(radius) {
	return Math.PI * radius * 2;
};
cc_util_MathUtil.circumference2RadiusCircle = function(circumference) {
	return circumference / (Math.PI * 2);
};
cc_util_MathUtil.areaCircle = function(radius) {
	return Math.PI * Math.sqrt(radius);
};
cc_util_MathUtil.randomInteger = function(min,max) {
	if(max == null) {
		max = min;
		min = 0;
	}
	return Math.floor(Math.random() * (max + 1 - min)) + min;
};
cc_util_MathUtil.randomInt = function(min,max) {
	return cc_util_MathUtil.randomInteger(min,max);
};
cc_util_MathUtil.random = function(min,max) {
	if(min == null) {
		min = 0;
		max = 1;
	} else if(max == null) {
		max = min;
		min = 0;
	}
	return Math.random() * (max - min) + min;
};
cc_util_MathUtil.randomP = function(min,max) {
	if(min == null) {
		min = 0.1;
		max = 1;
	} else if(max == null) {
		max = min;
		min = 0.1;
	}
	return Math.random() * (max - min) + min;
};
cc_util_MathUtil.chance = function(value) {
	if(value > 1) {
		value /= 100;
	}
	return Math.random() < value;
};
cc_util_MathUtil.posNeg = function() {
	return cc_util_MathUtil.randomInt(0,1) * 2 - 1;
};
cc_util_MathUtil.flip = function() {
	return Math.random() < 0.5;
};
cc_util_MathUtil.angle = function(cx,cy,ex,ey) {
	var dy = ey - cy;
	var dx = ex - cx;
	var theta = Math.atan2(dy,dx);
	theta *= 180 / Math.PI;
	if(theta < 0) {
		theta = 360 + theta;
	}
	if(theta == 360) {
		theta = 0;
	}
	return theta;
};
cc_util_MathUtil.map = function(value,min1,max1,min2,max2,clampResult) {
	var returnvalue = (value - min1) / (max1 - min1) * (max2 - min2) + min2;
	if(clampResult) {
		return cc_util_MathUtil.clamp(returnvalue,min2,max2);
	} else {
		return returnvalue;
	}
};
cc_util_MathUtil.orbit = function(xpos,ypos,angle,radius) {
	var _xpos = xpos + Math.cos(cc_util_MathUtil.radians(angle)) * radius;
	var _ypos = ypos + Math.sin(cc_util_MathUtil.radians(angle)) * radius;
	return { x : _xpos, y : _ypos};
};
cc_util_MathUtil.orbitX = function(origin,angle,radius) {
	return origin + Math.cos(cc_util_MathUtil.radians(angle)) * radius;
};
cc_util_MathUtil.orbitY = function(origin,angle,radius) {
	return origin + Math.sin(cc_util_MathUtil.radians(angle)) * radius;
};
cc_util_MathUtil.orbitZ = function(origin,angle,radius) {
	return origin + Math.cos(cc_util_MathUtil.radians(angle)) * radius;
};
cc_util_MathUtil.shuffle = function(array) {
	var currentIndex = array.length;
	var temporaryValue;
	var randomIndex;
	while(0 != currentIndex) {
		randomIndex = Math.floor(Math.random() * currentIndex);
		--currentIndex;
		temporaryValue = array[currentIndex];
		array[currentIndex] = array[randomIndex];
		array[randomIndex] = temporaryValue;
	}
	return array;
};
cc_util_MathUtil.clamp = function(value,min,max) {
	return Math.min(Math.max(value,Math.min(min,max)),Math.max(min,max));
};
var cc_util_ShapeUtil = function() { };
cc_util_ShapeUtil.__name__ = "cc.util.ShapeUtil";
cc_util_ShapeUtil.cross = function(ctx,x,y,width,height) {
	if(height == null) {
		height = 60;
	}
	if(width == null) {
		width = 20;
	}
	cc_CanvasTools.colour(ctx,cc_util_ColorUtil.PINK.r,cc_util_ColorUtil.PINK.g,cc_util_ColorUtil.PINK.b,1);
	ctx.fillRect(x - width / 2,y - height / 2,width,height);
	ctx.fillRect(x - height / 2,y - width / 2,height,width);
};
cc_util_ShapeUtil.registerPoint = function(ctx,x,y) {
	var _w = 10;
	var _h = 10;
	var _d = 2;
	cc_CanvasTools.colour(ctx,cc_util_ColorUtil.PINK.r,cc_util_ColorUtil.PINK.g,cc_util_ColorUtil.PINK.b,1);
	ctx.fillRect(x - _w / 2,y - _d / 2,_w,_d);
	ctx.fillRect(x - _d / 2,y - _h / 2,_d,_h);
};
cc_util_ShapeUtil.colorRegisterPoint = function(ctx,x,y,rgb) {
	if(rgb == null) {
		rgb = cc_util_ColorUtil.PINK;
	}
	var _w = 10;
	var _h = 10;
	var _d = 2;
	cc_CanvasTools.colourRGB(ctx,rgb,1);
	ctx.fillRect(x - _w / 2,y - _d / 2,_w,_d);
	ctx.fillRect(x - _d / 2,y - _h / 2,_d,_h);
};
cc_util_ShapeUtil.xcross = function(ctx,x,y,size,weight) {
	if(weight == null) {
		weight = 100;
	}
	if(size == null) {
		size = 200;
	}
	cc_CanvasTools.strokeWeight(ctx,weight);
	cc_CanvasTools.line(ctx,x - size / 2,y - size / 2,x - size / 2 + size,y - size / 2 + size);
	cc_CanvasTools.line(ctx,x + size - size / 2,y - size / 2,x - size / 2,y + size - size / 2);
};
cc_util_ShapeUtil.gridRegister = function(ctx,arr) {
	var _g = 0;
	var _g1 = arr.length;
	while(_g < _g1) {
		var i = _g++;
		var point = arr[i];
		cc_util_ShapeUtil.registerPoint(ctx,point.x,point.y);
	}
};
cc_util_ShapeUtil.gridRegisters = function(ctx,grid) {
	var _g = 0;
	var _g1 = grid.array.length;
	while(_g < _g1) {
		var i = _g++;
		var point = grid.array[i];
		cc_util_ShapeUtil.cross(ctx,point.x,point.y,5,20);
	}
};
cc_util_ShapeUtil.gridField = function(ctx,grid) {
	var _g = 0;
	var _g1 = grid.array.length;
	while(_g < _g1) {
		var i = _g++;
		var point = grid.array[i];
		cc_util_ShapeUtil.registerPoint(ctx,point.x,point.y);
	}
	ctx.lineWidth = 1;
	cc_CanvasTools.lineColour(ctx,cc_util_ColorUtil.GRAY.r,cc_util_ColorUtil.GRAY.g,cc_util_ColorUtil.GRAY.b,0.5);
	ctx.strokeRect(grid.x,grid.y,grid.width,grid.height);
};
cc_util_ShapeUtil.gridDots = function(ctx,grid) {
	var _g = 0;
	var _g1 = grid.array.length;
	while(_g < _g1) {
		var i = _g++;
		var point = grid.array[i];
		cc_CanvasTools.colour(ctx,cc_util_ColorUtil.PINK.r,cc_util_ColorUtil.PINK.g,cc_util_ColorUtil.PINK.b,1);
		cc_CanvasTools.circle(ctx,point.x,point.y,1);
	}
	ctx.lineWidth = 1;
	cc_CanvasTools.lineColour(ctx,cc_util_ColorUtil.GRAY.r,cc_util_ColorUtil.GRAY.g,cc_util_ColorUtil.GRAY.b,0.5);
	ctx.strokeRect(grid.x,grid.y,grid.width,grid.height);
};
var cc_util_TextUtil = function() {
};
cc_util_TextUtil.__name__ = "cc.util.TextUtil";
cc_util_TextUtil.getLines = function(ctx,text,maxWidth) {
	text = StringTools.replace(StringTools.replace(text,"\n"," \n "),"  "," ");
	var words = text.split(" ");
	var lines = [];
	var currentLine = words[0];
	var _g = 1;
	var _g1 = words.length;
	while(_g < _g1) {
		var i = _g++;
		var word = words[i];
		if(word == "\n") {
			lines.push(StringTools.trim(currentLine));
			currentLine = "";
			continue;
		}
		var width = ctx.measureText(currentLine + " " + word).width;
		if(width < maxWidth) {
			currentLine += " " + word;
		} else {
			lines.push(StringTools.trim(currentLine));
			if(word == " ") {
				currentLine = "";
			} else {
				currentLine = word;
			}
		}
	}
	lines.push(StringTools.trim(currentLine));
	return lines;
};
cc_util_TextUtil.drawTextAlongArc = function(ctx,str,centerX,centerY,radius,angle) {
	var charArr = str.split("");
	ctx.save();
	ctx.translate(centerX,centerY);
	ctx.rotate(-1 * angle / 2);
	ctx.rotate(-1 * (angle / charArr.length) / 2);
	var _g = 0;
	var _g1 = charArr.length;
	while(_g < _g1) {
		var i = _g++;
		var _char = charArr[i];
		ctx.rotate(angle / charArr.length);
		ctx.save();
		ctx.translate(0,-1 * radius);
		ctx.fillText(_char,0,0);
		ctx.restore();
	}
	ctx.restore();
};
cc_util_TextUtil.drawTextAlongArc4 = function(ctx,str,centerX,centerY,radius,startDegree) {
	if(startDegree == null) {
		startDegree = -90;
	}
	var monoW = ctx.measureText(" ").width;
	var charArr = str.split("");
	ctx.save();
	var angle = 0.0;
	var _g = 0;
	var _g1 = charArr.length;
	while(_g < _g1) {
		var i = _g++;
		radius -= 0.15 + i * 0.0005;
		var a = monoW;
		var b = radius;
		var c = radius;
		var cosa = (Math.pow(b,2) + Math.pow(c,2) - Math.pow(a,2)) / (2 * b * c);
		var pAngle = cc_util_MathUtil.degrees(Math.acos(cosa));
		var _char = charArr[i];
		angle = startDegree + i * pAngle;
		var xpos = centerX + Math.cos(cc_util_MathUtil.radians(angle)) * radius;
		var ypos = centerY + Math.sin(cc_util_MathUtil.radians(angle)) * radius;
		ctx.save();
		ctx.translate(xpos,ypos);
		ctx.rotate(cc_util_MathUtil.radians(angle + 90));
		ctx.fillText(_char,0,0);
		ctx.restore();
	}
	ctx.restore();
};
cc_util_TextUtil.drawTextAlongArc3 = function(ctx,str,centerX,centerY,radius) {
	var charArr = str.split("");
	ctx.save();
	var angle = 0;
	var _g = 0;
	var _g1 = charArr.length;
	while(_g < _g1) {
		var i = _g++;
		var _char = charArr[i];
		angle = i;
		var xpos = centerX + Math.cos(cc_util_MathUtil.radians(angle)) * radius;
		var ypos = centerY + Math.sin(cc_util_MathUtil.radians(angle)) * radius;
		haxe_Log.trace(_char,{ fileName : "cc/util/TextUtil.hx", lineNumber : 154, className : "cc.util.TextUtil", methodName : "drawTextAlongArc3", customParams : [i,xpos,ypos]});
		ctx.translate(xpos,ypos);
		ctx.rotate(angle / charArr.length);
		ctx.fillText(_char,0,0);
		ctx.restore();
	}
	ctx.restore();
};
cc_util_TextUtil.drawTextAlongArc2 = function(ctx,str,centerX,centerY,radius) {
	var charArr = str.split("");
	var width = ctx.measureText(" ").width;
	ctx.save();
	ctx.translate(centerX,centerY);
	var _angle = 1.0;
	var _g = 0;
	var _g1 = charArr.length;
	while(_g < _g1) {
		var i = _g++;
		var _char = charArr[i];
		var _rotation = cc_util_MathUtil.radians(_angle);
		ctx.rotate(_angle * Math.PI / 360);
		haxe_Log.trace("" + i + " // _char = " + _char + " : _angle: " + _angle + " - _rotation: " + _rotation,{ fileName : "cc/util/TextUtil.hx", lineNumber : 194, className : "cc.util.TextUtil", methodName : "drawTextAlongArc2"});
		ctx.save();
		ctx.translate(0,-1 * radius);
		ctx.fillText(_char,0,0);
		ctx.restore();
		_angle += 0.5;
	}
	ctx.restore();
};
cc_util_TextUtil.prototype = {
	__class__: cc_util_TextUtil
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
	,__properties__: {get_native:"get_native"}
});
var haxe_Log = function() { };
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	__class__: haxe_ValueException
});
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	__class__: haxe_ds_StringMap
};
var haxe_ds__$StringMap_StringMapKeyIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
haxe_ds__$StringMap_StringMapKeyIterator.__name__ = "haxe.ds._StringMap.StringMapKeyIterator";
haxe_ds__$StringMap_StringMapKeyIterator.prototype = {
	hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		return this.keys[this.current++];
	}
	,__class__: haxe_ds__$StringMap_StringMapKeyIterator
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g = 0;
	var _g1 = position;
	while(_g < _g1) {
		var i = _g++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
haxe_xml_XmlParserException.__name__ = "haxe.xml.XmlParserException";
haxe_xml_XmlParserException.prototype = {
	toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__ + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
haxe_xml_Parser.__name__ = "haxe.xml.Parser";
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(p < str.length) {
		var c = str.charCodeAt(p);
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				var tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCodePoint(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent == null || parent.nodeType != 0) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected </" + v + ">, tag is not open",str,p));
				}
				if(parent.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
					}
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCodePoint(c1);
				} else if(!Object.prototype.hasOwnProperty.call(haxe_xml_Parser.escapes.h,s)) {
					if(strict) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
					}
					buf.b += Std.string("&" + s + ";");
				} else {
					buf.b += Std.string(haxe_xml_Parser.escapes.h[s]);
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCodePoint(c),str,p));
				}
				buf.b += String.fromCodePoint(38);
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				--p;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		++p;
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(parent.nodeType == 0) {
			if(parent.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
			}
			throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unclosed node <" + parent.nodeName + ">",str,p));
		}
		if(p != start || nsubs == 0) {
			var len = p - start;
			buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += String.fromCodePoint(38);
		var len = p - start;
		buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				var _g_current = 0;
				var _g_array = value.children;
				while(_g_current < _g_array.length) {
					var child = _g_array[_g_current++];
					this.writeNode(child,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input = StringTools.trim(commentContent);
			this.output.b += Std.string(input);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var _g_current = 0;
			var _g_array = value.children;
			while(_g_current < _g_array.length) {
				var child = _g_array[_g_current++];
				this.writeNode(child,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
		}
		var _g_current = 0;
		var _g_array = value.children;
		while(_g_current < _g_array.length) {
			var child = _g_array[_g_current++];
			switch(child.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child.nodeType == Xml.Document || child.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				if(StringTools.ltrim(child.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var js_Boot = function() { };
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html__$CanvasElement_CanvasUtil = function() { };
js_html__$CanvasElement_CanvasUtil.__name__ = "js.html._CanvasElement.CanvasUtil";
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var name = "webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	var name = "experimental-webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	return null;
};
var model_constants_App = function() { };
model_constants_App.__name__ = "model.constants.App";
model_constants_App.getBuildDate = function() {
	return HxOverrides.dateStr(new Date());
};
var model_constants_Papertoy = function() { };
model_constants_Papertoy.__name__ = "model.constants.Papertoy";
var model_constants_Quotes = function() { };
model_constants_Quotes.__name__ = "model.constants.Quotes";
var sketcher_AST = function() { };
sketcher_AST.__name__ = "sketcher.AST";
var sketcher_draw_AST = function() { };
sketcher_draw_AST.__name__ = "sketcher.draw.AST";
var sketcher_draw_Base = function(name) {
	this.transArr = [];
	this.dash = [];
	this.xml = Xml.createElement(name);
	sketcher_draw_Base.COUNT++;
	this.set_id(this.get_id());
};
sketcher_draw_Base.__name__ = "sketcher.draw.Base";
sketcher_draw_Base.prototype = {
	setID: function(id) {
		this.set_id(id);
	}
	,setMask: function(id) {
		this.xml.set("mask","url(#" + id + ")");
		this.set_maskID(id);
	}
	,setMarkerEnd: function(id) {
		this.xml.set("marker-end","url(#" + id + ")");
		this.set_markerID(id);
	}
	,setMarkerStart: function(id) {
		this.xml.set("marker-start","url(#" + id + ")");
		this.set_markerID(id);
	}
	,setMarker: function(id,pos) {
		if(pos == null) {
			pos = "end";
		}
		var tmp = pos != "end" || pos != "start";
		this.xml.set("marker-" + pos,"url(#" + id + ")");
		this.set_markerID(id);
	}
	,setPosition: function(x,y) {
		this.set_move({ x : x, y : y});
		if(y == null) {
			this.set_move({ x : x, y : 0});
		}
		var str = "translate(" + x;
		if(y != null) {
			str += "," + y;
		}
		str += ")";
		this.transArr.push(str);
	}
	,setMove: function(x,y) {
		this.setPosition(x,y);
	}
	,setPlusPosition: function(x,y) {
		this.setPosition(x,y);
	}
	,setRotate: function(degree,rx,ry) {
		this.rotate = degree;
		this.set_rx(rx);
		this.set_ry(ry);
		var str = "rotate(" + degree;
		if(rx != null) {
			str += "," + rx;
		}
		if(ry != null) {
			str += "," + ry;
		}
		str += ")";
		this.transArr.push(str);
	}
	,setScale: function(x,y) {
		var str = "scale(" + x;
		if(y != null) {
			str += "," + y;
		}
		str += ")";
		this.transArr.push(str);
	}
	,getTransform: function() {
		var str = "";
		var _g = 0;
		var _g1 = this.transArr.length;
		while(_g < _g1) {
			var i = _g++;
			str += this.transArr[i] + " ";
		}
		return str;
	}
	,setStroke: function(color,weight,opacity) {
		if(opacity == null) {
			opacity = 1;
		}
		if(weight == null) {
			weight = 1;
		}
		this.set_strokeColor(color);
		this.set_strokeWeight(weight);
		this.set_strokeOpacity(opacity);
		return this;
	}
	,noStroke: function() {
		this.set_lineWeight(0);
		this.set_strokeColor("transparant");
		this.set_strokeOpacity(0);
		return this;
	}
	,setFill: function(color,opacity) {
		if(opacity == null) {
			opacity = 1;
		}
		this.set_fillColor(color);
		this.set_fillOpacity(opacity);
		return this;
	}
	,noFill: function() {
		this.set_fillOpacity(0);
		this.set_fillColor("transparant");
		return this;
	}
	,setShadow: function(color,blur,offsetx,offsety) {
		if(offsety == null) {
			offsety = 0;
		}
		if(offsetx == null) {
			offsetx = 0;
		}
		if(blur == null) {
			blur = 0;
		}
		this.set_shadowColor(color);
		this.set_shadowBlur(blur);
		this.set_shadowOffsetX(offsetx);
		this.set_shadowOffsetY(offsety);
	}
	,setLineEnds: function(linecap,linejoin) {
		if(linejoin == null) {
			linejoin = "round";
		}
		if(linecap == null) {
			linecap = "round";
		}
		this.set_lineCap(linecap);
		this.set_lineJoin(linejoin);
		return this;
	}
	,setClass: function(className) {
		this.set_className(className);
		return this;
	}
	,clone: function() {
		haxe_Log.trace("WIP",{ fileName : "sketcher/draw/Base.hx", lineNumber : 284, className : "sketcher.draw.Base", methodName : "clone"});
		return js_Boot.__cast(JSON.parse(JSON.stringify(this)) , sketcher_draw_Base);
	}
	,convertID: function(id) {
		return StringTools.replace(id.toLowerCase()," ","_");
	}
	,useDefaultsCanvas: function() {
		if(this.get_lineWeight() == null) {
			this.set_lineWeight(0);
		}
		if(this.get_fillColor() == null) {
			this.set_fillColor("#000000");
		}
		if(this.get_strokeColor() == null) {
			this.set_strokeColor("#000000");
			this.set_strokeOpacity(0);
		}
		if(this.get_fillOpacity() == null) {
			this.set_fillOpacity(1);
		}
		if(this.get_strokeOpacity() == null) {
			this.set_strokeOpacity(1);
		}
		if(this.get_lineCap() == null) {
			this.set_lineCap("butt");
		}
		if(this.get_lineJoin() == null) {
			this.set_lineJoin("miter");
		}
	}
	,get_maskID: function() {
		return this.maskID;
	}
	,set_maskID: function(value) {
		return this.maskID = value;
	}
	,get_markerID: function() {
		return this.markerID;
	}
	,set_markerID: function(value) {
		return this.markerID = value;
	}
	,get_id: function() {
		if(this.id == null) {
			this.set_id(this.getName() + "_" + sketcher_draw_Base.COUNT);
			sketcher_draw_Base.COUNT++;
		}
		return this.id;
	}
	,set_id: function(value) {
		value = this.convertID(value);
		if(this.xml != null) {
			this.xml.set("id",value == null ? "null" : "" + value);
			this.xml.set("data-count",Std.string(sketcher_draw_Base.COUNT));
		}
		return this.id = value;
	}
	,get_fill: function() {
		return this.fill;
	}
	,set_fill: function(value) {
		this.xml.set("fill",value == null ? "null" : "" + value);
		return this.fill = value;
	}
	,get_fillColor: function() {
		return this.get_fill();
	}
	,set_fillColor: function(value) {
		return this.set_fill(value);
	}
	,get_fillGradientColor: function() {
		return this.get_fill();
	}
	,set_fillGradientColor: function(value) {
		value = this.convertID(value);
		return this.set_fill("url(#" + value + ")");
	}
	,get_stroke: function() {
		return this.stroke;
	}
	,set_stroke: function(value) {
		this.xml.set("stroke",value == null ? "null" : "" + value);
		return this.stroke = value;
	}
	,get_strokeColor: function() {
		return this.get_stroke();
	}
	,set_strokeColor: function(value) {
		return this.set_stroke(value);
	}
	,get_lineWeight: function() {
		return this.lineWeight;
	}
	,set_lineWeight: function(value) {
		this.xml.set("stroke-width",value == null ? "null" : "" + value);
		return this.lineWeight = value;
	}
	,get_strokeWeight: function() {
		return this.get_lineWeight();
	}
	,set_strokeWeight: function(value) {
		return this.set_lineWeight(value);
	}
	,get_opacity: function() {
		return this.opacity;
	}
	,set_opacity: function(value) {
		var v = sketcher_util_MathUtil.clamp(value,0,1);
		this.set_fillOpacity(v);
		this.set_strokeOpacity(v);
		return this.opacity = v;
	}
	,get_strokeOpacity: function() {
		return this.strokeOpacity;
	}
	,set_strokeOpacity: function(value) {
		var v = sketcher_util_MathUtil.clamp(value,0,1);
		this.xml.set("stroke-opacity",v == null ? "null" : "" + v);
		return this.strokeOpacity = v;
	}
	,get_fillOpacity: function() {
		return this.fillOpacity;
	}
	,set_fillOpacity: function(value) {
		var v = sketcher_util_MathUtil.clamp(value,0,1);
		this.xml.set("fill-opacity",v == null ? "null" : "" + v);
		return this.fillOpacity = v;
	}
	,get_y: function() {
		return this.y;
	}
	,set_y: function(value) {
		return this.y = value;
	}
	,get_x: function() {
		return this.x;
	}
	,set_x: function(value) {
		return this.x = value;
	}
	,get_rotate: function() {
		return this.rotate;
	}
	,set_rotate: function(value) {
		return this.rotate = value;
	}
	,get_rx: function() {
		return this.rx;
	}
	,set_rx: function(value) {
		return this.rx = value;
	}
	,get_ry: function() {
		return this.ry;
	}
	,set_ry: function(value) {
		return this.ry = value;
	}
	,get_move: function() {
		return this.move;
	}
	,set_move: function(value) {
		return this.move = value;
	}
	,get_transform: function() {
		return this.transform;
	}
	,set_transform: function(value) {
		return this.transform = value;
	}
	,get_dash: function() {
		return this.dash;
	}
	,set_dash: function(value) {
		var str = "";
		var _g = 0;
		var _g1 = value.length;
		while(_g < _g1) {
			var i = _g++;
			str += value[i];
			if(i != value.length - 1) {
				str += ",";
			}
		}
		this.xml.set("stroke-dasharray",str);
		return this.dash = value;
	}
	,get_desc: function() {
		return this.desc;
	}
	,set_desc: function(value) {
		return this.desc = value;
	}
	,get_lineCap: function() {
		return this.lineCap;
	}
	,set_lineCap: function(value) {
		this.xml.set("stroke-linecap",Std.string(value));
		return this.lineCap = value;
	}
	,get_lineJoin: function() {
		return this.lineJoin;
	}
	,set_lineJoin: function(value) {
		this.xml.set("stroke-linejoin",Std.string(value));
		return this.lineJoin = value;
	}
	,get_shadowColor: function() {
		return this.shadowColor;
	}
	,set_shadowColor: function(value) {
		return this.shadowColor = value;
	}
	,get_shadowBlur: function() {
		return this.shadowBlur;
	}
	,set_shadowBlur: function(value) {
		return this.shadowBlur = value;
	}
	,get_shadowOffsetX: function() {
		return this.shadowOffsetX;
	}
	,set_shadowOffsetX: function(value) {
		return this.shadowOffsetX = value;
	}
	,get_shadowOffsetY: function() {
		return this.shadowOffsetY;
	}
	,set_shadowOffsetY: function(value) {
		return this.shadowOffsetY = value;
	}
	,get_isVisible: function() {
		return this.isVisible;
	}
	,set_isVisible: function(value) {
		var _opacity = 0;
		if(value) {
			_opacity = 1;
		}
		this.set_fillOpacity(_opacity);
		this.set_strokeOpacity(_opacity);
		return this.isVisible = value;
	}
	,get_count: function() {
		return sketcher_draw_Base.COUNT;
	}
	,get_className: function() {
		return this.className;
	}
	,set_className: function(value) {
		this.xml.set("class",value == null ? "null" : "" + value);
		return this.className = value;
	}
	,getName: function() {
		var c = js_Boot.getClass(this);
		var name = c.__name__;
		return "" + name;
	}
	,toObject: function() {
		var c = js_Boot.getClass(this);
		var name = c.__name__;
		return JSON.parse(JSON.stringify(this));
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		var name = c.__name__;
		return "" + name + ": " + Std.string(JSON.parse(JSON.stringify(this)));
	}
	,toSvg: function() {
		throw haxe_Exception.thrown("Not implemented yet");
	}
	,__class__: sketcher_draw_Base
	,__properties__: {set_shadowOffsetY:"set_shadowOffsetY",get_shadowOffsetY:"get_shadowOffsetY",set_shadowOffsetX:"set_shadowOffsetX",get_shadowOffsetX:"get_shadowOffsetX",set_shadowBlur:"set_shadowBlur",get_shadowBlur:"get_shadowBlur",set_shadowColor:"set_shadowColor",get_shadowColor:"get_shadowColor",set_lineJoin:"set_lineJoin",get_lineJoin:"get_lineJoin",set_lineCap:"set_lineCap",get_lineCap:"get_lineCap",set_className:"set_className",get_className:"get_className",set_desc:"set_desc",get_desc:"get_desc",set_dash:"set_dash",get_dash:"get_dash",set_transform:"set_transform",get_transform:"get_transform",set_move:"set_move",get_move:"get_move",get_rotate:"get_rotate",set_isVisible:"set_isVisible",get_isVisible:"get_isVisible",set_fillOpacity:"set_fillOpacity",get_fillOpacity:"get_fillOpacity",set_strokeOpacity:"set_strokeOpacity",get_strokeOpacity:"get_strokeOpacity",set_opacity:"set_opacity",get_opacity:"get_opacity",set_strokeWeight:"set_strokeWeight",get_strokeWeight:"get_strokeWeight",set_lineWeight:"set_lineWeight",get_lineWeight:"get_lineWeight",set_strokeColor:"set_strokeColor",get_strokeColor:"get_strokeColor",set_stroke:"set_stroke",get_stroke:"get_stroke",set_fillGradientColor:"set_fillGradientColor",get_fillGradientColor:"get_fillGradientColor",set_fillColor:"set_fillColor",get_fillColor:"get_fillColor",set_fill:"set_fill",get_fill:"get_fill",set_markerID:"set_markerID",get_markerID:"get_markerID",set_maskID:"set_maskID",get_maskID:"get_maskID",set_ry:"set_ry",get_ry:"get_ry",set_rx:"set_rx",get_rx:"get_rx",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_id:"set_id",get_id:"get_id",get_count:"get_count"}
};
var sketcher_draw_IBase = function() { };
sketcher_draw_IBase.__name__ = "sketcher.draw.IBase";
sketcher_draw_IBase.__isInterface__ = true;
sketcher_draw_IBase.prototype = {
	__class__: sketcher_draw_IBase
	,__properties__: {set_id:"set_id",get_id:"get_id"}
};
var sketcher_draw_Background = function(color) {
	this.type = "background";
	sketcher_draw_Base.call(this,"rect");
	this.set_fillColor(color);
	this.set_id("background-layer");
};
sketcher_draw_Background.__name__ = "sketcher.draw.Background";
sketcher_draw_Background.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Background.__super__ = sketcher_draw_Base;
sketcher_draw_Background.prototype = $extend(sketcher_draw_Base.prototype,{
	svg: function(settings) {
		this.xml.set("x","0");
		this.xml.set("y","0");
		this.xml.set("width",Std.string(Globals.w));
		this.xml.set("height",Std.string(Globals.h));
		return haxe_xml_Printer.print(this.xml);
	}
	,ctx: function(ctx) {
		this.useDefaultsCanvas();
		var value = this.get_fillColor();
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var _fillColor_r = _r;
		var _fillColor_g = _g;
		var _fillColor_b = _b;
		var _fillColor_a = _a;
		ctx.fillStyle = sketcher_util_ColorUtil.getColour(_fillColor_r,_fillColor_g,_fillColor_b,this.get_fillOpacity());
		ctx.beginPath();
		ctx.rect(0,0,Globals.w,Globals.h);
		ctx.fill();
		ctx.closePath();
	}
	,gl: function(gl) {
		if(!sketcher_draw_Background.ISWARN) {
			$global.console.warn("webgl is not implemented yet");
			sketcher_draw_Background.ISWARN = true;
		}
		var c = "#ff3333";
		var value = c;
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var rgba_r = _r;
		var rgba_g = _g;
		var rgba_b = _b;
		var rgba_a = _a;
		gl.viewport(0,0,gl.drawingBufferWidth,gl.drawingBufferHeight);
		gl.clearColor(rgba_r / 255,rgba_g / 255,rgba_b / 255,rgba_a);
		gl.clear(16384);
	}
	,__class__: sketcher_draw_Background
});
var sketcher_draw_Button = function(x,y,width,height,isCenter) {
	if(isCenter == null) {
		isCenter = true;
	}
	this.type = "rectangle";
	this.set_x(x);
	this.set_y(y);
	this.set_width(width);
	this.set_height(height);
	this.cx = this.get_x() - this.get_width() / 2;
	this.cy = this.get_y() - this.get_height() / 2;
	this.isCenter = isCenter;
	if(!isCenter) {
		this.cx = this.get_x();
		this.cy = this.get_y();
	}
	this.point_top_left = { x : this.cx, y : this.cy};
	this.point_top_right = { x : this.cx + this.get_width(), y : this.cy};
	this.point_bottom_left = { x : this.cx, y : this.cy + this.get_height()};
	this.point_bottom_right = { x : this.cx + this.get_width(), y : this.cy + this.get_height()};
	sketcher_draw_Base.call(this,"rect");
};
sketcher_draw_Button.__name__ = "sketcher.draw.Button";
sketcher_draw_Button.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Button.__super__ = sketcher_draw_Base;
sketcher_draw_Button.prototype = $extend(sketcher_draw_Base.prototype,{
	svg: function(settings) {
		this.xml.set("x",Std.string(this.cx));
		this.xml.set("y",Std.string(this.cy));
		this.xml.set("width",Std.string(this.get_width()));
		this.xml.set("height",Std.string(this.get_height()));
		if(this.get_radius() != null) {
			this.xml.set("rx",Std.string(this.get_radius()));
			this.xml.set("ry",Std.string(this.get_radius()));
		}
		if(this.getTransform() != "") {
			this.xml.set("transform",this.getTransform());
		}
		return haxe_xml_Printer.print(this.xml);
	}
	,useCanvasShadow: function(ctx) {
		if(this.get_shadowColor() != null) {
			ctx.shadowColor = this.get_shadowColor();
			ctx.shadowBlur = this.get_shadowBlur();
			ctx.shadowOffsetX = this.get_shadowOffsetX();
			ctx.shadowOffsetY = this.get_shadowOffsetY();
		}
	}
	,ctx: function(ctx) {
		var _gthis = this;
		this.rect = Sketcher.ctx.canvas.getBoundingClientRect();
		this.scale = this.rect.width / Globals.w;
		this.useDefaultsCanvas();
		if(this.get_lineCap() != null) {
			ctx.lineCap = this.get_lineCap();
		}
		ctx.lineWidth = this.get_lineWeight();
		var value = this.get_fillColor();
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var _fillColor_r = _r;
		var _fillColor_g = _g;
		var _fillColor_b = _b;
		var _fillColor_a = _a;
		ctx.fillStyle = sketcher_util_ColorUtil.getColour(_fillColor_r,_fillColor_g,_fillColor_b,this.get_fillOpacity());
		var value = this.get_strokeColor();
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var _strokeColor_r = _r;
		var _strokeColor_g = _g;
		var _strokeColor_b = _b;
		var _strokeColor_a = _a;
		ctx.strokeStyle = sketcher_util_ColorUtil.getColour(_strokeColor_r,_strokeColor_g,_strokeColor_b,this.get_strokeOpacity());
		if(this.get_dash() != null) {
			ctx.setLineDash(this.get_dash());
		}
		ctx.beginPath();
		if(this.get_rotate() != null && this.get_move() == null) {
			ctx.save();
			ctx.translate(this.get_x(),this.get_y());
			ctx.rotate(sketcher_util_MathUtil.radians(this.get_rotate()));
			ctx.arc(0,0,10,0,2 * Math.PI);
			ctx.rect(-(this.get_width() / 2),-(this.get_height() / 2),this.get_width(),this.get_height());
			ctx.restore();
		}
		if(this.get_move() != null && this.get_rotate() == null) {
			ctx.save();
			ctx.translate(this.cx,this.cy);
			ctx.translate(this.get_move().x,this.get_move().y);
			ctx.rect(0,0,this.get_width(),this.get_height());
			ctx.restore();
		}
		if(this.get_rotate() == null && this.get_move() == null) {
			this.buildCanvasShape(ctx);
		}
		if(this.get_fill() != null) {
			ctx.fill();
		}
		if(this.get_stroke() != null && this.get_lineWeight() != 0) {
			ctx.stroke();
		}
		Sketcher.ctx.canvas.addEventListener("mousedown",function(e) {
			Globals.mouseX = e.clientX - _gthis.rect.left;
			Globals.mouseY = e.clientY - _gthis.rect.top;
			if(_gthis.isMouseOver()) {
				haxe_Log.trace("click",{ fileName : "sketcher/draw/Button.hx", lineNumber : 210, className : "sketcher.draw.Button", methodName : "ctx"});
			}
			return Globals.isMouseDown = true;
		});
		Sketcher.ctx.canvas.addEventListener("mousemove",function(e) {
			Globals.mouseX = e.clientX - _gthis.rect.left;
			Globals.mouseY = e.clientY - _gthis.rect.top;
			if(_gthis.isMouseOver()) {
				return Sketcher.ctx.canvas.style.cursor = "pointer";
			} else {
				return Sketcher.ctx.canvas.style.cursor = "default";
			}
		});
		window.addEventListener("mouseup",function(e) {
			if(Globals.isMouseDown == true) {
				Globals.isMouseDown = false;
			}
		});
	}
	,isMouseOver: function() {
		if(Globals.mouseX >= this.point_top_left.x * this.scale && Globals.mouseX <= this.point_bottom_right.x * this.scale && Globals.mouseY >= this.point_top_left.y * this.scale && Globals.mouseY <= this.point_bottom_right.y * this.scale) {
			return true;
		} else {
			return false;
		}
	}
	,buildCanvasShape: function(ctx) {
		if(this.get_radius() == null) {
			ctx.rect(this.cx,this.cy,this.get_width(),this.get_height());
		} else {
			var radius_tl = this.get_radius();
			var radius_tr = this.get_radius();
			var radius_br = this.get_radius();
			var radius_bl = this.get_radius();
			ctx.moveTo(this.cx + radius_tl,this.cy);
			ctx.lineTo(this.cx + this.get_width() - radius_tr,this.cy);
			ctx.quadraticCurveTo(this.cx + this.get_width(),this.cy,this.cx + this.get_width(),this.cy + radius_tr);
			ctx.lineTo(this.cx + this.get_width(),this.cy + this.get_height() - radius_br);
			ctx.quadraticCurveTo(this.cx + this.get_width(),this.cy + this.get_height(),this.cx + this.get_width() - radius_br,this.cy + this.get_height());
			ctx.lineTo(this.cx + radius_bl,this.cy + this.get_height());
			ctx.quadraticCurveTo(this.cx,this.cy + this.get_height(),this.cx,this.cy + this.get_height() - radius_bl);
			ctx.lineTo(this.cx,this.cy + radius_tl);
			ctx.quadraticCurveTo(this.cx,this.cy,this.cx + radius_tl,this.cy);
			ctx.closePath();
		}
	}
	,gl: function(gl) {
	}
	,get_radius: function() {
		return this.radius;
	}
	,set_radius: function(value) {
		return this.radius = value;
	}
	,get_width: function() {
		return this.width;
	}
	,set_width: function(value) {
		return this.width = value;
	}
	,get_height: function() {
		return this.height;
	}
	,set_height: function(value) {
		return this.height = value;
	}
	,__class__: sketcher_draw_Button
	,__properties__: $extend(sketcher_draw_Base.prototype.__properties__,{set_radius:"set_radius",get_radius:"get_radius",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width"})
});
var sketcher_draw_Circle = function(x,y,radius) {
	this.type = "circle";
	this.set_x(x);
	this.set_y(y);
	this.cx = x;
	this.cy = y;
	this.set_radius(radius);
	this.point_top_left = { x : this.cx - this.get_radius(), y : this.cy - this.get_radius()};
	this.point_top_right = { x : this.cx + this.get_radius(), y : this.cy - this.get_radius()};
	this.point_bottom_left = { x : this.cx - this.get_radius(), y : this.cy + this.get_radius()};
	this.point_bottom_right = { x : this.cx + this.get_radius(), y : this.cy + this.get_radius()};
	sketcher_draw_Base.call(this,"circle");
};
sketcher_draw_Circle.__name__ = "sketcher.draw.Circle";
sketcher_draw_Circle.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Circle.__super__ = sketcher_draw_Base;
sketcher_draw_Circle.prototype = $extend(sketcher_draw_Base.prototype,{
	svg: function(settings) {
		this.xml.set("cx",Std.string(this.get_x()));
		this.xml.set("cy",Std.string(this.get_y()));
		this.xml.set("r",Std.string(this.get_radius()));
		if(this.getTransform() != "") {
			this.xml.set("transform",this.getTransform());
		}
		if(this.get_lineWeight() != null) {
			this.xml.set("stroke-width",Std.string(this.get_lineWeight()));
		}
		return haxe_xml_Printer.print(this.xml);
	}
	,ctx: function(ctx) {
		this.useDefaultsCanvas();
		if(this.get_lineCap() != null) {
			ctx.lineCap = this.get_lineCap();
		}
		ctx.lineWidth = this.get_lineWeight();
		var value = this.get_fillColor();
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var _fillColor_r = _r;
		var _fillColor_g = _g;
		var _fillColor_b = _b;
		var _fillColor_a = _a;
		ctx.fillStyle = sketcher_util_ColorUtil.getColour(_fillColor_r,_fillColor_g,_fillColor_b,this.get_fillOpacity());
		var value = this.get_strokeColor();
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var _strokeColor_r = _r;
		var _strokeColor_g = _g;
		var _strokeColor_b = _b;
		var _strokeColor_a = _a;
		ctx.strokeStyle = sketcher_util_ColorUtil.getColour(_strokeColor_r,_strokeColor_g,_strokeColor_b,this.get_strokeOpacity());
		if(this.get_dash() != null) {
			ctx.setLineDash(this.get_dash());
		}
		ctx.beginPath();
		if(this.get_rotate() != null) {
			ctx.save();
			ctx.translate(this.get_x(),this.get_y());
			ctx.rotate(sketcher_util_MathUtil.radians(this.get_rotate()));
			if(this.get_move() != null) {
				ctx.translate(this.get_move().x,this.get_move().y);
			}
			ctx.arc(0,0,this.get_radius(),0,2 * Math.PI);
			ctx.restore();
		}
		if(this.get_rotate() == null) {
			ctx.arc(this.get_x(),this.get_y(),this.get_radius(),0,2 * Math.PI);
		}
		if(this.get_fill() != null) {
			ctx.fill();
		}
		if(this.get_stroke() != null && this.get_lineWeight() != 0) {
			ctx.stroke();
		}
		var tmp = this.get_rotate() != null;
	}
	,gl: function(gl) {
	}
	,debug: function() {
		haxe_Log.trace("" + this.toString(),{ fileName : "sketcher/draw/Circle.hx", lineNumber : 115, className : "sketcher.draw.Circle", methodName : "debug"});
	}
	,get_radius: function() {
		return this.radius;
	}
	,set_radius: function(value) {
		return this.radius = value;
	}
	,__class__: sketcher_draw_Circle
	,__properties__: $extend(sketcher_draw_Base.prototype.__properties__,{set_radius:"set_radius",get_radius:"get_radius"})
});
var sketcher_draw_Ellipse = function(x,y,rx,ry) {
	this.type = "Ellipse";
	this.set_x(x);
	this.set_y(y);
	this.set_rrx(rx);
	this.set_rry(ry);
	sketcher_draw_Base.call(this,"ellipse");
};
sketcher_draw_Ellipse.__name__ = "sketcher.draw.Ellipse";
sketcher_draw_Ellipse.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Ellipse.__super__ = sketcher_draw_Base;
sketcher_draw_Ellipse.prototype = $extend(sketcher_draw_Base.prototype,{
	svg: function(settings) {
		this.xml.set("cx",Std.string(this.get_x()));
		this.xml.set("cy",Std.string(this.get_y()));
		this.xml.set("rx",Std.string(this.get_rrx()));
		this.xml.set("ry",Std.string(this.get_rry()));
		if(this.getTransform() != "") {
			this.xml.set("transform",this.getTransform());
		}
		return haxe_xml_Printer.print(this.xml);
	}
	,ctx: function(ctx) {
		this.useDefaultsCanvas();
		if(this.get_lineCap() != null) {
			ctx.lineCap = this.get_lineCap();
		}
		ctx.lineWidth = this.get_lineWeight();
		var value = this.get_fillColor();
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var _fillColor_r = _r;
		var _fillColor_g = _g;
		var _fillColor_b = _b;
		var _fillColor_a = _a;
		ctx.fillStyle = sketcher_util_ColorUtil.getColour(_fillColor_r,_fillColor_g,_fillColor_b,this.get_fillOpacity());
		var value = this.get_strokeColor();
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var _strokeColor_r = _r;
		var _strokeColor_g = _g;
		var _strokeColor_b = _b;
		var _strokeColor_a = _a;
		ctx.strokeStyle = sketcher_util_ColorUtil.getColour(_strokeColor_r,_strokeColor_g,_strokeColor_b,this.get_strokeOpacity());
		if(this.get_dash() != null) {
			ctx.setLineDash(this.get_dash());
		}
		ctx.beginPath();
		ctx.ellipse(this.get_x(),this.get_y(),this.get_rrx(),this.get_rry(),sketcher_util_MathUtil.radians(this.get_rotate()),0,2 * Math.PI);
		if(this.get_fill() != null) {
			ctx.fill();
		}
		if(this.get_stroke() != null && this.get_lineWeight() != 0) {
			ctx.stroke();
		}
	}
	,gl: function(gl) {
	}
	,get_rry: function() {
		return this.rry;
	}
	,set_rry: function(value) {
		return this.rry = value;
	}
	,get_rrx: function() {
		return this.rrx;
	}
	,set_rrx: function(value) {
		return this.rrx = value;
	}
	,__class__: sketcher_draw_Ellipse
	,__properties__: $extend(sketcher_draw_Base.prototype.__properties__,{set_rrx:"set_rrx",get_rrx:"get_rrx",set_rry:"set_rry",get_rry:"get_rry"})
});
var sketcher_draw_Gradient = function(color0,color1,isLinear) {
	if(isLinear == null) {
		isLinear = true;
	}
	this.dir = sketcher_draw_GradientDir.LeftRight;
	this.type = "gradient";
	this.color0 = color0;
	this.color1 = color1;
	sketcher_draw_Base.call(this,"linearGradient");
};
sketcher_draw_Gradient.__name__ = "sketcher.draw.Gradient";
sketcher_draw_Gradient.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Gradient.__super__ = sketcher_draw_Base;
sketcher_draw_Gradient.prototype = $extend(sketcher_draw_Base.prototype,{
	svg: function(settings) {
		var stop0 = Xml.createElement("stop");
		stop0.set("offset","0%");
		stop0.set("stop-color","" + this.color0);
		var stop1 = Xml.createElement("stop");
		stop1.set("offset","100%");
		stop1.set("stop-color","" + this.color1);
		this.xml.addChild(stop0);
		this.xml.addChild(stop1);
		return haxe_xml_Printer.print(this.xml);
	}
	,ctx: function(ctx) {
		var w = ctx.canvas.width;
		var h = ctx.canvas.height;
		var grd;
		switch(this.dir._hx_index) {
		case 0:case 1:
			grd = ctx.createLinearGradient(0,0,w,0);
			break;
		case 2:case 3:
			grd = ctx.createLinearGradient(h,0,0,0);
			break;
		case 4:case 5:
			grd = ctx.createLinearGradient(0,0,0,h);
			break;
		case 6:case 7:
			grd = ctx.createLinearGradient(0,w,0,0);
			break;
		case 8:case 9:
			grd = ctx.createLinearGradient(0,0,w,h);
			break;
		case 10:case 11:
			grd = ctx.createLinearGradient(0,h,w,0);
			break;
		case 12:case 13:
			grd = ctx.createLinearGradient(h,w,0,0);
			break;
		case 14:case 15:
			grd = ctx.createLinearGradient(h,0,0,h);
			break;
		}
		grd.addColorStop(0,"" + this.color0);
		grd.addColorStop(1,"" + this.color1);
		this.canvasGradient = grd;
		this.gradientObj = { id : this.get_id(), canvasGradient : this.canvasGradient};
		ctx.fillStyle = grd;
		ctx.fillRect(0,0,w,h);
	}
	,gl: function(gl) {
	}
	,setGradientDirection: function(dir) {
		this.dir = dir;
	}
	,__class__: sketcher_draw_Gradient
});
var sketcher_draw_GradientDir = $hxEnums["sketcher.draw.GradientDir"] = { __ename__:true,__constructs__:null
	,LeftRight: {_hx_name:"LeftRight",_hx_index:0,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,LR: {_hx_name:"LR",_hx_index:1,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,RightLeft: {_hx_name:"RightLeft",_hx_index:2,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,RL: {_hx_name:"RL",_hx_index:3,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,TopBottom: {_hx_name:"TopBottom",_hx_index:4,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,TB: {_hx_name:"TB",_hx_index:5,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,BottomTop: {_hx_name:"BottomTop",_hx_index:6,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,BT: {_hx_name:"BT",_hx_index:7,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,LeftTopRightBottom: {_hx_name:"LeftTopRightBottom",_hx_index:8,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,TopLeftBottomRight: {_hx_name:"TopLeftBottomRight",_hx_index:9,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,LeftBottomTopRight: {_hx_name:"LeftBottomTopRight",_hx_index:10,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,BottomLeftRightTop: {_hx_name:"BottomLeftRightTop",_hx_index:11,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,RightBottomLeftTop: {_hx_name:"RightBottomLeftTop",_hx_index:12,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,BottomRightTopLeft: {_hx_name:"BottomRightTopLeft",_hx_index:13,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,TopRightLeftBottom: {_hx_name:"TopRightLeftBottom",_hx_index:14,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,RightTopBottomLeft: {_hx_name:"RightTopBottomLeft",_hx_index:15,__enum__:"sketcher.draw.GradientDir",toString:$estr}
};
sketcher_draw_GradientDir.__constructs__ = [sketcher_draw_GradientDir.LeftRight,sketcher_draw_GradientDir.LR,sketcher_draw_GradientDir.RightLeft,sketcher_draw_GradientDir.RL,sketcher_draw_GradientDir.TopBottom,sketcher_draw_GradientDir.TB,sketcher_draw_GradientDir.BottomTop,sketcher_draw_GradientDir.BT,sketcher_draw_GradientDir.LeftTopRightBottom,sketcher_draw_GradientDir.TopLeftBottomRight,sketcher_draw_GradientDir.LeftBottomTopRight,sketcher_draw_GradientDir.BottomLeftRightTop,sketcher_draw_GradientDir.RightBottomLeftTop,sketcher_draw_GradientDir.BottomRightTopLeft,sketcher_draw_GradientDir.TopRightLeftBottom,sketcher_draw_GradientDir.RightTopBottomLeft];
var sketcher_draw_Group = function(arr) {
	this.isGroupHidden = false;
	this.isOpacityOverride = false;
	this.type = "group";
	this.set_arr(arr);
	sketcher_draw_Base.call(this,"g");
};
sketcher_draw_Group.__name__ = "sketcher.draw.Group";
sketcher_draw_Group.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Group.__super__ = sketcher_draw_Base;
sketcher_draw_Group.prototype = $extend(sketcher_draw_Base.prototype,{
	svg: function(settings) {
		if(this.get_x() > 0 && this.get_y() > 0) {
			this.transArr.push("translate(" + this.get_x() + ", " + this.get_y() + ")");
		}
		if(this.getTransform() != "") {
			this.xml.set("transform",this.getTransform());
		}
		if(this.isOpacityOverride) {
			this.xml.set("opacity-override","true");
		}
		if(this.isGroupHidden) {
			this.xml.set("style","display:none");
		}
		this.xml.set("inkscape:groupmode","layer");
		this.xml.set("inkscape:label","" + this.get_id() + " Layer");
		var comment = Xml.createComment("Group: " + this.get_id());
		this.xml.addChild(comment);
		this.xml.addChild(Xml.parse("<desc>" + this.get_id() + "</desc>"));
		var _g = 0;
		var _g1 = this.get_arr().length;
		while(_g < _g1) {
			var i = _g++;
			var base = this.get_arr()[i];
			this.xml.addChild(Xml.parse(base.svg(null)));
		}
		return haxe_xml_Printer.print(this.xml);
	}
	,ctx: function(ctx) {
		if(!sketcher_draw_Group.ISWARN) {
			$global.console.groupCollapsed("Group (" + this.get_id() + ") info canvas");
			$global.console.info("the following work\n- strokeOpacity\n- fillOpacity\n- fillColor\n- strokeColor\n- strokeWeight\n- rotate");
			$global.console.warn("doesn't work\n- move");
			$global.console.groupEnd();
			sketcher_draw_Group.ISWARN = true;
		}
		var _g = 0;
		var _g1 = this.get_arr().length;
		while(_g < _g1) {
			var i = _g++;
			var base = this.get_arr()[i];
			if(base == null) {
				continue;
			}
			if(this.get_fillOpacity() != null && (js_Boot.__cast(base , sketcher_draw_Base)).get_fillOpacity() == null) {
				(js_Boot.__cast(base , sketcher_draw_Base)).set_fillOpacity(this.get_fillOpacity());
			}
			if(this.get_strokeOpacity() != null && (js_Boot.__cast(base , sketcher_draw_Base)).get_strokeOpacity() == null) {
				(js_Boot.__cast(base , sketcher_draw_Base)).set_strokeOpacity(this.get_strokeOpacity());
			}
			if(this.get_fillColor() != null && (js_Boot.__cast(base , sketcher_draw_Base)).get_fillColor() == null) {
				(js_Boot.__cast(base , sketcher_draw_Base)).set_fillColor(this.get_fillColor());
			}
			if(this.get_strokeColor() != null && (js_Boot.__cast(base , sketcher_draw_Base)).get_strokeColor() == null) {
				(js_Boot.__cast(base , sketcher_draw_Base)).set_strokeColor(this.get_strokeColor());
			}
			if(this.get_strokeWeight() != null) {
				(js_Boot.__cast(base , sketcher_draw_Base)).set_strokeWeight(this.get_strokeWeight());
			}
			if(this.isOpacityOverride) {
				(js_Boot.__cast(base , sketcher_draw_Base)).set_strokeOpacity(this.get_strokeOpacity());
				(js_Boot.__cast(base , sketcher_draw_Base)).set_fillOpacity(this.get_fillOpacity());
			}
		}
		var newCanvas = window.document.createElement("canvas");
		newCanvas.width = ctx.canvas.width;
		newCanvas.height = ctx.canvas.height;
		var newCtx = newCanvas.getContext("2d",null);
		var _g = 0;
		var _g1 = this.get_arr().length;
		while(_g < _g1) {
			var i = _g++;
			var base = this.get_arr()[i];
			if(base == null) {
				continue;
			}
			base.ctx(newCtx);
		}
		if(this.get_rotate() != null) {
			ctx.save();
			ctx.translate(this.get_rx(),this.get_ry());
			ctx.rotate(sketcher_util_MathUtil.radians(this.get_rotate()));
			ctx.drawImage(newCanvas,-this.get_rx(),-this.get_ry());
			ctx.restore();
		} else {
			ctx.drawImage(newCanvas,0,0);
		}
	}
	,gl: function(gl) {
	}
	,hide: function(isHidden) {
		if(isHidden == null) {
			isHidden = true;
		}
		this.isGroupHidden = isHidden;
	}
	,test: function() {
		haxe_Log.trace("test if casting works",{ fileName : "sketcher/draw/Group.hx", lineNumber : 161, className : "sketcher.draw.Group", methodName : "test"});
	}
	,getHeight: function() {
		var _g = 0;
		var _g1 = this.get_arr().length;
		while(_g < _g1) {
			var i = _g++;
			var group = this.get_arr()[i];
			var _g2 = 0;
			var _g3 = (js_Boot.__cast(group , sketcher_draw_Group)).get_arr().length;
			while(_g2 < _g3) {
				var j = _g2++;
				var sh = (js_Boot.__cast(group , sketcher_draw_Group)).get_arr()[j];
				var tmp = sh.type == "rectangle";
			}
		}
		return "WIP group.getHeight()";
	}
	,get_arr: function() {
		return this.arr;
	}
	,set_arr: function(value) {
		return this.arr = value;
	}
	,__class__: sketcher_draw_Group
	,__properties__: $extend(sketcher_draw_Base.prototype.__properties__,{set_arr:"set_arr",get_arr:"get_arr"})
});
var sketcher_draw_Image = function(x,y,href,width,height,isCenter) {
	if(isCenter == null) {
		isCenter = false;
	}
	this.type = "image";
	this.set_x(x);
	this.set_y(y);
	this.set_href(href);
	this.set_width(width);
	this.set_height(height);
	this.set_isCenter(isCenter);
	sketcher_draw_Base.call(this,"image");
};
sketcher_draw_Image.__name__ = "sketcher.draw.Image";
sketcher_draw_Image.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Image.__super__ = sketcher_draw_Base;
sketcher_draw_Image.prototype = $extend(sketcher_draw_Base.prototype,{
	svg: function(settings) {
		if(this.get_isCenter()) {
			this.set_x(this.get_x() - this.get_width() / 2);
			this.set_y(this.get_y() - this.get_height() / 2);
		}
		this.xml.set("x",Std.string(this.get_x()));
		this.xml.set("y",Std.string(this.get_y()));
		if(this.get_href() != "") {
			this.xml.set("href",Std.string(this.get_href()));
		} else {
			this.xml.set("href",Std.string(this.get_image().src));
		}
		this.xml.set("width",Std.string(this.get_width()));
		this.xml.set("height",Std.string(this.get_height()));
		if(this.getTransform() != "") {
			this.xml.set("transform",this.getTransform());
		}
		return haxe_xml_Printer.print(this.xml);
	}
	,ctx: function(ctx) {
		var _gthis = this;
		this.useDefaultsCanvas();
		ctx.imageSmoothingEnabled = true;
		ctx.imageSmoothingQuality = "high";
		var img = new Image();
		img.onload = function() {
			_gthis.canvasImage(ctx,img);
		};
		img.onerror = function(e) {
			$global.console.warn(e);
		};
		if(this.get_href() == "") {
			img = this.get_image();
			this.canvasImage(ctx,img);
		} else {
			img.src = this.get_href();
		}
	}
	,canvasImage: function(ctx,img) {
		var ratio = img.height / img.width;
		if(this.get_rotate() != null) {
			ctx.save();
			ctx.translate(this.get_x(),this.get_y());
			ctx.rotate(sketcher_util_MathUtil.radians(this.get_rotate()));
			if(this.get_move() != null) {
				ctx.translate(this.get_move().x,this.get_move().y);
			}
			if(this.get_isCenter()) {
				ctx.drawImage(img,-(this.get_width() * 0),-(this.get_height() * ratio),this.get_width(),this.get_height() * ratio);
			} else {
				ctx.drawImage(img,0,0,this.get_width(),this.get_height() * ratio);
			}
			ctx.restore();
		}
		if(this.get_rotate() == null) {
			if(this.get_isCenter()) {
				this.set_x(this.get_x() - this.get_width() / 2);
				this.set_y(this.get_y() - this.get_height() * ratio / 2);
				ctx.drawImage(img,this.get_x(),this.get_y(),this.get_width(),this.get_height() * ratio);
			} else {
				ctx.drawImage(img,this.get_x(),this.get_y(),this.get_width(),this.get_height() * ratio);
			}
		}
	}
	,gl: function(gl) {
	}
	,get_href: function() {
		return this.href;
	}
	,set_href: function(value) {
		return this.href = value;
	}
	,get_width: function() {
		return this.width;
	}
	,set_width: function(value) {
		return this.width = value;
	}
	,get_height: function() {
		return this.height;
	}
	,set_height: function(value) {
		return this.height = value;
	}
	,get_isCenter: function() {
		return this.isCenter;
	}
	,set_isCenter: function(value) {
		return this.isCenter = value;
	}
	,get_image: function() {
		return this.image;
	}
	,set_image: function(value) {
		return this.image = value;
	}
	,get_preserveAspectRatio: function() {
		return this.preserveAspectRatio;
	}
	,set_preserveAspectRatio: function(value) {
		return this.preserveAspectRatio = value;
	}
	,__class__: sketcher_draw_Image
	,__properties__: $extend(sketcher_draw_Base.prototype.__properties__,{set_image:"set_image",get_image:"get_image",set_isCenter:"set_isCenter",get_isCenter:"get_isCenter",set_preserveAspectRatio:"set_preserveAspectRatio",get_preserveAspectRatio:"get_preserveAspectRatio",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_href:"set_href",get_href:"get_href"})
});
var sketcher_draw_Line = function(x,y,x2,y2) {
	this.type = "Line";
	this.set_x(x);
	this.set_y(y);
	this.set_x2(x2);
	this.set_y2(y2);
	sketcher_draw_Base.call(this,"line");
};
sketcher_draw_Line.__name__ = "sketcher.draw.Line";
sketcher_draw_Line.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Line.__super__ = sketcher_draw_Base;
sketcher_draw_Line.prototype = $extend(sketcher_draw_Base.prototype,{
	svg: function(settings) {
		this.xml.set("x1",Std.string(this.get_x()));
		this.xml.set("y1",Std.string(this.get_y()));
		this.xml.set("x2",Std.string(this.get_x2()));
		this.xml.set("y2",Std.string(this.get_y2()));
		if(this.get_stroke() != null) {
			this.xml.set("stroke",this.get_stroke());
		}
		if(this.get_lineWeight() != null) {
			this.xml.set("stroke-width",Std.string(this.get_lineWeight()));
		}
		if(this.getTransform() != "") {
			this.xml.set("transform",this.getTransform());
		}
		return haxe_xml_Printer.print(this.xml);
	}
	,ctx: function(ctx) {
		this.useDefaultsCanvas();
		if(this.get_lineCap() != null) {
			ctx.lineCap = this.get_lineCap();
		}
		ctx.lineWidth = this.get_lineWeight();
		var value = this.get_fillColor();
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var _fillColor_r = _r;
		var _fillColor_g = _g;
		var _fillColor_b = _b;
		var _fillColor_a = _a;
		ctx.fillStyle = sketcher_util_ColorUtil.getColour(_fillColor_r,_fillColor_g,_fillColor_b,this.get_fillOpacity());
		var value = this.get_strokeColor();
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var _strokeColor_r = _r;
		var _strokeColor_g = _g;
		var _strokeColor_b = _b;
		var _strokeColor_a = _a;
		ctx.strokeStyle = sketcher_util_ColorUtil.getColour(_strokeColor_r,_strokeColor_g,_strokeColor_b,this.get_strokeOpacity());
		if(this.get_dash() != null) {
			ctx.setLineDash(this.get_dash());
		}
		ctx.beginPath();
		ctx.moveTo(this.get_x(),this.get_y());
		ctx.lineTo(this.get_x2(),this.get_y2());
		if(this.get_fill() != null) {
			ctx.fill();
		}
		if(this.get_stroke() != null && this.get_lineWeight() != 0) {
			ctx.stroke();
		}
	}
	,gl: function(gl) {
	}
	,get_x2: function() {
		return this.x2;
	}
	,set_x2: function(value) {
		return this.x2 = value;
	}
	,get_y2: function() {
		return this.y2;
	}
	,set_y2: function(value) {
		return this.y2 = value;
	}
	,__class__: sketcher_draw_Line
	,__properties__: $extend(sketcher_draw_Base.prototype.__properties__,{set_y2:"set_y2",get_y2:"get_y2",set_x2:"set_x2",get_x2:"get_x2"})
});
var sketcher_draw_Marker = function(arr) {
	this.refY = 0;
	this.refX = 0;
	this.height = 10;
	this.width = 10;
	this.type = "marker";
	this.set_arr(arr);
	sketcher_draw_Base.call(this,"marker");
};
sketcher_draw_Marker.__name__ = "sketcher.draw.Marker";
sketcher_draw_Marker.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Marker.__super__ = sketcher_draw_Base;
sketcher_draw_Marker.prototype = $extend(sketcher_draw_Base.prototype,{
	svg: function(settings) {
		this.xml.set("markerWidth","" + this.get_width());
		this.xml.set("markerHeight","" + this.get_height());
		this.xml.set("refX","" + this.get_refX());
		this.xml.set("refY","" + this.get_refY());
		this.xml.set("orient","auto");
		var comment = Xml.createComment("Marker: " + this.get_id());
		this.xml.addChild(comment);
		var _g = 0;
		var _g1 = this.get_arr().length;
		while(_g < _g1) {
			var i = _g++;
			var base = this.get_arr()[i];
			this.xml.addChild(Xml.parse(base.svg(null)));
		}
		return haxe_xml_Printer.print(this.xml);
	}
	,ctx: function(ctx) {
		if(!sketcher_draw_Marker.ISWARN) {
			$global.console.warn("Marker doens't work for canvas");
			sketcher_draw_Marker.ISWARN = true;
		}
	}
	,gl: function(gl) {
	}
	,get_arr: function() {
		return this.arr;
	}
	,set_arr: function(value) {
		return this.arr = value;
	}
	,get_width: function() {
		return this.width;
	}
	,set_width: function(value) {
		return this.width = value;
	}
	,get_height: function() {
		return this.height;
	}
	,set_height: function(value) {
		return this.height = value;
	}
	,get_refX: function() {
		return this.refX;
	}
	,set_refX: function(value) {
		return this.refX = value;
	}
	,get_refY: function() {
		return this.refY;
	}
	,set_refY: function(value) {
		return this.refY = value;
	}
	,__class__: sketcher_draw_Marker
	,__properties__: $extend(sketcher_draw_Base.prototype.__properties__,{set_refY:"set_refY",get_refY:"get_refY",set_refX:"set_refX",get_refX:"get_refX",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_arr:"set_arr",get_arr:"get_arr"})
});
var sketcher_draw_Mask = function(arr) {
	this.type = "mask";
	this.set_arr(arr);
	sketcher_draw_Base.call(this,"mask");
};
sketcher_draw_Mask.__name__ = "sketcher.draw.Mask";
sketcher_draw_Mask.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Mask.__super__ = sketcher_draw_Base;
sketcher_draw_Mask.prototype = $extend(sketcher_draw_Base.prototype,{
	svg: function(settings) {
		this.xml.set("x","0");
		this.xml.set("y","0");
		this.xml.set("width",Std.string(Globals.w));
		this.xml.set("height",Std.string(Globals.h));
		var comment = Xml.createComment("Mask: " + this.get_id());
		this.xml.addChild(comment);
		var _g = 0;
		var _g1 = this.get_arr().length;
		while(_g < _g1) {
			var i = _g++;
			var base = this.get_arr()[i];
			(js_Boot.__cast(base , sketcher_draw_Base)).noStroke().setFill("#FFFFFF");
			this.xml.addChild(Xml.parse(base.svg(null)));
		}
		return haxe_xml_Printer.print(this.xml);
	}
	,ctx: function(ctx) {
		if(!sketcher_draw_Mask.ISWARN) {
			$global.console.warn("Mask doens't work the same as svg, use with care");
			sketcher_draw_Mask.ISWARN = true;
		}
		ctx.save();
		var _g = 0;
		var _g1 = this.get_arr().length;
		while(_g < _g1) {
			var i = _g++;
			var base = this.get_arr()[i];
			if(base == null) {
				continue;
			}
			$global.console.info(this.get_id() + " --> " + base.type);
			base.ctx(ctx);
		}
		ctx.clip();
		ctx.restore();
	}
	,gl: function(gl) {
	}
	,get_arr: function() {
		return this.arr;
	}
	,set_arr: function(value) {
		return this.arr = value;
	}
	,__class__: sketcher_draw_Mask
	,__properties__: $extend(sketcher_draw_Base.prototype.__properties__,{set_arr:"set_arr",get_arr:"get_arr"})
});
var sketcher_draw_Mirror = function(dir) {
	this.baseArray = [];
	this.type = "mirror";
	if(dir == null) {
		dir = "right";
	}
	this.dir = dir;
	sketcher_draw_Base.call(this,"mirror");
};
sketcher_draw_Mirror.__name__ = "sketcher.draw.Mirror";
sketcher_draw_Mirror.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Mirror.__super__ = sketcher_draw_Base;
sketcher_draw_Mirror.prototype = $extend(sketcher_draw_Base.prototype,{
	svg: function(settings) {
		if(!sketcher_draw_Mirror.ISWARN) {
			$global.console.warn("Mirror doens't work the same as canvas, use with care");
			sketcher_draw_Mirror.ISWARN = true;
		}
		var _g = 0;
		var _g1 = this.baseArray.length;
		while(_g < _g1) {
			var i = _g++;
			var _baseArray = this.baseArray[i];
		}
		return haxe_xml_Printer.print(this.xml);
	}
	,ctx: function(ctx) {
		if(!sketcher_draw_Mirror.ISWARN) {
			$global.console.warn("Mirror works only for the right part of the sketch");
			sketcher_draw_Mirror.ISWARN = true;
		}
		var _y = 0;
		var _y2 = Globals.h / 2;
		var _x = 0;
		var _x2 = Globals.w / 2;
		var _w = Globals.w / 2;
		var _h = Globals.h / 2;
		ctx.save();
		ctx.translate(_x2,_y);
		ctx.scale(-1,1);
		ctx.clearRect(0,0,Globals.w,Globals.h);
		ctx.drawImage(ctx.canvas,_x2,_y,Globals.w,Globals.h,0,0,Globals.w,Globals.h);
		ctx.restore();
	}
	,gl: function(gl) {
	}
	,__class__: sketcher_draw_Mirror
});
var sketcher_draw_Path = function(x,y) {
	this.type = "Path";
	this.dArray = [];
	this.moveTo(x,y);
	sketcher_draw_Base.call(this,"path");
};
sketcher_draw_Path.__name__ = "sketcher.draw.Path";
sketcher_draw_Path.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Path.__super__ = sketcher_draw_Base;
sketcher_draw_Path.prototype = $extend(sketcher_draw_Base.prototype,{
	svg: function(settings) {
		var str = "";
		var _g = 0;
		var _g1 = this.dArray;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			str += i;
		}
		this.xml.set("d",str);
		return haxe_xml_Printer.print(this.xml);
	}
	,ctx: function(ctx) {
		ctx.beginPath();
		ctx.fill();
		ctx.stroke();
	}
	,gl: function(gl) {
	}
	,window: function(x,y,width,height,x2,y2,width2,height2) {
		this.dArray = [];
		this.set_id("passe-partout " + this.get_count());
		this.dArray.push("M" + x + "," + y);
		this.dArray.push("V" + (y + height));
		this.dArray.push("H" + (x + width));
		this.dArray.push("V" + y);
		this.dArray.push("Z");
		this.dArray.push("M" + (x2 + width2) + "," + (y2 + height2));
		this.dArray.push("H" + x2);
		this.dArray.push("V" + y2);
		this.dArray.push("H" + (x2 + width2));
		this.dArray.push("Z");
	}
	,moveTo: function(x,y) {
		this.dArray.push("M" + x + ", " + y + " ");
	}
	,lineTo: function(x,y) {
		this.dArray.push("L" + x + ", " + y + " ");
	}
	,horizontalLineTo: function(x) {
		this.dArray.push("H" + x + " ");
	}
	,verticalLineTo: function(y) {
		this.dArray.push("V" + y + " ");
	}
	,curveto: function(x1,y1,x2,y2,x,y) {
		this.dArray.push("C" + x1 + ", " + y1 + " " + x2 + ", " + y2 + " " + x + ", " + y + " ");
	}
	,closepath: function() {
		this.dArray.push("Z ");
	}
	,__class__: sketcher_draw_Path
});
var sketcher_draw_PolyLine = function(arr) {
	this.type = "PolyLine";
	this.set_arr(arr);
	sketcher_draw_Base.call(this,"polyline");
};
sketcher_draw_PolyLine.__name__ = "sketcher.draw.PolyLine";
sketcher_draw_PolyLine.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_PolyLine.__super__ = sketcher_draw_Base;
sketcher_draw_PolyLine.prototype = $extend(sketcher_draw_Base.prototype,{
	svg: function(settings) {
		if(this.get_desc() != "") {
			this.xml.addChild(Xml.parse("<desc>" + this.get_desc() + "</desc>"));
		}
		var str = "";
		var _g = 0;
		var _g1 = this.get_arr().length;
		while(_g < _g1) {
			var i = _g++;
			var value = this.get_arr()[i];
			str += "" + value + " ";
		}
		this.xml.set("points",str);
		if(this.getTransform() != "") {
			this.xml.set("transform",this.getTransform());
		}
		return haxe_xml_Printer.print(this.xml);
	}
	,ctx: function(ctx) {
		this.useDefaultsCanvas();
		if(this.get_lineCap() != null) {
			ctx.lineCap = this.get_lineCap();
		}
		if(this.get_lineJoin() != null) {
			ctx.lineJoin = this.get_lineJoin();
		}
		ctx.lineWidth = this.get_lineWeight();
		var value = this.get_fillColor();
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var _fillColor_r = _r;
		var _fillColor_g = _g;
		var _fillColor_b = _b;
		var _fillColor_a = _a;
		ctx.fillStyle = sketcher_util_ColorUtil.getColour(_fillColor_r,_fillColor_g,_fillColor_b,this.get_fillOpacity());
		var value = this.get_strokeColor();
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var _strokeColor_r = _r;
		var _strokeColor_g = _g;
		var _strokeColor_b = _b;
		var _strokeColor_a = _a;
		ctx.strokeStyle = sketcher_util_ColorUtil.getColour(_strokeColor_r,_strokeColor_g,_strokeColor_b,this.get_strokeOpacity());
		if(this.get_dash() != null) {
			ctx.setLineDash(this.get_dash());
		}
		ctx.beginPath();
		var _pointArray = this.convertArr();
		var _g = 0;
		var _g1 = _pointArray.length;
		while(_g < _g1) {
			var i = _g++;
			var p = _pointArray[i];
			if(i == 0) {
				ctx.moveTo(p.x,p.y);
			} else {
				ctx.lineTo(p.x,p.y);
			}
		}
		if(this.get_fill() != null) {
			ctx.fill();
		}
		if(this.get_stroke() != null && this.get_lineWeight() != 0) {
			ctx.stroke();
		}
	}
	,gl: function(gl) {
	}
	,convertArr: function() {
		var _pointArray = [];
		var _g = 0;
		var _g1 = this.get_arr().length;
		while(_g < _g1) {
			var i = _g++;
			if(i % 2 == 0) {
				var x = this.get_arr()[i];
				var y = this.get_arr()[i + 1];
				_pointArray.push({ x : x, y : y});
			}
		}
		return _pointArray;
	}
	,get_arr: function() {
		return this.arr;
	}
	,set_arr: function(value) {
		return this.arr = value;
	}
	,__class__: sketcher_draw_PolyLine
	,__properties__: $extend(sketcher_draw_Base.prototype.__properties__,{set_arr:"set_arr",get_arr:"get_arr"})
});
var sketcher_draw_Polygon = function(arr) {
	this.height = null;
	this.width = null;
	this.type = "Polygon";
	this.set_arr(arr);
	this.calculateSize();
	sketcher_draw_Base.call(this,"polygon");
};
sketcher_draw_Polygon.__name__ = "sketcher.draw.Polygon";
sketcher_draw_Polygon.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Polygon.__super__ = sketcher_draw_Base;
sketcher_draw_Polygon.prototype = $extend(sketcher_draw_Base.prototype,{
	calculateSize: function() {
		if(this.get_arrPoint() == null) {
			this.set_arrPoint(this.convertArr());
		}
		var lt = { x : null, y : null};
		var rt = { x : null, y : null};
		var lb = { x : null, y : null};
		var rb = { x : null, y : null};
		var _g = 0;
		var _g1 = this.get_arrPoint().length;
		while(_g < _g1) {
			var i = _g++;
			var p = this.get_arrPoint()[i];
			if(lt.x == null) {
				lt = { x : p.x, y : p.y};
			}
			if(rt.x == null) {
				rt = { x : p.x, y : p.y};
			}
			if(lb.x == null) {
				lb = { x : p.x, y : p.y};
			}
			if(rb.x == null) {
				rb = { x : p.x, y : p.y};
			}
			if(p.x <= lt.x) {
				lt.x = p.x;
			}
			if(p.y <= lt.y) {
				lt.y = p.y;
			}
			if(p.x >= rt.x) {
				rt.x = p.x;
			}
			if(p.y <= rt.y) {
				rt.y = p.y;
			}
			if(p.x <= lb.x) {
				lb.x = p.x;
			}
			if(p.y >= lb.y) {
				lb.y = p.y;
			}
			if(p.x >= rb.x) {
				rb.x = p.x;
			}
			if(p.y >= rb.y) {
				rb.y = p.y;
			}
		}
		this.set_x(lt.x);
		this.set_y(lt.y);
		this.width = rt.x - lt.x;
		this.height = rb.y - rt.y;
		this.cx = lt.x + this.width / 2;
		this.cy = lt.y + this.height / 2;
		this.point_top_left = lt;
		this.point_top_right = rt;
		this.point_bottom_left = lb;
		this.point_bottom_right = rb;
	}
	,svg: function(settings) {
		this.calculateSize();
		var str = "";
		var _g = 0;
		var _g1 = this.get_arr().length;
		while(_g < _g1) {
			var i = _g++;
			var value = this.get_arr()[i];
			str += "" + value + " ";
		}
		this.xml.set("points",str);
		if(this.getTransform() != "") {
			this.xml.set("transform",this.getTransform());
		}
		return haxe_xml_Printer.print(this.xml);
	}
	,ctx: function(ctx) {
		if(!sketcher_draw_Polygon.ISWARN) {
			$global.console.groupCollapsed("Polygon (" + this.get_id() + ") info canvas");
			$global.console.warn("doesn't work\n- move\n- rotate (for weird shapes, works for sides)\n- lineJoin");
			$global.console.groupEnd();
			sketcher_draw_Polygon.ISWARN = true;
		}
		this.useDefaultsCanvas();
		if(this.get_lineCap() != null) {
			ctx.lineCap = this.get_lineCap();
		}
		ctx.lineWidth = this.get_lineWeight();
		var value = this.get_fillColor();
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var _fillColor_r = _r;
		var _fillColor_g = _g;
		var _fillColor_b = _b;
		var _fillColor_a = _a;
		ctx.fillStyle = sketcher_util_ColorUtil.getColour(_fillColor_r,_fillColor_g,_fillColor_b,this.get_fillOpacity());
		var value = this.get_strokeColor();
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var _strokeColor_r = _r;
		var _strokeColor_g = _g;
		var _strokeColor_b = _b;
		var _strokeColor_a = _a;
		ctx.strokeStyle = sketcher_util_ColorUtil.getColour(_strokeColor_r,_strokeColor_g,_strokeColor_b,this.get_strokeOpacity());
		if(this.get_dash() != null) {
			ctx.setLineDash(this.get_dash());
		}
		ctx.beginPath();
		var _pointArray = this.convertArr();
		if(this.get_rotate() != null) {
			ctx.save();
			ctx.translate(this.get_rx(),this.get_ry());
			ctx.rotate(sketcher_util_MathUtil.radians(this.get_rotate()));
			var _g = 0;
			var _g1 = _pointArray.length;
			while(_g < _g1) {
				var i = _g++;
				var p = _pointArray[i];
				if(i == 0) {
					ctx.moveTo(p.x - this.get_rx(),p.y - this.get_ry());
				} else {
					ctx.lineTo(p.x - this.get_rx(),p.y - this.get_ry());
				}
			}
			ctx.restore();
		} else {
			var _g = 0;
			var _g1 = _pointArray.length;
			while(_g < _g1) {
				var i = _g++;
				var p = _pointArray[i];
				if(i == 0) {
					ctx.moveTo(p.x,p.y);
				} else {
					ctx.lineTo(p.x,p.y);
				}
			}
		}
		ctx.closePath();
		if(this.get_fill() != null) {
			ctx.fill();
		}
		if(this.get_stroke() != null && this.get_lineWeight() != 0) {
			ctx.stroke();
		}
	}
	,gl: function(gl) {
	}
	,convertArr: function() {
		var _pointArray = [];
		var _g = 0;
		var _g1 = this.get_arr().length;
		while(_g < _g1) {
			var i = _g++;
			if(i % 2 == 0) {
				var x = this.get_arr()[i];
				var y = this.get_arr()[i + 1];
				_pointArray.push({ x : x, y : y});
			}
		}
		return _pointArray;
	}
	,getPoint: function(id) {
		if(id * 2 > this.get_arr().length) {
			haxe_Log.trace("not in this length",{ fileName : "sketcher/draw/Polygon.hx", lineNumber : 230, className : "sketcher.draw.Polygon", methodName : "getPoint"});
		}
		var p = { x : this.get_arr()[id * 2], y : this.get_arr()[id * 2 + 1]};
		return p;
	}
	,sides: function(x,y,sides,size,rotateDegree) {
		this.set_arr([]);
		this.set_rx(x);
		this.set_ry(y);
		if(rotateDegree == null) {
			rotateDegree = 0;
		} else {
			rotateDegree = sketcher_util_MathUtil.radians(rotateDegree);
		}
		var _g = 0;
		var _g1 = sides;
		while(_g < _g1) {
			var i = _g++;
			var _x = x + size * Math.cos(rotateDegree + i * (2 * Math.PI) / sides);
			var _y = y + size * Math.sin(rotateDegree + i * (2 * Math.PI) / sides);
			this.get_arr().push(_x);
			this.get_arr().push(_y);
		}
	}
	,get_arr: function() {
		return this.arr;
	}
	,set_arr: function(value) {
		return this.arr = value;
	}
	,get_arrPoint: function() {
		return this.arrPoint;
	}
	,set_arrPoint: function(value) {
		return this.arrPoint = value;
	}
	,__class__: sketcher_draw_Polygon
	,__properties__: $extend(sketcher_draw_Base.prototype.__properties__,{set_arrPoint:"set_arrPoint",get_arrPoint:"get_arrPoint",set_arr:"set_arr",get_arr:"get_arr"})
});
var sketcher_draw_Rectangle = function(x,y,width,height,isCenter) {
	if(isCenter == null) {
		isCenter = true;
	}
	this.type = "rectangle";
	this.set_x(x);
	this.set_y(y);
	this.set_width(width);
	this.set_height(height);
	this.cx = this.get_x() - this.get_width() / 2;
	this.cy = this.get_y() - this.get_height() / 2;
	this.isCenter = isCenter;
	if(!isCenter) {
		this.cx = this.get_x();
		this.cy = this.get_y();
	}
	this.point_top_left = { x : this.cx, y : this.cy};
	this.point_top_right = { x : this.cx + this.get_width(), y : this.cy};
	this.point_bottom_left = { x : this.cx, y : this.cy + this.get_height()};
	this.point_bottom_right = { x : this.cx + this.get_width(), y : this.cy + this.get_height()};
	sketcher_draw_Base.call(this,"rect");
};
sketcher_draw_Rectangle.__name__ = "sketcher.draw.Rectangle";
sketcher_draw_Rectangle.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Rectangle.__super__ = sketcher_draw_Base;
sketcher_draw_Rectangle.prototype = $extend(sketcher_draw_Base.prototype,{
	svg: function(settings) {
		this.xml.set("x",Std.string(this.cx));
		this.xml.set("y",Std.string(this.cy));
		this.xml.set("width",Std.string(this.get_width()));
		this.xml.set("height",Std.string(this.get_height()));
		if(this.get_radius() != null) {
			this.xml.set("rx",Std.string(this.get_radius()));
			this.xml.set("ry",Std.string(this.get_radius()));
		}
		if(this.getTransform() != "") {
			this.xml.set("transform",this.getTransform());
		}
		return haxe_xml_Printer.print(this.xml);
	}
	,useCanvasShadow: function(ctx) {
		if(this.get_shadowColor() != null) {
			ctx.shadowColor = this.get_shadowColor();
			ctx.shadowBlur = this.get_shadowBlur();
			ctx.shadowOffsetX = this.get_shadowOffsetX();
			ctx.shadowOffsetY = this.get_shadowOffsetY();
		}
	}
	,ctx: function(ctx) {
		this.useDefaultsCanvas();
		if(this.get_lineCap() != null) {
			ctx.lineCap = this.get_lineCap();
		}
		ctx.lineWidth = this.get_lineWeight();
		var value = this.get_fillColor();
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var _fillColor_r = _r;
		var _fillColor_g = _g;
		var _fillColor_b = _b;
		var _fillColor_a = _a;
		ctx.fillStyle = sketcher_util_ColorUtil.getColour(_fillColor_r,_fillColor_g,_fillColor_b,this.get_fillOpacity());
		var value = this.get_strokeColor();
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var _strokeColor_r = _r;
		var _strokeColor_g = _g;
		var _strokeColor_b = _b;
		var _strokeColor_a = _a;
		ctx.strokeStyle = sketcher_util_ColorUtil.getColour(_strokeColor_r,_strokeColor_g,_strokeColor_b,this.get_strokeOpacity());
		if(this.get_dash() != null) {
			ctx.setLineDash(this.get_dash());
		}
		ctx.beginPath();
		if(this.get_rotate() != null && this.get_move() == null) {
			ctx.save();
			ctx.translate(this.get_x(),this.get_y());
			ctx.rotate(sketcher_util_MathUtil.radians(this.get_rotate()));
			ctx.rect(-(this.get_width() / 2),-(this.get_height() / 2),this.get_width(),this.get_height());
			ctx.restore();
		}
		if(this.get_move() != null && this.get_rotate() == null) {
			ctx.save();
			ctx.translate(this.cx,this.cy);
			ctx.translate(this.get_move().x,this.get_move().y);
			ctx.rect(0,0,this.get_width(),this.get_height());
			ctx.restore();
		}
		if(this.get_rotate() == null && this.get_move() == null) {
			this.buildCanvasShape(ctx);
		}
		if(this.get_fill() != null) {
			ctx.fill();
		}
		if(this.get_stroke() != null && this.get_lineWeight() != 0) {
			ctx.stroke();
		}
	}
	,buildCanvasShape: function(ctx) {
		if(this.get_radius() == null) {
			ctx.rect(this.cx,this.cy,this.get_width(),this.get_height());
		} else {
			var radius_tl = this.get_radius();
			var radius_tr = this.get_radius();
			var radius_br = this.get_radius();
			var radius_bl = this.get_radius();
			ctx.moveTo(this.cx + radius_tl,this.cy);
			ctx.lineTo(this.cx + this.get_width() - radius_tr,this.cy);
			ctx.quadraticCurveTo(this.cx + this.get_width(),this.cy,this.cx + this.get_width(),this.cy + radius_tr);
			ctx.lineTo(this.cx + this.get_width(),this.cy + this.get_height() - radius_br);
			ctx.quadraticCurveTo(this.cx + this.get_width(),this.cy + this.get_height(),this.cx + this.get_width() - radius_br,this.cy + this.get_height());
			ctx.lineTo(this.cx + radius_bl,this.cy + this.get_height());
			ctx.quadraticCurveTo(this.cx,this.cy + this.get_height(),this.cx,this.cy + this.get_height() - radius_bl);
			ctx.lineTo(this.cx,this.cy + radius_tl);
			ctx.quadraticCurveTo(this.cx,this.cy,this.cx + radius_tl,this.cy);
			ctx.closePath();
		}
	}
	,gl: function(gl) {
		if(!sketcher_draw_Rectangle.ISWARN) {
			$global.console.warn("webgl is not implemented yet");
			sketcher_draw_Rectangle.ISWARN = true;
		}
		var c = "#ff3333";
		var value = c;
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var rgba_r = _r;
		var rgba_g = _g;
		var rgba_b = _b;
		var rgba_a = _a;
		gl.viewport(0,0,gl.drawingBufferWidth,gl.drawingBufferHeight);
		gl.clearColor(rgba_r / 255,rgba_g / 255,rgba_b / 255,rgba_a);
		gl.clear(16384);
	}
	,get_radius: function() {
		return this.radius;
	}
	,set_radius: function(value) {
		return this.radius = value;
	}
	,get_width: function() {
		return this.width;
	}
	,set_width: function(value) {
		return this.width = value;
	}
	,get_height: function() {
		return this.height;
	}
	,set_height: function(value) {
		return this.height = value;
	}
	,__class__: sketcher_draw_Rectangle
	,__properties__: $extend(sketcher_draw_Base.prototype.__properties__,{set_radius:"set_radius",get_radius:"get_radius",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width"})
});
var sketcher_draw_Text = function(str,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.width = -1;
	this.lineHeight = 0;
	this.fitWidth = 0;
	this.type = "Text";
	this.set_str(str);
	this.set_x(x);
	this.set_y(y);
	sketcher_draw_Base.call(this,"text");
};
sketcher_draw_Text.__name__ = "sketcher.draw.Text";
sketcher_draw_Text.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Text.__super__ = sketcher_draw_Base;
sketcher_draw_Text.prototype = $extend(sketcher_draw_Base.prototype,{
	align: function(value) {
		this.set_textAlign(value);
	}
	,baseline: function(value) {
		this.set_textBaseline(value);
	}
	,getWidth: function() {
		if(!sketcher_draw_Text.ISWARN) {
			$global.console.warn("Get Width of text doens't work for svg currenlty");
			sketcher_draw_Text.ISWARN = true;
		}
		var ctx = Sketcher.ctx;
		var _css = "";
		var _font = StringTools.ltrim("" + _css + " " + this.get_fontSizePx() + "px " + this.get_fontFamily());
		ctx.font = _font;
		return ctx.measureText(this.get_str()).width;
	}
	,svg: function(settings) {
		var comment = Xml.createComment("" + StringTools.replace(this.get_str(),"--","__"));
		var content = Xml.parse(this.get_str());
		this.xml.addChild(comment);
		this.xml.addChild(content);
		this.xml.set("x",Std.string(this.get_x()));
		this.xml.set("y",Std.string(this.get_y()));
		if(this.get_textAlign() != null) {
			this.xml.set("text-anchor",this.convertTextAlign("svg"));
		}
		if(this.get_textBaseline() != null) {
			this.xml.set("dominant-baseline",this.convertTextBaseline("svg"));
		}
		if(this.get_style() != null) {
			var className = StringTools.replace(StringTools.replace(this.get_str()," ",""),"\n","").toLowerCase();
			this.xml.set("class","fontstyle_" + className);
			var style = window.document.createElement("style");
			style.innerHTML = ".fontstyle_" + className + " {" + this.get_style() + "}";
			window.document.body.appendChild(style);
		}
		if(this.getTransform() != "") {
			this.xml.set("transform",this.getTransform());
		}
		return haxe_xml_Printer.print(this.xml);
	}
	,ctx: function(ctx) {
		this.useDefaultsCanvas();
		ctx.save();
		var value = this.get_fillColor();
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var _fillColor_r = _r;
		var _fillColor_g = _g;
		var _fillColor_b = _b;
		var _fillColor_a = _a;
		ctx.fillStyle = sketcher_util_ColorUtil.getColour(_fillColor_r,_fillColor_g,_fillColor_b,this.get_fillOpacity());
		if(this.get_fontFamily() == null) {
			this.set_fontFamily("Arial");
		}
		if(this.get_fontSize() == null) {
			this.set_fontSize("16px");
		}
		if(this.get_fontSizePx() != null) {
			this.set_fontSize("" + this.get_fontSizePx());
		}
		var _css = "";
		var _font = StringTools.ltrim("" + _css + " " + Std.parseInt(this.get_fontSize()) + "px " + this.get_fontFamily());
		ctx.font = _font;
		if(this.get_textAlign() != null) {
			ctx.textAlign = this.convertTextAlign("canvas");
		}
		if(this.get_textBaseline() != null) {
			ctx.textBaseline = this.convertTextBaseline("canvas");
		}
		var lines = [];
		var lineheight = this.get_lineHeight() != 0 ? this.get_lineHeight() : ctx.measureText("M").width * 1.7;
		if(this.get_fitWidth() != 0) {
			var words = this.get_str().split(" ");
			$global.console.log("doesnt work yet");
			var count = 0;
			var sentance = "";
			while(ctx.measureText(sentance).width <= this.get_fitWidth()) {
				sentance += words[count] + " ";
				++count;
			}
			lines.push(sentance);
			haxe_Log.trace(sentance,{ fileName : "sketcher/draw/Text.hx", lineNumber : 237, className : "sketcher.draw.Text", methodName : "ctx"});
		} else {
			lines = this.get_str().split("\n");
		}
		var _g = 0;
		var _g1 = lines.length;
		while(_g < _g1) {
			var i = _g++;
			var line = lines[i];
			ctx.fillText(line,this.get_x(),this.get_y() + i * lineheight);
		}
		ctx.restore();
	}
	,gl: function(gl) {
	}
	,setFontfamilyMono: function() {
		this.xml.set("font-family","monospace");
	}
	,setFontfamilySans: function() {
		this.xml.set("font-family","Arial, Helvetica, sans-serif");
	}
	,setFontfamilySerif: function() {
		this.xml.set("font-family","serif");
	}
	,convertTextAlign: function(type) {
		var svg = "";
		var canvas = "";
		if(this.get_textAlign() == null) {
			this.set_textAlign(sketcher_draw_TextAlignType.Default);
		}
		switch(this.get_textAlign()._hx_index) {
		case 0:
			canvas = "center";
			svg = "middle";
			break;
		case 1:
			canvas = "left";
			svg = "start";
			break;
		case 2:
			canvas = "right";
			svg = "end";
			break;
		case 3:
			canvas = "start";
			svg = "start";
			break;
		}
		if(type == "svg") {
			return svg;
		} else {
			return canvas;
		}
	}
	,convertTextBaseline: function(type) {
		var str = "";
		var svg = "";
		var canvas = "";
		if(this.get_textBaseline() == null) {
			this.set_textBaseline(sketcher_draw_TextBaselineType.Default);
		}
		switch(this.get_textBaseline()._hx_index) {
		case 0:
			canvas = "hanging";
			svg = "hanging";
			break;
		case 1:
			canvas = "bottom";
			svg = "ideographic";
			break;
		case 2:
			canvas = "middle";
			svg = "middle";
			break;
		case 3:
			canvas = "alphabetic";
			svg = "auto";
			break;
		}
		if(type == "svg") {
			return svg;
		} else {
			return canvas;
		}
	}
	,get_fontSize: function() {
		return this.fontSize;
	}
	,set_fontSize: function(value) {
		this.xml.set("font-size",value);
		return this.fontSize = value;
	}
	,get_fontSizePx: function() {
		return this.fontSizePx;
	}
	,set_fontSizePx: function(value) {
		this.xml.set("font-size","" + value + "px");
		return this.fontSizePx = value;
	}
	,get_fontFamily: function() {
		return this.fontFamily;
	}
	,set_fontFamily: function(value) {
		if(value.indexOf("+") != -1) {
			value = StringTools.replace(value,"+"," ");
		}
		if(value.indexOf(":") != -1) {
			value = value.split(":")[0];
		}
		this.xml.set("font-family",value);
		return this.fontFamily = value;
	}
	,get_fontWeight: function() {
		return this.fontWeight;
	}
	,set_fontWeight: function(value) {
		this.xml.set("font-weight",value);
		return this.fontWeight = value;
	}
	,get_textAlign: function() {
		return this.textAlign;
	}
	,set_textAlign: function(value) {
		return this.textAlign = value;
	}
	,get_textBaseline: function() {
		return this.textBaseline;
	}
	,set_textBaseline: function(value) {
		return this.textBaseline = value;
	}
	,get_str: function() {
		return this.str;
	}
	,set_str: function(value) {
		return this.str = value;
	}
	,get_fitWidth: function() {
		return this.fitWidth;
	}
	,set_fitWidth: function(value) {
		return this.fitWidth = value;
	}
	,get_lineHeight: function() {
		return this.lineHeight;
	}
	,set_lineHeight: function(value) {
		return this.lineHeight = value;
	}
	,get_style: function() {
		return this.style;
	}
	,set_style: function(value) {
		return this.style = value;
	}
	,get_width: function() {
		this.getWidth();
		return this.width;
	}
	,__class__: sketcher_draw_Text
	,__properties__: $extend(sketcher_draw_Base.prototype.__properties__,{get_width:"get_width",set_style:"set_style",get_style:"get_style",set_textAlign:"set_textAlign",get_textAlign:"get_textAlign",set_textBaseline:"set_textBaseline",get_textBaseline:"get_textBaseline",set_fontWeight:"set_fontWeight",get_fontWeight:"get_fontWeight",set_fontFamily:"set_fontFamily",get_fontFamily:"get_fontFamily",set_lineHeight:"set_lineHeight",get_lineHeight:"get_lineHeight",set_fitWidth:"set_fitWidth",get_fitWidth:"get_fitWidth",set_fontSizePx:"set_fontSizePx",get_fontSizePx:"get_fontSizePx",set_fontSize:"set_fontSize",get_fontSize:"get_fontSize",set_str:"set_str",get_str:"get_str"})
});
var sketcher_draw_TextAlignType = $hxEnums["sketcher.draw.TextAlignType"] = { __ename__:true,__constructs__:null
	,Center: {_hx_name:"Center",_hx_index:0,__enum__:"sketcher.draw.TextAlignType",toString:$estr}
	,Left: {_hx_name:"Left",_hx_index:1,__enum__:"sketcher.draw.TextAlignType",toString:$estr}
	,Right: {_hx_name:"Right",_hx_index:2,__enum__:"sketcher.draw.TextAlignType",toString:$estr}
	,Default: {_hx_name:"Default",_hx_index:3,__enum__:"sketcher.draw.TextAlignType",toString:$estr}
};
sketcher_draw_TextAlignType.__constructs__ = [sketcher_draw_TextAlignType.Center,sketcher_draw_TextAlignType.Left,sketcher_draw_TextAlignType.Right,sketcher_draw_TextAlignType.Default];
var sketcher_draw_TextBaselineType = $hxEnums["sketcher.draw.TextBaselineType"] = { __ename__:true,__constructs__:null
	,Top: {_hx_name:"Top",_hx_index:0,__enum__:"sketcher.draw.TextBaselineType",toString:$estr}
	,Bottom: {_hx_name:"Bottom",_hx_index:1,__enum__:"sketcher.draw.TextBaselineType",toString:$estr}
	,Middle: {_hx_name:"Middle",_hx_index:2,__enum__:"sketcher.draw.TextBaselineType",toString:$estr}
	,Default: {_hx_name:"Default",_hx_index:3,__enum__:"sketcher.draw.TextBaselineType",toString:$estr}
};
sketcher_draw_TextBaselineType.__constructs__ = [sketcher_draw_TextBaselineType.Top,sketcher_draw_TextBaselineType.Bottom,sketcher_draw_TextBaselineType.Middle,sketcher_draw_TextBaselineType.Default];
var sketcher_export_FileExport = function() { };
sketcher_export_FileExport.__name__ = "sketcher.export.FileExport";
sketcher_export_FileExport.downloadWebGLImage = function(domElement,isJpg,fileName) {
	if(fileName == null) {
		fileName = "test";
	}
	if(isJpg == null) {
		isJpg = false;
	}
	var imgData;
	var ext = isJpg ? "jpg" : "png";
	try {
		var strDownloadMime = "image/octet-stream";
		var strMime = "image/jpeg";
		imgData = domElement.toDataURL(strMime);
		$global.console.log(imgData);
		sketcher_export_FileExport.saveFile(StringTools.replace(imgData,strMime,strDownloadMime),fileName + ("." + ext));
	} catch( _g ) {
		$global.console.log("Browser does not support taking screenshot of 3d context");
		return;
	}
};
sketcher_export_FileExport.svg2Canvas = function(svg,isJpg,filename,isTransparant) {
	if(isTransparant == null) {
		isTransparant = false;
	}
	if(isJpg == null) {
		isJpg = true;
	}
	var svgW = Std.parseInt(svg.getAttribute("width"));
	var svgH = Std.parseInt(svg.getAttribute("height"));
	var canvas = window.document.createElement("canvas");
	var ctx = canvas.getContext("2d",null);
	canvas.width = svgW;
	canvas.height = svgH;
	var image = new Image();
	image.onload = function() {
		if(isJpg) {
			ctx.fillStyle = "white";
			ctx.fillRect(0,0,canvas.width,canvas.height);
		}
		ctx.drawImage(image,0,0,svgW,svgH);
		sketcher_export_FileExport.downloadImageBg(ctx,isJpg,filename,isTransparant);
	};
	image.onerror = function(e) {
		$global.console.warn(e);
	};
	var tmp = window.btoa(svg.outerHTML);
	image.src = "data:image/svg+xml;base64," + tmp;
};
sketcher_export_FileExport.saveFile = function(strData,fileName) {
	var link = window.document.createElement("a");
	window.document.body.appendChild(link);
	link.href = strData;
	link.download = fileName;
	link.click();
	window.document.body.removeChild(link);
};
sketcher_export_FileExport.downloadImage = function(ctx,isJpg,fileName) {
	if(isJpg == null) {
		isJpg = false;
	}
	if(fileName == null) {
		var hash = $global.location.hash;
		hash = StringTools.replace(hash,"#","").toLowerCase();
		if(hash == "") {
			hash = "image";
		}
		fileName = "" + hash + "-" + new Date().getTime();
	}
	var link = window.document.createElement("a");
	link.href = ctx.canvas.toDataURL(isJpg ? "image/jpeg" : "",1);
	link.download = fileName;
	link.click();
};
sketcher_export_FileExport.onBase64Handler = function(ctx,isJpg) {
	if(isJpg == null) {
		isJpg = false;
	}
	var base64 = ctx.canvas.toDataURL(isJpg ? "image/jpeg" : "",1);
	sketcher_export_FileExport.clipboard(base64);
};
sketcher_export_FileExport.downloadTextFile = function(text,fileName) {
	if(fileName == null) {
		fileName = "CC-txt-" + new Date().getTime() + ".txt";
	}
	var el = window.document.createElement("a");
	el.href = "data:text/plain;charset=utf-8," + encodeURIComponent(text);
	el.download = fileName;
	el.style.display = "none";
	window.document.body.appendChild(el);
	el.click();
	window.document.body.removeChild(el);
};
sketcher_export_FileExport.convertStr2Href = function(str) {
	return "data:text/plain;charset=utf-8," + encodeURIComponent(str);
};
sketcher_export_FileExport.clipboard = function(text) {
	var win = "Ctrl+C";
	var mac = "Cmd+C";
	var copyCombo = win;
	var userAgent = $global.navigator.userAgent;
	var ereg = new EReg("iPhone|iPod|iPad|Android|BlackBerry","i");
	var ismac = ereg.match(userAgent);
	if(ismac) {
		copyCombo = mac;
	}
	window.prompt("Copy to clipboard: " + copyCombo + ", Enter",text);
};
sketcher_export_FileExport.downloadImageBg = function(ctx,isJpg,fileName,isTransparant) {
	if(isTransparant == null) {
		isTransparant = false;
	}
	if(isJpg == null) {
		isJpg = false;
	}
	haxe_Log.trace(ctx,{ fileName : "sketcher/export/FileExport.hx", lineNumber : 166, className : "sketcher.export.FileExport", methodName : "downloadImageBg", customParams : [isJpg,fileName,isTransparant]});
	var canvas = ctx.canvas;
	var ext = isJpg ? "jpg" : "png";
	if(fileName == null) {
		var hash = $global.location.hash;
		hash = StringTools.replace(hash,"#","").toLowerCase();
		if(hash == "") {
			hash = "image";
		}
		fileName = "" + hash + "-" + new Date().getTime();
	}
	var _w = canvas.width;
	var _h = canvas.height;
	if(!isTransparant) {
		var currentCanvas = ctx.canvas;
		var newCanvas = currentCanvas.cloneNode(true);
		var n_ctx = newCanvas.getContext("2d",null);
		n_ctx.fillStyle = "#FFffff";
		n_ctx.fillRect(0,0,newCanvas.width,newCanvas.height);
		n_ctx.drawImage(canvas,0,0);
		ctx.drawImage(newCanvas,0,0);
	}
	var link = window.document.createElement("a");
	link.style.cssText = "display:none";
	link.download = fileName + ("." + ext);
	if(!HTMLCanvasElement.prototype.toBlob) {
		haxe_Log.trace("There is no blob",{ fileName : "sketcher/export/FileExport.hx", lineNumber : 235, className : "sketcher.export.FileExport", methodName : "downloadImageBg"});
		link.href = ctx.canvas.toDataURL(isJpg ? "image/jpeg" : "",1);
		link.click();
		link.remove();
	} else {
		haxe_Log.trace("Attack of the blob",{ fileName : "sketcher/export/FileExport.hx", lineNumber : 241, className : "sketcher.export.FileExport", methodName : "downloadImageBg"});
		ctx.canvas.toBlob(function(blob) {
			link.href = URL.createObjectURL(blob);
			link.click();
			link.remove();
		},isJpg ? "image/jpeg" : "",1);
	}
	window.document.body.appendChild(link);
};
sketcher_export_FileExport.prototype = {
	toString: function() {
		return "[FileExport]";
	}
	,__class__: sketcher_export_FileExport
};
var sketcher_util_ColorUtil = function() {
};
sketcher_util_ColorUtil.__name__ = "sketcher.util.ColorUtil";
sketcher_util_ColorUtil.getColour = function(r,g,b,a) {
	var c;
	if(g == null) {
		c = sketcher_util_ColorUtil.rgb(r,r,r);
	} else if(b == null && a == null) {
		c = sketcher_util_ColorUtil.rgba(r,r,r,g);
	} else if(a == null) {
		c = sketcher_util_ColorUtil.rgb(r,g,b);
	} else {
		c = sketcher_util_ColorUtil.rgba(r,g,b,a);
	}
	return c;
};
sketcher_util_ColorUtil.getColourObj = function(rgb,a) {
	return sketcher_util_ColorUtil.getColour(rgb.r,rgb.g,rgb.b,a);
};
sketcher_util_ColorUtil.rgb = function(r,g,b) {
	if(g == null) {
		g = r;
	}
	if(b == null) {
		b = r;
	}
	return "rgb(" + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(g),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(b),0,255) + ")";
};
sketcher_util_ColorUtil.rgba = function(r,g,b,a) {
	if(g == null) {
		return "rgb(" + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ")";
	} else if(b == null) {
		return "rgba(" + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(g,0,1) + ")";
	} else if(a == null) {
		return "rgba(" + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(g),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(b),0,255) + ", 1)";
	} else {
		return "rgba(" + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(g),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(b),0,255) + ", " + sketcher_util_MathUtil.clamp(a,0,1) + ")";
	}
};
sketcher_util_ColorUtil.rgbToHex = function(r,g,b) {
	return StringTools.hex(r,2) + StringTools.hex(g,2) + StringTools.hex(b,2);
};
sketcher_util_ColorUtil.rgb2hex = function(r,g,b,a) {
	if(a == null) {
		a = 255;
	}
	return a << 24 | r << 16 | g << 8 | b;
};
sketcher_util_ColorUtil.randomColour = function() {
	var r = sketcher_util_MathUtil.randomInt(255);
	var g = sketcher_util_MathUtil.randomInt(255);
	var b = sketcher_util_MathUtil.randomInt(255);
	return sketcher_util_ColorUtil.rgb(r,g,b);
};
sketcher_util_ColorUtil.randomColourObject = function() {
	var r = sketcher_util_MathUtil.randomInt(255);
	var g = sketcher_util_MathUtil.randomInt(255);
	var b = sketcher_util_MathUtil.randomInt(255);
	return { r : r, g : g, b : b};
};
sketcher_util_ColorUtil.toRGB = function(int) {
	return { r : Math.round(int >> 16 & 255), g : Math.round(int >> 8 & 255), b : Math.round(int & 255)};
};
sketcher_util_ColorUtil.ttoRGB = function(int) {
	return { r : int >> 16 & 255, g : int >> 8 & 255, b : int & 255};
};
sketcher_util_ColorUtil.assumption = function(value) {
	var _r = 0;
	var _g = 0;
	var _b = 0;
	var _a = 1;
	value = StringTools.replace(value," ","");
	if(value.indexOf("rgba") != -1) {
		value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
		var arr = value.split(",");
		_r = arr[0];
		_g = arr[1];
		_b = arr[2];
		_a = arr[3];
	} else if(value.indexOf("rgb") != -1) {
		value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
		var arr = value.split(",");
		_r = arr[0];
		_g = arr[1];
		_b = arr[2];
	} else if(value.indexOf("#") != -1) {
		var int = Std.parseInt(StringTools.replace(value,"#","0x"));
		var rgb_r = int >> 16 & 255;
		var rgb_g = int >> 8 & 255;
		var rgb_b = int & 255;
		_r = rgb_r;
		_g = rgb_g;
		_b = rgb_b;
	}
	return { r : _r, g : _g, b : _b, a : _a};
};
sketcher_util_ColorUtil.hex2RGB = function(hex) {
	var int = Std.parseInt(StringTools.replace(hex,"#","0x"));
	return { r : int >> 16 & 255, g : int >> 8 & 255, b : int & 255};
};
sketcher_util_ColorUtil.prototype = {
	__class__: sketcher_util_ColorUtil
};
var sketcher_util_MathUtil = function() { };
sketcher_util_MathUtil.__name__ = "sketcher.util.MathUtil";
sketcher_util_MathUtil.radians = function(deg) {
	return deg * Math.PI / 180;
};
sketcher_util_MathUtil.degrees = function(rad) {
	return rad * 180 / Math.PI;
};
sketcher_util_MathUtil.degreesToPoint = function(deg,diameter) {
	var rad = Math.PI * deg / 180;
	var r = diameter / 2;
	return { x : r * Math.cos(rad), y : r * Math.sin(rad)};
};
sketcher_util_MathUtil.distributeAngles = function(me,total) {
	return me / total * 360;
};
sketcher_util_MathUtil.isPositive = function(nr) {
	if(nr < 0) {
		nr *= -1;
	}
	return nr;
};
sketcher_util_MathUtil.distance = function(x1,y1,x2,y2) {
	return sketcher_util_MathUtil.dist(x1,y1,x2,y2);
};
sketcher_util_MathUtil.distancePoint = function(p0,p1) {
	return sketcher_util_MathUtil.dist(p0.x,p0.y,p1.x,p1.y);
};
sketcher_util_MathUtil.dist = function(x1,y1,x2,y2) {
	x2 -= x1;
	y2 -= y1;
	return Math.sqrt(x2 * x2 + y2 * y2);
};
sketcher_util_MathUtil.pythagoreanTheorem = function(a,b,c) {
	if(a == null && b == null && c == null) {
		haxe_Log.trace("Really? Perhaps you should use some data",{ fileName : "sketcher/util/MathUtil.hx", lineNumber : 123, className : "sketcher.util.MathUtil", methodName : "pythagoreanTheorem"});
		return 0;
	}
	var value = 0.0;
	if(c == null || c == 0) {
		value = Math.sqrt(a * a + b * b);
	}
	if(a == null || a == 0) {
		value = Math.sqrt(c * c - b * b);
	}
	if(b == null || b == 0) {
		value = Math.sqrt(c * c - a * a);
	}
	return value;
};
sketcher_util_MathUtil.circumferenceCircle = function(radius) {
	return Math.PI * radius * 2;
};
sketcher_util_MathUtil.circumference2RadiusCircle = function(circumference) {
	return circumference / (Math.PI * 2);
};
sketcher_util_MathUtil.areaCircle = function(radius) {
	return Math.PI * Math.sqrt(radius);
};
sketcher_util_MathUtil.randomInteger = function(min,max) {
	if(max == null) {
		max = min;
		min = 0;
	}
	return Math.floor(Math.random() * (max + 1 - min)) + min;
};
sketcher_util_MathUtil.randomInt = function(min,max) {
	return sketcher_util_MathUtil.randomInteger(min,max);
};
sketcher_util_MathUtil.random = function(min,max) {
	if(min == null) {
		min = 0;
		max = 1;
	} else if(max == null) {
		max = min;
		min = 0;
	}
	return Math.random() * (max - min) + min;
};
sketcher_util_MathUtil.randomP = function(min,max) {
	if(min == null) {
		min = 0.1;
		max = 1;
	} else if(max == null) {
		max = min;
		min = 0.1;
	}
	return Math.random() * (max - min) + min;
};
sketcher_util_MathUtil.chance = function(value) {
	if(value > 1) {
		value /= 100;
	}
	return Math.random() < value;
};
sketcher_util_MathUtil.chanceTrue = function(value) {
	if(value > 1) {
		value /= 100;
	}
	return Math.random() < value;
};
sketcher_util_MathUtil.chanceFalse = function(value) {
	if(value > 1) {
		value /= 100;
	}
	return Math.random() > value;
};
sketcher_util_MathUtil.posNeg = function() {
	return sketcher_util_MathUtil.randomInt(0,1) * 2 - 1;
};
sketcher_util_MathUtil.flip = function() {
	return Math.random() < 0.5;
};
sketcher_util_MathUtil.angle = function(cx,cy,ex,ey) {
	var dy = ey - cy;
	var dx = ex - cx;
	var theta = Math.atan2(dy,dx);
	theta *= 180 / Math.PI;
	if(theta < 0) {
		theta = 360 + theta;
	}
	if(theta == 360) {
		theta = 0;
	}
	return theta;
};
sketcher_util_MathUtil.map = function(value,min1,max1,min2,max2,clampResult) {
	var returnvalue = (value - min1) / (max1 - min1) * (max2 - min2) + min2;
	if(clampResult) {
		return sketcher_util_MathUtil.clamp(returnvalue,min2,max2);
	} else {
		return returnvalue;
	}
};
sketcher_util_MathUtil.orbit = function(xpos,ypos,angle,radius) {
	var _xpos = xpos + Math.cos(sketcher_util_MathUtil.radians(angle)) * radius;
	var _ypos = ypos + Math.sin(sketcher_util_MathUtil.radians(angle)) * radius;
	return { x : _xpos, y : _ypos};
};
sketcher_util_MathUtil.orbitX = function(origin,angle,radius) {
	return origin + Math.cos(sketcher_util_MathUtil.radians(angle)) * radius;
};
sketcher_util_MathUtil.orbitY = function(origin,angle,radius) {
	return origin + Math.sin(sketcher_util_MathUtil.radians(angle)) * radius;
};
sketcher_util_MathUtil.orbitZ = function(origin,angle,radius) {
	return origin + Math.cos(sketcher_util_MathUtil.radians(angle)) * radius;
};
sketcher_util_MathUtil.shuffle = function(array) {
	var currentIndex = array.length;
	var temporaryValue;
	var randomIndex;
	while(0 != currentIndex) {
		randomIndex = Math.floor(Math.random() * currentIndex);
		--currentIndex;
		temporaryValue = array[currentIndex];
		array[currentIndex] = array[randomIndex];
		array[randomIndex] = temporaryValue;
	}
	return array;
};
sketcher_util_MathUtil.clamp = function(value,min,max) {
	return Math.min(Math.max(value,Math.min(min,max)),Math.max(min,max));
};
sketcher_util_MathUtil.formatByteSizeString = function(bytes) {
	if(bytes < 1024) {
		return bytes + " bytes";
	} else if(bytes < 1048576) {
		return sketcher_util_MathUtil.toFixed(bytes / 1024,3) + " KiB";
	} else if(bytes < 1073741824) {
		return sketcher_util_MathUtil.toFixed(bytes / 1048576,3) + " MiB";
	} else {
		return sketcher_util_MathUtil.toFixed(bytes / 1073741824,3) + " GiB";
	}
};
sketcher_util_MathUtil.formatByteSize = function(bytes) {
	if(bytes < 1024) {
		return bytes;
	} else if(bytes < 1048576) {
		return sketcher_util_MathUtil.toFixed(bytes / 1024,3);
	} else if(bytes < 1073741824) {
		return sketcher_util_MathUtil.toFixed(bytes / 1048576,3);
	} else {
		return sketcher_util_MathUtil.toFixed(bytes / 1073741824,3);
	}
};
sketcher_util_MathUtil.toFixed = function(number,precision) {
	if(precision == null) {
		precision = 2;
	}
	number *= Math.pow(10,precision);
	return Math.round(number) / Math.pow(10,precision);
};
sketcher_util_MathUtil.CASsostoa = function(angleInDegree,aSide,sSide) {
	if(angleInDegree == null) {
		return sketcher_util_MathUtil.toDegree(Math.acos(aSide / sSide));
	}
	if(aSide == null) {
		return Math.cos(sketcher_util_MathUtil.toRadian(angleInDegree)) * sSide;
	}
	if(sSide == null) {
		return aSide / Math.cos(sketcher_util_MathUtil.toRadian(angleInDegree));
	}
	return null;
};
sketcher_util_MathUtil.cas = function(angleInDegree,aSide,sSide) {
	return sketcher_util_MathUtil.CASsostoa(angleInDegree,aSide,sSide);
};
sketcher_util_MathUtil.casSOStoa = function(angleInDegree,oSide,sSide) {
	if(angleInDegree == null) {
		return sketcher_util_MathUtil.toDegree(Math.asin(oSide / sSide));
	}
	if(oSide == null) {
		return Math.sin(sketcher_util_MathUtil.toRadian(angleInDegree)) * sSide;
	}
	if(sSide == null) {
		return oSide / Math.sin(sketcher_util_MathUtil.toRadian(angleInDegree));
	}
	return null;
};
sketcher_util_MathUtil.sos = function(angleInDegree,oSide,sSide) {
	return sketcher_util_MathUtil.casSOStoa(angleInDegree,oSide,sSide);
};
sketcher_util_MathUtil.cassosTOA = function(angleInDegree,oSide,aSide) {
	if(angleInDegree == null) {
		return sketcher_util_MathUtil.toDegree(Math.atan(oSide / aSide));
	}
	if(oSide == null) {
		return Math.tan(sketcher_util_MathUtil.toRadian(angleInDegree)) * aSide;
	}
	if(aSide == null) {
		return oSide / Math.tan(sketcher_util_MathUtil.toRadian(angleInDegree));
	}
	return null;
};
sketcher_util_MathUtil.toa = function(angleInDegree,oSide,aSide) {
	return sketcher_util_MathUtil.cassosTOA(angleInDegree,oSide,aSide);
};
sketcher_util_MathUtil.mm2pixel = function(value) {
	var dpi = 96;
	return value * dpi / 25.4;
};
sketcher_util_MathUtil.mm2px = function(value) {
	return sketcher_util_MathUtil.mm2pixel(value);
};
sketcher_util_MathUtil.pixel2mm = function(value) {
	var dpi = 96;
	return value * 25.4 / dpi;
};
sketcher_util_MathUtil.px2mm = function(value) {
	return sketcher_util_MathUtil.pixel2mm(value);
};
sketcher_util_MathUtil.toDegree = function(angleRadian) {
	var degrees = angleRadian / (Math.PI / 180);
	return degrees;
};
sketcher_util_MathUtil.toRadian = function(angleInDegree) {
	var radians = angleInDegree * Math.PI / 180;
	return radians;
};
var util_TextUtil = function() {
	this.svgNS = "http://www.w3.org/2000/svg";
	this.svg = null;
	this.createSVG();
};
util_TextUtil.__name__ = "util.TextUtil";
util_TextUtil.prototype = {
	createSVG: function() {
		var ID = "hidden-div-svg-wrapper";
		var SVG_ID = "temp-svg-wrapper";
		var div;
		if(window.document.getElementById(ID) == null) {
			div = window.document.createElement("div");
			div.id = ID;
			div.className = "hidden svg-hidden";
			window.document.body.appendChild(div);
		} else {
			div = window.document.getElementById(ID);
		}
		if(window.document.getElementById(SVG_ID) == null) {
			this.svg = window.document.createElementNS(this.svgNS,"svg");
			this.svg.id = SVG_ID;
			this.svg.setAttribute("xmlns",this.svgNS);
			var paperW = Math.ceil(cc_model_constants_Paper.mm2pixel(210));
			this.svg.setAttribute("width","" + paperW);
			this.svg.setAttribute("height","100");
			div.appendChild(this.svg);
		} else {
			this.svg = window.document.getElementById(SVG_ID);
		}
	}
	,getBboxText: function(str) {
		var _x = 0;
		var _y = 0;
		var data = window.document.createTextNode(str);
		var svgElement = window.document.createElementNS(this.svgNS,"text");
		svgElement.setAttribute("x","" + _x);
		svgElement.setAttribute("y","" + _y);
		svgElement.setAttribute("font-family",this.fontFamily);
		svgElement.setAttribute("font-weight",this.fontWeight);
		svgElement.setAttribute("font-size","" + this.fontSize + "px");
		svgElement.appendChild(data);
		this.svg.appendChild(svgElement);
		var bbox = svgElement.getBBox();
		svgElement.parentNode.removeChild(svgElement);
		return bbox;
	}
	,getLines: function(text,maxWidth) {
		var isDebug = false;
		var _text = StringTools.replace(StringTools.replace(text,"\n"," \n "),"  "," ");
		var words = _text.split(" ");
		var lines = [];
		var currentLine = words[0];
		var _g = 1;
		var _g1 = words.length;
		while(_g < _g1) {
			var i = _g++;
			var word = words[i];
			if(word == "\n") {
				lines.push(StringTools.trim(currentLine));
				currentLine = "";
				continue;
			}
			var _text = currentLine + " " + word;
			var bbox = this.getBboxText(_text);
			var width = this.getBboxText(_text).width;
			if(isDebug) {
				haxe_Log.trace("\"" + _text + "\".width: " + width + " / " + maxWidth,{ fileName : "util/TextUtil.hx", lineNumber : 194, className : "util.TextUtil", methodName : "getLines"});
			}
			if(width < maxWidth) {
				currentLine += " " + word;
			} else {
				lines.push(StringTools.trim(currentLine));
				if(word == " ") {
					currentLine = "";
				} else {
					currentLine = word;
				}
			}
		}
		lines.push(StringTools.trim(currentLine));
		return lines;
	}
	,getFittext: function(str,maxWidth) {
		var _text = str;
		this.fontSize = 10;
		var _g = 0;
		while(_g < 100) {
			var i = _g++;
			this.fontSize++;
			var bbox = this.getBboxText(_text);
			var width = this.getBboxText(_text).width;
			if(width >= maxWidth) {
				break;
			}
		}
		return this.fontSize;
	}
	,__class__: util_TextUtil
};
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
Object.defineProperty(String.prototype,"__class__",{ value : String, enumerable : false, writable : true});
String.__name__ = "String";
Array.__name__ = "Array";
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
js_Boot.__toStr = ({ }).toString;
Globals.MOUSE_DOWN = "mousedown";
Globals.MOUSE_UP = "mouseup";
Globals.MOUSE_MOVE = "mousemove";
Globals.KEY_DOWN = "keydown";
Globals.KEY_UP = "keyup";
Globals.RESIZE = "resize";
Globals.isMouseDown = false;
Globals.mousePressed = 0;
Globals.mouseReleased = 0;
Globals.isFullscreen = false;
Globals.TWO_PI = Math.PI * 2;
Sketch.option = new SketchOption();
Global.MOUSE_DOWN = "mousedown";
Global.MOUSE_UP = "mouseup";
Global.MOUSE_MOVE = "mousemove";
Global.KEY_DOWN = "keydown";
Global.KEY_UP = "keyup";
Global.RESIZE = "resize";
Global.mousePressed = 0;
Global.mouseReleased = 0;
Global.isFullscreen = false;
Global.TWO_PI = Math.PI * 2;
Sketcher.UNIQ_ID = "";
Sketcher.SVG_UNIQ_ID = "";
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
cc_lets_Go._tweens = [];
cc_model_constants_Paper.A6 = "a6";
cc_model_constants_Paper.A5 = "a5";
cc_model_constants_Paper.A4 = "a4";
cc_model_constants_Paper.A3 = "a3";
cc_model_constants_Paper.A2 = "a2";
cc_model_constants_Paper.A1 = "a1";
cc_model_constants_Paper.ARR = ["a6","a5","a4","a3","a2","a1"];
cc_util_ColorUtil.NAVY = { r : Math.round(0), g : Math.round(31), b : Math.round(63)};
cc_util_ColorUtil.BLUE = { r : Math.round(0), g : Math.round(116), b : Math.round(217)};
cc_util_ColorUtil.AQUA = { r : Math.round(127), g : Math.round(219), b : Math.round(255)};
cc_util_ColorUtil.TEAL = { r : Math.round(57), g : Math.round(204), b : Math.round(204)};
cc_util_ColorUtil.OLIVE = { r : Math.round(61), g : Math.round(153), b : Math.round(112)};
cc_util_ColorUtil.GREEN = { r : Math.round(46), g : Math.round(204), b : Math.round(64)};
cc_util_ColorUtil.LIME = { r : Math.round(1), g : Math.round(255), b : Math.round(112)};
cc_util_ColorUtil.YELLOW = { r : Math.round(255), g : Math.round(220), b : Math.round(0)};
cc_util_ColorUtil.ORANGE = { r : Math.round(255), g : Math.round(133), b : Math.round(27)};
cc_util_ColorUtil.RED = { r : Math.round(255), g : Math.round(65), b : Math.round(54)};
cc_util_ColorUtil.MAROON = { r : Math.round(133), g : Math.round(20), b : Math.round(75)};
cc_util_ColorUtil.FUCHSIA = { r : Math.round(240), g : Math.round(18), b : Math.round(190)};
cc_util_ColorUtil.PURPLE = { r : Math.round(177), g : Math.round(13), b : Math.round(201)};
cc_util_ColorUtil.BLACK = { r : Math.round(17), g : Math.round(17), b : Math.round(17)};
cc_util_ColorUtil.GRAY = { r : Math.round(170), g : Math.round(170), b : Math.round(170)};
cc_util_ColorUtil.SILVER = { r : Math.round(221), g : Math.round(221), b : Math.round(221)};
cc_util_ColorUtil.WHITE = { r : Math.round(255), g : Math.round(255), b : Math.round(255)};
cc_util_ColorUtil.PINK = { r : Math.round(255), g : Math.round(20), b : Math.round(147)};
cc_util_ColorUtil.PINK_DEEP = { r : Math.round(255), g : Math.round(20), b : Math.round(147)};
cc_util_ColorUtil.PINK_HOT = { r : Math.round(255), g : Math.round(105), b : Math.round(180)};
cc_util_ColorUtil.niceColor100 = [["#69d2e7","#a7dbd8","#e0e4cc","#f38630","#fa6900"],["#fe4365","#fc9d9a","#f9cdad","#c8c8a9","#83af9b"],["#ecd078","#d95b43","#c02942","#542437","#53777a"],["#556270","#4ecdc4","#c7f464","#ff6b6b","#c44d58"],["#774f38","#e08e79","#f1d4af","#ece5ce","#c5e0dc"],["#e8ddcb","#cdb380","#036564","#033649","#031634"],["#490a3d","#bd1550","#e97f02","#f8ca00","#8a9b0f"],["#594f4f","#547980","#45ada8","#9de0ad","#e5fcc2"],["#00a0b0","#6a4a3c","#cc333f","#eb6841","#edc951"],["#e94e77","#d68189","#c6a49a","#c6e5d9","#f4ead5"],["#3fb8af","#7fc7af","#dad8a7","#ff9e9d","#ff3d7f"],["#d9ceb2","#948c75","#d5ded9","#7a6a53","#99b2b7"],["#ffffff","#cbe86b","#f2e9e1","#1c140d","#cbe86b"],["#efffcd","#dce9be","#555152","#2e2633","#99173c"],["#343838","#005f6b","#008c9e","#00b4cc","#00dffc"],["#413e4a","#73626e","#b38184","#f0b49e","#f7e4be"],["#ff4e50","#fc913a","#f9d423","#ede574","#e1f5c4"],["#99b898","#fecea8","#ff847c","#e84a5f","#2a363b"],["#655643","#80bca3","#f6f7bd","#e6ac27","#bf4d28"],["#00a8c6","#40c0cb","#f9f2e7","#aee239","#8fbe00"],["#351330","#424254","#64908a","#e8caa4","#cc2a41"],["#554236","#f77825","#d3ce3d","#f1efa5","#60b99a"],["#ff9900","#424242","#e9e9e9","#bcbcbc","#3299bb"],["#5d4157","#838689","#a8caba","#cad7b2","#ebe3aa"],["#8c2318","#5e8c6a","#88a65e","#bfb35a","#f2c45a"],["#fad089","#ff9c5b","#f5634a","#ed303c","#3b8183"],["#ff4242","#f4fad2","#d4ee5e","#e1edb9","#f0f2eb"],["#d1e751","#ffffff","#000000","#4dbce9","#26ade4"],["#f8b195","#f67280","#c06c84","#6c5b7b","#355c7d"],["#1b676b","#519548","#88c425","#bef202","#eafde6"],["#bcbdac","#cfbe27","#f27435","#f02475","#3b2d38"],["#5e412f","#fcebb6","#78c0a8","#f07818","#f0a830"],["#452632","#91204d","#e4844a","#e8bf56","#e2f7ce"],["#eee6ab","#c5bc8e","#696758","#45484b","#36393b"],["#f0d8a8","#3d1c00","#86b8b1","#f2d694","#fa2a00"],["#f04155","#ff823a","#f2f26f","#fff7bd","#95cfb7"],["#2a044a","#0b2e59","#0d6759","#7ab317","#a0c55f"],["#bbbb88","#ccc68d","#eedd99","#eec290","#eeaa88"],["#b9d7d9","#668284","#2a2829","#493736","#7b3b3b"],["#b3cc57","#ecf081","#ffbe40","#ef746f","#ab3e5b"],["#a3a948","#edb92e","#f85931","#ce1836","#009989"],["#67917a","#170409","#b8af03","#ccbf82","#e33258"],["#e8d5b7","#0e2430","#fc3a51","#f5b349","#e8d5b9"],["#aab3ab","#c4cbb7","#ebefc9","#eee0b7","#e8caaf"],["#300030","#480048","#601848","#c04848","#f07241"],["#ab526b","#bca297","#c5ceae","#f0e2a4","#f4ebc3"],["#607848","#789048","#c0d860","#f0f0d8","#604848"],["#a8e6ce","#dcedc2","#ffd3b5","#ffaaa6","#ff8c94"],["#3e4147","#fffedf","#dfba69","#5a2e2e","#2a2c31"],["#b6d8c0","#c8d9bf","#dadabd","#ecdbbc","#fedcba"],["#fc354c","#29221f","#13747d","#0abfbc","#fcf7c5"],["#1c2130","#028f76","#b3e099","#ffeaad","#d14334"],["#edebe6","#d6e1c7","#94c7b6","#403b33","#d3643b"],["#cc0c39","#e6781e","#c8cf02","#f8fcc1","#1693a7"],["#dad6ca","#1bb0ce","#4f8699","#6a5e72","#563444"],["#a7c5bd","#e5ddcb","#eb7b59","#cf4647","#524656"],["#fdf1cc","#c6d6b8","#987f69","#e3ad40","#fcd036"],["#5c323e","#a82743","#e15e32","#c0d23e","#e5f04c"],["#230f2b","#f21d41","#ebebbc","#bce3c5","#82b3ae"],["#b9d3b0","#81bda4","#b28774","#f88f79","#f6aa93"],["#3a111c","#574951","#83988e","#bcdea5","#e6f9bc"],["#5e3929","#cd8c52","#b7d1a3","#dee8be","#fcf7d3"],["#1c0113","#6b0103","#a30006","#c21a01","#f03c02"],["#382f32","#ffeaf2","#fcd9e5","#fbc5d8","#f1396d"],["#e3dfba","#c8d6bf","#93ccc6","#6cbdb5","#1a1f1e"],["#000000","#9f111b","#b11623","#292c37","#cccccc"],["#c1b398","#605951","#fbeec2","#61a6ab","#accec0"],["#8dccad","#988864","#fea6a2","#f9d6ac","#ffe9af"],["#f6f6f6","#e8e8e8","#333333","#990100","#b90504"],["#1b325f","#9cc4e4","#e9f2f9","#3a89c9","#f26c4f"],["#5e9fa3","#dcd1b4","#fab87f","#f87e7b","#b05574"],["#951f2b","#f5f4d7","#e0dfb1","#a5a36c","#535233"],["#413d3d","#040004","#c8ff00","#fa023c","#4b000f"],["#eff3cd","#b2d5ba","#61ada0","#248f8d","#605063"],["#2d2d29","#215a6d","#3ca2a2","#92c7a3","#dfece6"],["#cfffdd","#b4dec1","#5c5863","#a85163","#ff1f4c"],["#4e395d","#827085","#8ebe94","#ccfc8e","#dc5b3e"],["#9dc9ac","#fffec7","#f56218","#ff9d2e","#919167"],["#a1dbb2","#fee5ad","#faca66","#f7a541","#f45d4c"],["#ffefd3","#fffee4","#d0ecea","#9fd6d2","#8b7a5e"],["#a8a7a7","#cc527a","#e8175d","#474747","#363636"],["#ffedbf","#f7803c","#f54828","#2e0d23","#f8e4c1"],["#f8edd1","#d88a8a","#474843","#9d9d93","#c5cfc6"],["#f38a8a","#55443d","#a0cab5","#cde9ca","#f1edd0"],["#4e4d4a","#353432","#94ba65","#2790b0","#2b4e72"],["#0ca5b0","#4e3f30","#fefeeb","#f8f4e4","#a5b3aa"],["#a70267","#f10c49","#fb6b41","#f6d86b","#339194"],["#9d7e79","#ccac95","#9a947c","#748b83","#5b756c"],["#edf6ee","#d1c089","#b3204d","#412e28","#151101"],["#046d8b","#309292","#2fb8ac","#93a42a","#ecbe13"],["#4d3b3b","#de6262","#ffb88c","#ffd0b3","#f5e0d3"],["#fffbb7","#a6f6af","#66b6ab","#5b7c8d","#4f2958"],["#ff003c","#ff8a00","#fabe28","#88c100","#00c176"],["#fcfef5","#e9ffe1","#cdcfb7","#d6e6c3","#fafbe3"],["#9cddc8","#bfd8ad","#ddd9ab","#f7af63","#633d2e"],["#30261c","#403831","#36544f","#1f5f61","#0b8185"],["#d1313d","#e5625c","#f9bf76","#8eb2c5","#615375"],["#ffe181","#eee9e5","#fad3b2","#ffba7f","#ff9c97"],["#aaff00","#ffaa00","#ff00aa","#aa00ff","#00aaff"],["#c2412d","#d1aa34","#a7a844","#a46583","#5a1e4a"]];
cc_util_ColorUtil.niceColor100SortedString = [["#E0E4CC","#A7DBD8","#69D2E7","#F38630","#FA6900"],["#F9CDAD","#C8C8A9","#FC9D9A","#83AF9B","#FE4365"],["#ECD078","#D95B43","#53777A","#C02942","#542437"],["#C7F464","#4ECDC4","#FF6B6B","#C44D58","#556270"],["#ECE5CE","#F1D4AF","#C5E0DC","#E08E79","#774F38"],["#E8DDCB","#CDB380","#036564","#033649","#031634"],["#F8CA00","#E97F02","#8A9B0F","#BD1550","#490A3D"],["#E5FCC2","#9DE0AD","#45ADA8","#547980","#594F4F"],["#EDC951","#EB6841","#00A0B0","#CC333F","#6A4A3C"],["#F4EAD5","#C6E5D9","#C6A49A","#D68189","#E94E77"],["#DAD8A7","#FF9E9D","#7FC7AF","#3FB8AF","#FF3D7F"],["#D5DED9","#D9CEB2","#99B2B7","#948C75","#7A6A53"],["#FFFFFF","#F2E9E1","#CBE86B","#CBE86B","#1C140D"],["#EFFFCD","#DCE9BE","#555152","#99173C","#2E2633"],["#00DFFC","#00B4CC","#008C9E","#005F6B","#343838"],["#F7E4BE","#F0B49E","#B38184","#73626E","#413E4A"],["#E1F5C4","#EDE574","#F9D423","#FC913A","#FF4E50"],["#FECEA8","#99B898","#FF847C","#E84A5F","#2A363B"],["#F6F7BD","#E6AC27","#80BCA3","#BF4D28","#655643"],["#F9F2E7","#AEE239","#40C0CB","#8FBE00","#00A8C6"],["#E8CAA4","#64908A","#CC2A41","#424254","#351330"],["#F1EFA5","#D3CE3D","#60B99A","#F77825","#554236"],["#E9E9E9","#BCBCBC","#FF9900","#3299BB","#424242"],["#EBE3AA","#CAD7B2","#A8CABA","#838689","#5D4157"],["#F2C45A","#BFB35A","#88A65E","#5E8C6A","#8C2318"],["#FAD089","#FF9C5B","#F5634A","#3B8183","#ED303C"],["#F4FAD2","#F0F2EB","#E1EDB9","#D4EE5E","#FF4242"],["#FFFFFF","#D1E751","#4DBCE9","#26ADE4","#000000"],["#F8B195","#F67280","#C06C84","#6C5B7B","#355C7D"],["#EAFDE6","#BEF202","#88C425","#519548","#1B676B"],["#BCBDAC","#CFBE27","#F27435","#F02475","#3B2D38"],["#FCEBB6","#F0A830","#78C0A8","#F07818","#5E412F"],["#E2F7CE","#E8BF56","#E4844A","#91204D","#452632"],["#EEE6AB","#C5BC8E","#696758","#45484B","#36393B"],["#F0D8A8","#F2D694","#86B8B1","#FA2A00","#3D1C00"],["#FFF7BD","#F2F26F","#95CFB7","#FF823A","#F04155"],["#A0C55F","#7AB317","#0D6759","#0B2E59","#2A044A"],["#EEDD99","#EEC290","#CCC68D","#EEAA88","#BBBB88"],["#B9D7D9","#668284","#7B3B3B","#493736","#2A2829"],["#ECF081","#FFBE40","#B3CC57","#EF746F","#AB3E5B"],["#EDB92E","#A3A948","#F85931","#009989","#CE1836"],["#CCBF82","#B8AF03","#67917A","#E33258","#170409"],["#E8D5B9","#E8D5B7","#F5B349","#FC3A51","#0E2430"],["#EBEFC9","#EEE0B7","#E8CAAF","#C4CBB7","#AAB3AB"],["#F07241","#C04848","#601848","#480048","#300030"],["#F4EBC3","#F0E2A4","#C5CEAE","#BCA297","#AB526B"],["#F0F0D8","#C0D860","#789048","#607848","#604848"],["#DCEDC2","#FFD3B5","#A8E6CE","#FFAAA6","#FF8C94"],["#FFFEDF","#DFBA69","#3E4147","#5A2E2E","#2A2C31"],["#FEDCBA","#ECDBBC","#DADABD","#C8D9BF","#B6D8C0"],["#FCF7C5","#0ABFBC","#FC354C","#13747D","#29221F"],["#FFEAAD","#B3E099","#D14334","#028F76","#1C2130"],["#EDEBE6","#D6E1C7","#94C7B6","#D3643B","#403B33"],["#F8FCC1","#C8CF02","#E6781E","#1693A7","#CC0C39"],["#DAD6CA","#1BB0CE","#4F8699","#6A5E72","#563444"],["#E5DDCB","#A7C5BD","#EB7B59","#CF4647","#524656"],["#FDF1CC","#C6D6B8","#FCD036","#E3AD40","#987F69"],["#E5F04C","#C0D23E","#E15E32","#A82743","#5C323E"],["#EBEBBC","#BCE3C5","#82B3AE","#F21D41","#230F2B"],["#B9D3B0","#F6AA93","#F88F79","#81BDA4","#B28774"],["#E6F9BC","#BCDEA5","#83988E","#574951","#3A111C"],["#FCF7D3","#DEE8BE","#B7D1A3","#CD8C52","#5E3929"],["#F03C02","#C21A01","#A30006","#6B0103","#1C0113"],["#FFEAF2","#FCD9E5","#FBC5D8","#F1396D","#382F32"],["#E3DFBA","#C8D6BF","#93CCC6","#6CBDB5","#1A1F1E"],["#CCCCCC","#B11623","#9F111B","#292C37","#000000"],["#FBEEC2","#ACCEC0","#C1B398","#61A6AB","#605951"],["#FFE9AF","#F9D6AC","#FEA6A2","#8DCCAD","#988864"],["#F6F6F6","#E8E8E8","#B90504","#333333","#990100"],["#E9F2F9","#9CC4E4","#F26C4F","#3A89C9","#1B325F"],["#DCD1B4","#FAB87F","#F87E7B","#5E9FA3","#B05574"],["#F5F4D7","#E0DFB1","#A5A36C","#535233","#951F2B"],["#C8FF00","#FA023C","#413D3D","#4B000F","#040004"],["#EFF3CD","#B2D5BA","#61ADA0","#248F8D","#605063"],["#DFECE6","#92C7A3","#3CA2A2","#215A6D","#2D2D29"],["#CFFFDD","#B4DEC1","#A85163","#FF1F4C","#5C5863"],["#CCFC8E","#8EBE94","#DC5B3E","#827085","#4E395D"],["#FFFEC7","#9DC9AC","#FF9D2E","#919167","#F56218"],["#FEE5AD","#FACA66","#A1DBB2","#F7A541","#F45D4C"],["#FFFEE4","#FFEFD3","#D0ECEA","#9FD6D2","#8B7A5E"],["#A8A7A7","#CC527A","#E8175D","#474747","#363636"],["#FFEDBF","#F8E4C1","#F7803C","#F54828","#2E0D23"],["#F8EDD1","#C5CFC6","#D88A8A","#9D9D93","#474843"],["#F1EDD0","#CDE9CA","#A0CAB5","#F38A8A","#55443D"],["#94BA65","#2790B0","#4E4D4A","#2B4E72","#353432"],["#FEFEEB","#F8F4E4","#A5B3AA","#0CA5B0","#4E3F30"],["#F6D86B","#FB6B41","#339194","#F10C49","#A70267"],["#CCAC95","#9A947C","#9D7E79","#748B83","#5B756C"],["#EDF6EE","#D1C089","#B3204D","#412E28","#151101"],["#ECBE13","#93A42A","#2FB8AC","#309292","#046D8B"],["#F5E0D3","#FFD0B3","#FFB88C","#DE6262","#4D3B3B"],["#FFFBB7","#A6F6AF","#66B6AB","#5B7C8D","#4F2958"],["#FABE28","#FF8A00","#88C100","#00C176","#FF003C"],["#FCFEF5","#FAFBE3","#E9FFE1","#D6E6C3","#CDCFB7"],["#DDD9AB","#BFD8AD","#9CDDC8","#F7AF63","#633D2E"],["#0B8185","#1F5F61","#36544F","#403831","#30261C"],["#F9BF76","#8EB2C5","#E5625C","#D1313D","#615375"],["#EEE9E5","#FFE181","#FAD3B2","#FFBA7F","#FF9C97"],["#AAFF00","#FFAA00","#00AAFF","#FF00AA","#AA00FF"],["#D1AA34","#A7A844","#A46583","#C2412D","#5A1E4A"],["#F8F3BF","#DCE4F7","#BFCFF7","#75616B","#D34017"]];
cc_util_ColorUtil.niceColor100SortedInt = [[14738636,11000792,6935271,15959600,16410880],[16371117,13158569,16555418,8630171,16663397],[15519864,14244675,5470074,12593474,5514295],[13104228,5164484,16739179,12864856,5595760],[15525326,15848623,12968156,14716537,7819064],[15261131,13480832,222564,210505,202292],[16304640,15302402,9083663,12391760,4786749],[15072450,10346669,4566440,5536128,5853007],[15583569,15427649,41136,13382463,6965820],[16050901,13034969,13018266,14057865,15289975],[14342311,16752285,8374191,4176047,16727423],[14016217,14274226,10072759,9735285,8022611],[16777215,15919585,13363307,13363307,1840141],[15728589,14477758,5591378,10032956,3024435],[57340,46284,35998,24427,3422264],[16245950,15774878,11764100,7561838,4275786],[14808516,15590772,16372771,16552250,16731728],[16699048,10074264,16745596,15223391,2766395],[16185277,15117351,8436899,12537128,6641219],[16380647,11461177,4243659,9420288,43206],[15256228,6590602,13380161,4342356,3478320],[15855525,13880893,6338970,16218149,5587510],[15329769,12369084,16750848,3316155,4342338],[15459242,13293490,11061946,8619657,6111575],[15909978,12563290,8955486,6196330,9184024],[16437385,16751707,16081738,3899779,15544380],[16054994,15790827,14806457,13954654,16728642],[16777215,13756241,5094633,2534884,0],[16298389,16151168,12610692,7101307,3497085],[15400422,12513794,8963109,5346632,1795947],[12369324,13614631,15889461,15737973,3878200],[16575414,15771696,7913640,15759384,6177071],[14874574,15253334,14976074,9510989,4531762],[15656619,12958862,6907736,4540491,3553595],[15784104,15914644,8829105,16394752,4004864],[16775101,15921775,9818039,16745018,15745365],[10536287,8041239,878425,732761,2753610],[15654297,15647376,13420173,15641224,12303240],[12179417,6718084,8076091,4798262,2762793],[15528065,16760384,11783255,15692911,11222619],[15579438,10725704,16275761,39305,13506614],[13418370,12103427,6787450,14889560,1508361],[15259065,15259063,16102217,16530001,926768],[15462345,15655095,15256239,12897207,11187115],[15757889,12601416,6297672,4718664,3145776],[16051139,15786660,12963502,12362391,11227755],[15790296,12638304,7901256,6322248,6309960],[14478786,16765877,11069134,16755366,16747668],[16776927,14662249,4079943,5910062,2763825],[16702650,15522748,14342845,13162943,11983040],[16578501,704444,16528716,1275005,2695711],[16771757,11788441,13714228,167798,1843504],[15592422,14082503,9750454,13853755,4209459],[16317633,13160194,15104030,1479591,13372473],[14341834,1814734,5211801,6970994,5649476],[15064523,10995133,15432537,13583943,5391958],[16642508,13031096,16568374,14921024,9994089],[15069260,12636734,14769714,11020099,6042174],[15461308,12379077,8565678,15867201,2297643],[12178352,16165523,16289657,8502692,11700084],[15137212,12377765,8624270,5720401,3805468],[16578515,14608574,12046755,13470802,6175017],[15744002,12720641,10682374,7012611,1835283],[16771826,16570853,16500184,15808877,3682098],[14933946,13162175,9686214,7126453,1711902],[13421772,11605539,10424603,2698295,0],[16510658,11325120,12694424,6399659,6314321],[16771503,16373420,16688802,9292973,9996388],[16185078,15263976,12125444,3355443,10027264],[15332089,10274020,15887439,3836361,1782367],[14471604,16431231,16285307,6201251,11556212],[16118999,14737329,10855276,5460531,9772843],[13172480,16384572,4275517,4915215,262148],[15725517,11720122,6401440,2396045,6312035],[14675174,9619363,3973794,2185837,2960681],[13631453,11853505,11030883,16719692,6051939],[13433998,9354900,14441278,8548485,5126493],[16776903,10340780,16751918,9539943,16081432],[16704941,16435814,10607538,16229697,16014668],[16776932,16773075,13692138,10475218,9140830],[11052967,13390458,15210333,4671303,3552822],[16772543,16311489,16220220,16074792,3018019],[16313809,12963782,14191242,10329491,4671555],[15855056,13494730,10537653,15960714,5588029],[9747045,2592944,5131594,2838130,3486770],[16711403,16315620,10859434,828848,5127984],[16177259,16476993,3379604,15797321,10945127],[13413525,10130556,10321529,7637891,5993836],[15595246,13746313,11739213,4271656,1380609],[15515155,9675818,3127468,3183250,290187],[16113875,16765107,16758924,14574178,5061435],[16776119,10942127,6731435,5995661,5187928],[16432680,16747008,8962304,49526,16711740],[16580341,16448483,15335393,14083779,13488055],[14539179,12572845,10280392,16232291,6503726],[754053,2056033,3560527,4208689,3155484],[16367478,9351877,15032924,13709629,6378357],[15657445,16769409,16438194,16759423,16751767],[11206400,16755200,43775,16711850,11141375],[13740596,10987588,10773891,12730669,5905994],[16315327,14476535,12570615,7692651,13844503]];
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	h.h["lt"] = "<";
	h.h["gt"] = ">";
	h.h["amp"] = "&";
	h.h["quot"] = "\"";
	h.h["apos"] = "'";
	$r = h;
	return $r;
}(this));
model_constants_App.URL = "https://";
model_constants_App.NAME = "[cc-quote]";
model_constants_App.BUILD = model_constants_App.getBuildDate();
model_constants_Papertoy.DESIGN_LAYER = "design_group";
model_constants_Papertoy.GLUE_LAYER = "glue_group";
model_constants_Papertoy.COMBINE_LAYER = "combine_group";
model_constants_Papertoy.TEXT_LAYER = "text_group";
model_constants_Papertoy.CUT_LAYER = "cut_group";
model_constants_Papertoy.COLOR_LAYER = "color_group";
model_constants_Quotes.array = ["The journey of a thousand miles begins with a single step. ~ Lao Tzu","The walls between art and engineering exist only in our minds. ~ Theo Jansen","The secret to getting ahead is getting started. ~ Mark Twain","You mis a 100% shots you don’t take ~ Wayne Graysky","The greater danger for most of us lies not in setting our aim too high and falling short; but in setting our aim too low, and achieving our mark. ~ Michelangelo","Assumption is the mother of all failure ~ Eugene Lewis Fordsworthe","If you spend too much time thinking about a thing, you’ll never get it done. ~ Bruce Lee","If you are going to doubt something, doubt your limits. ~ Don Ward","Best way to predict your future is to create it. ~ Stephen R. Covey","If you fail to plan, you plan to fail. ~ Benjamin Franklin","Ever tried. Ever failed. No matter. Try again. Fail again. Fail better. ~ Samuel Beckett","We can’t solve problems by using the same kind of thinking we used when we created them. ~ Albert Einstein","It always seems impossible until it’s done. ~ Nelson Mandela","Be yourself; everyone else is already taken. ~ Oscar Wilde","Two things are infinite: the universe and human stupidity; and I’m not sure about the universe. ~ Albert Einstein","It’s hard to beat a person who never gives up. ~ Babe Ruth","Strive not to be a success, but rather to be of value. ~ Albert Einstein","Be not afraid of growing slowly; be afraid only of standing still. ~ Chinese Proverb","With self-discipline most anything is possible. ~ Theodore Roosevelt","------------","Ever tried. Ever failed. No matter. Try again. Fail again. Fail better.\n~ Samuel Beckett","Life is 10% what happens to you and 90% how you react to it. \n~ Charles R. Swindoll","The walls between art and engineering exist only in our minds.\n~ Theo Jansen","It is impossible to make anything foolproof because fools are so ingenious. \n~ Murphy's law","Knowing is not enough, we must apply. Willing is not enough, we must do. \n~ Bruce Lee","Showing off is the fool's idea of glory. \n~ Bruce Lee","I fear not the man who has practiced 10,000 kicks once, but I fear the man who has practiced one kick 10,000 times. \n~ Bruce Lee","Adapt what is useful, reject what is useless, and add what is specifically your own. \n~ Bruce Lee","If you spend too much time thinking about a thing, you'll never get it done. \n~ Bruce Lee","Having no limitation as limitation \n~ Bruce Lee","If you love life, don't waste time, for time is what life is made up of. \n~ Bruce Lee","The key to immortality is first living a life worth remembering. \n~ Bruce Lee","Mistakes are always forgivable, if one has the courage to admit them. \n~ Bruce Lee","It is not a daily increase, but a daily decrease. Hack away at the inessentials \n~ Bruce Lee","If you spend too much time thinking about a thing, you’ll never get it done. \n~ Bruce Lee","I’m not in this world to live up to your expectations and you’re not in this world to live up to mine. \n~ Bruce Lee","Do not pray for an easy life, pray for the strength to endure a difficult one. \n~ Bruce Lee","A wise man can learn more from a foolish question than a fool can learn from a wise answer. \n~ Bruce Lee","Absorb what is useful, discard what is useless and add what is specifically your own. \n~ Bruce Lee","Mistakes are always forgivable, if one has the courage to admit them. \n~ Bruce Lee","To hell with circumstances; I create opportunities. \n~ Bruce Lee","I fear not the man who has practiced 10,000 kicks once, but I fear the man who has practiced one kick 10,000 times. \n~ Bruce Lee","Real living is living for others. \n~ Bruce Lee","The more we value things, the less we value ourselves. \n~ Bruce Lee","The more we value things, the less we value ourselves \n~ Bruce Lee","If you love life, don’t waste time, for time is what life is made up of. \n~ Bruce Lee","Showing off is the fool’s idea of glory. \n~ Bruce Lee","Life’s battles don’t always go to the stronger or faster man. But sooner or later the man who wins, is the man who thinks he can. \n~ Bruce Lee","The successful warrior is the average man, with laser-like focus. \n~ Bruce Lee","Knowing is not enough, we must apply. Willing is not enough, we must do. \n~ Bruce Lee","In the middle of chaos lies opportunity.\n~ Bruce Lee","For it is easy to criticize and break down the spirit of others, but to know yourself takes a lifetime. \n~ Bruce Lee","Be happy, but never satisfied. \n~ Bruce Lee","Always be yourself, express yourself, have faith in yourself, do not go out and look for a successful personality and duplicate it. \n~ Bruce Lee","The key to immortality is first living a life worth remembering. \n~ Bruce Lee","If you can dream it, you can do it. \n~ Walt Disney","The future belongs to those who believe in the beauty of their dreams. \n~ Eleanor Roosevelt","Aim for the moon. If you miss, you may hit a star. \n~ W. Clement Stone","Don’t watch the clock; do what it does. Keep going. \n~ Sam Levenson","We aim above the mark to hit the mark. \n~ Ralph Waldo Emerson","Keep your eyes on the stars, and your feet on the ground. \n~ Theodore Roosevelt","One way to keep momentum going is to have constantly greater goals. \n~ Michael Korda","You just can’t beat the person who never gives up. \n~ Babe Ruth","Start where you are. Use what you have. Do what you can. \n~ Arthur Ashe","Why should you continue going after your dreams? Because seeing the look on the faces of the people who said you couldn’t... will be priceless. \n~ Kevin Ngo","It does not matter how slowly you go as long as you do not stop. \n~  Confucius","Only I can change my life. No one can do it for me. \n~ Carol Burnett","Luck is what happens when preparation meets opportunity. \n~ Seneca","Do. Or do not. There is no try. \n~ Yoda","People often say that motivation doesn't last. Well, neither does bathing -- that's why we recommend it daily. \n~ Zig Ziglar","Someday is not a day of the week. \n~ Denise Brennan - Nelson","Hire character. Train skill. \n~ Peter Schutz","Your time is limited, so don't waste it living someone else's life. \n~ Steve Jobs","If you cannot do great things, do small things in a great way. \n~ Napoleon Hill","Beware of monotony; it's the mother of all the deadly sins. \n~ Edith Wharton","Nothing is really work unless you would rather be doing something else. \n~ J.M.Barrie","Be patient with yourself. Self-growth is tender; it's holy ground. There's no greater investment. \n~ Stephen Covey","Without hustle, talent will only carry you so far. \n~ Gary Vaynerchuk","Working hard for something we don't care about is called stressed; working hard for something we love is called passion. \n~ Simon Sinek","I'd rather regret the things I've done than regret the things I haven't done. \n~ Lucille BallMotivational quote by Lucille Ball","I didn't get there by wishing for it or hoping for it, but by working for it. \n~ Estée Lauder","Always do your best. What you plant now, you will harvest later. \n~ Og Mandino","The key to life is accepting challenges. Once someone stops doing this, he's dead. \n~ Bette Davis","Move out of your comfort zone. You can only grow if you are willing to feel awkward and uncomfortable when you try something new. \n~ Brian Tracy","Challenges are what make life interesting and overcoming them is what makes life meaningful. \n~ Joshua J. MarineMotivational quote by Joshua J. Marine","Don't let the fear of losing be greater than the excitement of winning. \n~ Robert Kiyosaki","How dare you settle for less when the world has made it so easy for you to be remarkable? \n~ Seth Godin","Energy and persistence conquer all things. \n~ Benjamin Franklin","Perseverance is failing 19 times and succeeding the 20th. \n~ Julie Andrews","Failure after long perseverance is much grander than never to have a striving good enough to be called a failure. \n~ George Eliot","The secret of joy in work is contained in one word -- excellence. To know how to do something well is to enjoy it. \n~ Pearl Buck","Develop success from failures. Discouragement and failure are two of the surest stepping stones to success. \n~ Dale Carnegie","Action is the foundational key to all success. \n~ Pablo Picasso","The ladder of success is best climbed by stepping on the rungs of opportunity. \n~ Ayn Rand","Formula for success: rise early, work hard, strike oil. \n~ J. Paul Getty","The difference between a successful person and others is not a lack of strength, not a lack of knowledge, but rather a lack of will. \n~ Vince Lombardi","Obstacles are those frightful things you see when you take your eyes off your goal. \n~ Henry Ford","It is your determination and persistence that will make you a successful person. \n~ Kenneth J Hutchins","You can waste your lives drawing lines. Or you can live your life crossing them. \n~ Shonda Rhimes","Determine that the thing can and shall be done, and then we shall find the way. \n~ Abraham Lincoln","Done is better than perfect. \n~ Sheryl Sandberg","Don't ask if your dream is crazy, ask if it's crazy enough. \n~ Lena Waithe","The act of doing something un-does the fear. \n~ Shonda Rhimes","#1 make good decisions, #2 everything else. \n~ Rand Fishkin"];
sketcher_draw_Base.COUNT = 0;
sketcher_util_ColorUtil.NAVY = { r : Math.round(0), g : Math.round(31), b : Math.round(63)};
sketcher_util_ColorUtil.BLUE = { r : Math.round(0), g : Math.round(116), b : Math.round(217)};
sketcher_util_ColorUtil.AQUA = { r : Math.round(127), g : Math.round(219), b : Math.round(255)};
sketcher_util_ColorUtil.TEAL = { r : Math.round(57), g : Math.round(204), b : Math.round(204)};
sketcher_util_ColorUtil.OLIVE = { r : Math.round(61), g : Math.round(153), b : Math.round(112)};
sketcher_util_ColorUtil.GREEN = { r : Math.round(46), g : Math.round(204), b : Math.round(64)};
sketcher_util_ColorUtil.LIME = { r : Math.round(1), g : Math.round(255), b : Math.round(112)};
sketcher_util_ColorUtil.YELLOW = { r : Math.round(255), g : Math.round(220), b : Math.round(0)};
sketcher_util_ColorUtil.ORANGE = { r : Math.round(255), g : Math.round(133), b : Math.round(27)};
sketcher_util_ColorUtil.RED = { r : Math.round(255), g : Math.round(65), b : Math.round(54)};
sketcher_util_ColorUtil.MAROON = { r : Math.round(133), g : Math.round(20), b : Math.round(75)};
sketcher_util_ColorUtil.FUCHSIA = { r : Math.round(240), g : Math.round(18), b : Math.round(190)};
sketcher_util_ColorUtil.PURPLE = { r : Math.round(177), g : Math.round(13), b : Math.round(201)};
sketcher_util_ColorUtil.BLACK = { r : Math.round(17), g : Math.round(17), b : Math.round(17)};
sketcher_util_ColorUtil.GRAY = { r : Math.round(170), g : Math.round(170), b : Math.round(170)};
sketcher_util_ColorUtil.SILVER = { r : Math.round(221), g : Math.round(221), b : Math.round(221)};
sketcher_util_ColorUtil.WHITE = { r : Math.round(255), g : Math.round(255), b : Math.round(255)};
sketcher_util_ColorUtil.PINK = { r : Math.round(255), g : Math.round(20), b : Math.round(147)};
sketcher_util_ColorUtil.PINK_DEEP = { r : Math.round(255), g : Math.round(20), b : Math.round(147)};
sketcher_util_ColorUtil.PINK_HOT = { r : Math.round(255), g : Math.round(105), b : Math.round(180)};
sketcher_util_ColorUtil.niceColor100 = [["#69d2e7","#a7dbd8","#e0e4cc","#f38630","#fa6900"],["#fe4365","#fc9d9a","#f9cdad","#c8c8a9","#83af9b"],["#ecd078","#d95b43","#c02942","#542437","#53777a"],["#556270","#4ecdc4","#c7f464","#ff6b6b","#c44d58"],["#774f38","#e08e79","#f1d4af","#ece5ce","#c5e0dc"],["#e8ddcb","#cdb380","#036564","#033649","#031634"],["#490a3d","#bd1550","#e97f02","#f8ca00","#8a9b0f"],["#594f4f","#547980","#45ada8","#9de0ad","#e5fcc2"],["#00a0b0","#6a4a3c","#cc333f","#eb6841","#edc951"],["#e94e77","#d68189","#c6a49a","#c6e5d9","#f4ead5"],["#3fb8af","#7fc7af","#dad8a7","#ff9e9d","#ff3d7f"],["#d9ceb2","#948c75","#d5ded9","#7a6a53","#99b2b7"],["#ffffff","#cbe86b","#f2e9e1","#1c140d","#cbe86b"],["#efffcd","#dce9be","#555152","#2e2633","#99173c"],["#343838","#005f6b","#008c9e","#00b4cc","#00dffc"],["#413e4a","#73626e","#b38184","#f0b49e","#f7e4be"],["#ff4e50","#fc913a","#f9d423","#ede574","#e1f5c4"],["#99b898","#fecea8","#ff847c","#e84a5f","#2a363b"],["#655643","#80bca3","#f6f7bd","#e6ac27","#bf4d28"],["#00a8c6","#40c0cb","#f9f2e7","#aee239","#8fbe00"],["#351330","#424254","#64908a","#e8caa4","#cc2a41"],["#554236","#f77825","#d3ce3d","#f1efa5","#60b99a"],["#ff9900","#424242","#e9e9e9","#bcbcbc","#3299bb"],["#5d4157","#838689","#a8caba","#cad7b2","#ebe3aa"],["#8c2318","#5e8c6a","#88a65e","#bfb35a","#f2c45a"],["#fad089","#ff9c5b","#f5634a","#ed303c","#3b8183"],["#ff4242","#f4fad2","#d4ee5e","#e1edb9","#f0f2eb"],["#d1e751","#ffffff","#000000","#4dbce9","#26ade4"],["#f8b195","#f67280","#c06c84","#6c5b7b","#355c7d"],["#1b676b","#519548","#88c425","#bef202","#eafde6"],["#bcbdac","#cfbe27","#f27435","#f02475","#3b2d38"],["#5e412f","#fcebb6","#78c0a8","#f07818","#f0a830"],["#452632","#91204d","#e4844a","#e8bf56","#e2f7ce"],["#eee6ab","#c5bc8e","#696758","#45484b","#36393b"],["#f0d8a8","#3d1c00","#86b8b1","#f2d694","#fa2a00"],["#f04155","#ff823a","#f2f26f","#fff7bd","#95cfb7"],["#2a044a","#0b2e59","#0d6759","#7ab317","#a0c55f"],["#bbbb88","#ccc68d","#eedd99","#eec290","#eeaa88"],["#b9d7d9","#668284","#2a2829","#493736","#7b3b3b"],["#b3cc57","#ecf081","#ffbe40","#ef746f","#ab3e5b"],["#a3a948","#edb92e","#f85931","#ce1836","#009989"],["#67917a","#170409","#b8af03","#ccbf82","#e33258"],["#e8d5b7","#0e2430","#fc3a51","#f5b349","#e8d5b9"],["#aab3ab","#c4cbb7","#ebefc9","#eee0b7","#e8caaf"],["#300030","#480048","#601848","#c04848","#f07241"],["#ab526b","#bca297","#c5ceae","#f0e2a4","#f4ebc3"],["#607848","#789048","#c0d860","#f0f0d8","#604848"],["#a8e6ce","#dcedc2","#ffd3b5","#ffaaa6","#ff8c94"],["#3e4147","#fffedf","#dfba69","#5a2e2e","#2a2c31"],["#b6d8c0","#c8d9bf","#dadabd","#ecdbbc","#fedcba"],["#fc354c","#29221f","#13747d","#0abfbc","#fcf7c5"],["#1c2130","#028f76","#b3e099","#ffeaad","#d14334"],["#edebe6","#d6e1c7","#94c7b6","#403b33","#d3643b"],["#cc0c39","#e6781e","#c8cf02","#f8fcc1","#1693a7"],["#dad6ca","#1bb0ce","#4f8699","#6a5e72","#563444"],["#a7c5bd","#e5ddcb","#eb7b59","#cf4647","#524656"],["#fdf1cc","#c6d6b8","#987f69","#e3ad40","#fcd036"],["#5c323e","#a82743","#e15e32","#c0d23e","#e5f04c"],["#230f2b","#f21d41","#ebebbc","#bce3c5","#82b3ae"],["#b9d3b0","#81bda4","#b28774","#f88f79","#f6aa93"],["#3a111c","#574951","#83988e","#bcdea5","#e6f9bc"],["#5e3929","#cd8c52","#b7d1a3","#dee8be","#fcf7d3"],["#1c0113","#6b0103","#a30006","#c21a01","#f03c02"],["#382f32","#ffeaf2","#fcd9e5","#fbc5d8","#f1396d"],["#e3dfba","#c8d6bf","#93ccc6","#6cbdb5","#1a1f1e"],["#000000","#9f111b","#b11623","#292c37","#cccccc"],["#c1b398","#605951","#fbeec2","#61a6ab","#accec0"],["#8dccad","#988864","#fea6a2","#f9d6ac","#ffe9af"],["#f6f6f6","#e8e8e8","#333333","#990100","#b90504"],["#1b325f","#9cc4e4","#e9f2f9","#3a89c9","#f26c4f"],["#5e9fa3","#dcd1b4","#fab87f","#f87e7b","#b05574"],["#951f2b","#f5f4d7","#e0dfb1","#a5a36c","#535233"],["#413d3d","#040004","#c8ff00","#fa023c","#4b000f"],["#eff3cd","#b2d5ba","#61ada0","#248f8d","#605063"],["#2d2d29","#215a6d","#3ca2a2","#92c7a3","#dfece6"],["#cfffdd","#b4dec1","#5c5863","#a85163","#ff1f4c"],["#4e395d","#827085","#8ebe94","#ccfc8e","#dc5b3e"],["#9dc9ac","#fffec7","#f56218","#ff9d2e","#919167"],["#a1dbb2","#fee5ad","#faca66","#f7a541","#f45d4c"],["#ffefd3","#fffee4","#d0ecea","#9fd6d2","#8b7a5e"],["#a8a7a7","#cc527a","#e8175d","#474747","#363636"],["#ffedbf","#f7803c","#f54828","#2e0d23","#f8e4c1"],["#f8edd1","#d88a8a","#474843","#9d9d93","#c5cfc6"],["#f38a8a","#55443d","#a0cab5","#cde9ca","#f1edd0"],["#4e4d4a","#353432","#94ba65","#2790b0","#2b4e72"],["#0ca5b0","#4e3f30","#fefeeb","#f8f4e4","#a5b3aa"],["#a70267","#f10c49","#fb6b41","#f6d86b","#339194"],["#9d7e79","#ccac95","#9a947c","#748b83","#5b756c"],["#edf6ee","#d1c089","#b3204d","#412e28","#151101"],["#046d8b","#309292","#2fb8ac","#93a42a","#ecbe13"],["#4d3b3b","#de6262","#ffb88c","#ffd0b3","#f5e0d3"],["#fffbb7","#a6f6af","#66b6ab","#5b7c8d","#4f2958"],["#ff003c","#ff8a00","#fabe28","#88c100","#00c176"],["#fcfef5","#e9ffe1","#cdcfb7","#d6e6c3","#fafbe3"],["#9cddc8","#bfd8ad","#ddd9ab","#f7af63","#633d2e"],["#30261c","#403831","#36544f","#1f5f61","#0b8185"],["#d1313d","#e5625c","#f9bf76","#8eb2c5","#615375"],["#ffe181","#eee9e5","#fad3b2","#ffba7f","#ff9c97"],["#aaff00","#ffaa00","#ff00aa","#aa00ff","#00aaff"],["#c2412d","#d1aa34","#a7a844","#a46583","#5a1e4a"]];
sketcher_util_ColorUtil.niceColor100SortedString = [["#E0E4CC","#A7DBD8","#69D2E7","#F38630","#FA6900"],["#F9CDAD","#C8C8A9","#FC9D9A","#83AF9B","#FE4365"],["#ECD078","#D95B43","#53777A","#C02942","#542437"],["#C7F464","#4ECDC4","#FF6B6B","#C44D58","#556270"],["#ECE5CE","#F1D4AF","#C5E0DC","#E08E79","#774F38"],["#E8DDCB","#CDB380","#036564","#033649","#031634"],["#F8CA00","#E97F02","#8A9B0F","#BD1550","#490A3D"],["#E5FCC2","#9DE0AD","#45ADA8","#547980","#594F4F"],["#EDC951","#EB6841","#00A0B0","#CC333F","#6A4A3C"],["#F4EAD5","#C6E5D9","#C6A49A","#D68189","#E94E77"],["#DAD8A7","#FF9E9D","#7FC7AF","#3FB8AF","#FF3D7F"],["#D5DED9","#D9CEB2","#99B2B7","#948C75","#7A6A53"],["#FFFFFF","#F2E9E1","#CBE86B","#CBE86B","#1C140D"],["#EFFFCD","#DCE9BE","#555152","#99173C","#2E2633"],["#00DFFC","#00B4CC","#008C9E","#005F6B","#343838"],["#F7E4BE","#F0B49E","#B38184","#73626E","#413E4A"],["#E1F5C4","#EDE574","#F9D423","#FC913A","#FF4E50"],["#FECEA8","#99B898","#FF847C","#E84A5F","#2A363B"],["#F6F7BD","#E6AC27","#80BCA3","#BF4D28","#655643"],["#F9F2E7","#AEE239","#40C0CB","#8FBE00","#00A8C6"],["#E8CAA4","#64908A","#CC2A41","#424254","#351330"],["#F1EFA5","#D3CE3D","#60B99A","#F77825","#554236"],["#E9E9E9","#BCBCBC","#FF9900","#3299BB","#424242"],["#EBE3AA","#CAD7B2","#A8CABA","#838689","#5D4157"],["#F2C45A","#BFB35A","#88A65E","#5E8C6A","#8C2318"],["#FAD089","#FF9C5B","#F5634A","#3B8183","#ED303C"],["#F4FAD2","#F0F2EB","#E1EDB9","#D4EE5E","#FF4242"],["#FFFFFF","#D1E751","#4DBCE9","#26ADE4","#000000"],["#F8B195","#F67280","#C06C84","#6C5B7B","#355C7D"],["#EAFDE6","#BEF202","#88C425","#519548","#1B676B"],["#BCBDAC","#CFBE27","#F27435","#F02475","#3B2D38"],["#FCEBB6","#F0A830","#78C0A8","#F07818","#5E412F"],["#E2F7CE","#E8BF56","#E4844A","#91204D","#452632"],["#EEE6AB","#C5BC8E","#696758","#45484B","#36393B"],["#F0D8A8","#F2D694","#86B8B1","#FA2A00","#3D1C00"],["#FFF7BD","#F2F26F","#95CFB7","#FF823A","#F04155"],["#A0C55F","#7AB317","#0D6759","#0B2E59","#2A044A"],["#EEDD99","#EEC290","#CCC68D","#EEAA88","#BBBB88"],["#B9D7D9","#668284","#7B3B3B","#493736","#2A2829"],["#ECF081","#FFBE40","#B3CC57","#EF746F","#AB3E5B"],["#EDB92E","#A3A948","#F85931","#009989","#CE1836"],["#CCBF82","#B8AF03","#67917A","#E33258","#170409"],["#E8D5B9","#E8D5B7","#F5B349","#FC3A51","#0E2430"],["#EBEFC9","#EEE0B7","#E8CAAF","#C4CBB7","#AAB3AB"],["#F07241","#C04848","#601848","#480048","#300030"],["#F4EBC3","#F0E2A4","#C5CEAE","#BCA297","#AB526B"],["#F0F0D8","#C0D860","#789048","#607848","#604848"],["#DCEDC2","#FFD3B5","#A8E6CE","#FFAAA6","#FF8C94"],["#FFFEDF","#DFBA69","#3E4147","#5A2E2E","#2A2C31"],["#FEDCBA","#ECDBBC","#DADABD","#C8D9BF","#B6D8C0"],["#FCF7C5","#0ABFBC","#FC354C","#13747D","#29221F"],["#FFEAAD","#B3E099","#D14334","#028F76","#1C2130"],["#EDEBE6","#D6E1C7","#94C7B6","#D3643B","#403B33"],["#F8FCC1","#C8CF02","#E6781E","#1693A7","#CC0C39"],["#DAD6CA","#1BB0CE","#4F8699","#6A5E72","#563444"],["#E5DDCB","#A7C5BD","#EB7B59","#CF4647","#524656"],["#FDF1CC","#C6D6B8","#FCD036","#E3AD40","#987F69"],["#E5F04C","#C0D23E","#E15E32","#A82743","#5C323E"],["#EBEBBC","#BCE3C5","#82B3AE","#F21D41","#230F2B"],["#B9D3B0","#F6AA93","#F88F79","#81BDA4","#B28774"],["#E6F9BC","#BCDEA5","#83988E","#574951","#3A111C"],["#FCF7D3","#DEE8BE","#B7D1A3","#CD8C52","#5E3929"],["#F03C02","#C21A01","#A30006","#6B0103","#1C0113"],["#FFEAF2","#FCD9E5","#FBC5D8","#F1396D","#382F32"],["#E3DFBA","#C8D6BF","#93CCC6","#6CBDB5","#1A1F1E"],["#CCCCCC","#B11623","#9F111B","#292C37","#000000"],["#FBEEC2","#ACCEC0","#C1B398","#61A6AB","#605951"],["#FFE9AF","#F9D6AC","#FEA6A2","#8DCCAD","#988864"],["#F6F6F6","#E8E8E8","#B90504","#333333","#990100"],["#E9F2F9","#9CC4E4","#F26C4F","#3A89C9","#1B325F"],["#DCD1B4","#FAB87F","#F87E7B","#5E9FA3","#B05574"],["#F5F4D7","#E0DFB1","#A5A36C","#535233","#951F2B"],["#C8FF00","#FA023C","#413D3D","#4B000F","#040004"],["#EFF3CD","#B2D5BA","#61ADA0","#248F8D","#605063"],["#DFECE6","#92C7A3","#3CA2A2","#215A6D","#2D2D29"],["#CFFFDD","#B4DEC1","#A85163","#FF1F4C","#5C5863"],["#CCFC8E","#8EBE94","#DC5B3E","#827085","#4E395D"],["#FFFEC7","#9DC9AC","#FF9D2E","#919167","#F56218"],["#FEE5AD","#FACA66","#A1DBB2","#F7A541","#F45D4C"],["#FFFEE4","#FFEFD3","#D0ECEA","#9FD6D2","#8B7A5E"],["#A8A7A7","#CC527A","#E8175D","#474747","#363636"],["#FFEDBF","#F8E4C1","#F7803C","#F54828","#2E0D23"],["#F8EDD1","#C5CFC6","#D88A8A","#9D9D93","#474843"],["#F1EDD0","#CDE9CA","#A0CAB5","#F38A8A","#55443D"],["#94BA65","#2790B0","#4E4D4A","#2B4E72","#353432"],["#FEFEEB","#F8F4E4","#A5B3AA","#0CA5B0","#4E3F30"],["#F6D86B","#FB6B41","#339194","#F10C49","#A70267"],["#CCAC95","#9A947C","#9D7E79","#748B83","#5B756C"],["#EDF6EE","#D1C089","#B3204D","#412E28","#151101"],["#ECBE13","#93A42A","#2FB8AC","#309292","#046D8B"],["#F5E0D3","#FFD0B3","#FFB88C","#DE6262","#4D3B3B"],["#FFFBB7","#A6F6AF","#66B6AB","#5B7C8D","#4F2958"],["#FABE28","#FF8A00","#88C100","#00C176","#FF003C"],["#FCFEF5","#FAFBE3","#E9FFE1","#D6E6C3","#CDCFB7"],["#DDD9AB","#BFD8AD","#9CDDC8","#F7AF63","#633D2E"],["#0B8185","#1F5F61","#36544F","#403831","#30261C"],["#F9BF76","#8EB2C5","#E5625C","#D1313D","#615375"],["#EEE9E5","#FFE181","#FAD3B2","#FFBA7F","#FF9C97"],["#AAFF00","#FFAA00","#00AAFF","#FF00AA","#AA00FF"],["#D1AA34","#A7A844","#A46583","#C2412D","#5A1E4A"],["#F8F3BF","#DCE4F7","#BFCFF7","#75616B","#D34017"]];
sketcher_util_ColorUtil.niceColor100SortedInt = [[14738636,11000792,6935271,15959600,16410880],[16371117,13158569,16555418,8630171,16663397],[15519864,14244675,5470074,12593474,5514295],[13104228,5164484,16739179,12864856,5595760],[15525326,15848623,12968156,14716537,7819064],[15261131,13480832,222564,210505,202292],[16304640,15302402,9083663,12391760,4786749],[15072450,10346669,4566440,5536128,5853007],[15583569,15427649,41136,13382463,6965820],[16050901,13034969,13018266,14057865,15289975],[14342311,16752285,8374191,4176047,16727423],[14016217,14274226,10072759,9735285,8022611],[16777215,15919585,13363307,13363307,1840141],[15728589,14477758,5591378,10032956,3024435],[57340,46284,35998,24427,3422264],[16245950,15774878,11764100,7561838,4275786],[14808516,15590772,16372771,16552250,16731728],[16699048,10074264,16745596,15223391,2766395],[16185277,15117351,8436899,12537128,6641219],[16380647,11461177,4243659,9420288,43206],[15256228,6590602,13380161,4342356,3478320],[15855525,13880893,6338970,16218149,5587510],[15329769,12369084,16750848,3316155,4342338],[15459242,13293490,11061946,8619657,6111575],[15909978,12563290,8955486,6196330,9184024],[16437385,16751707,16081738,3899779,15544380],[16054994,15790827,14806457,13954654,16728642],[16777215,13756241,5094633,2534884,0],[16298389,16151168,12610692,7101307,3497085],[15400422,12513794,8963109,5346632,1795947],[12369324,13614631,15889461,15737973,3878200],[16575414,15771696,7913640,15759384,6177071],[14874574,15253334,14976074,9510989,4531762],[15656619,12958862,6907736,4540491,3553595],[15784104,15914644,8829105,16394752,4004864],[16775101,15921775,9818039,16745018,15745365],[10536287,8041239,878425,732761,2753610],[15654297,15647376,13420173,15641224,12303240],[12179417,6718084,8076091,4798262,2762793],[15528065,16760384,11783255,15692911,11222619],[15579438,10725704,16275761,39305,13506614],[13418370,12103427,6787450,14889560,1508361],[15259065,15259063,16102217,16530001,926768],[15462345,15655095,15256239,12897207,11187115],[15757889,12601416,6297672,4718664,3145776],[16051139,15786660,12963502,12362391,11227755],[15790296,12638304,7901256,6322248,6309960],[14478786,16765877,11069134,16755366,16747668],[16776927,14662249,4079943,5910062,2763825],[16702650,15522748,14342845,13162943,11983040],[16578501,704444,16528716,1275005,2695711],[16771757,11788441,13714228,167798,1843504],[15592422,14082503,9750454,13853755,4209459],[16317633,13160194,15104030,1479591,13372473],[14341834,1814734,5211801,6970994,5649476],[15064523,10995133,15432537,13583943,5391958],[16642508,13031096,16568374,14921024,9994089],[15069260,12636734,14769714,11020099,6042174],[15461308,12379077,8565678,15867201,2297643],[12178352,16165523,16289657,8502692,11700084],[15137212,12377765,8624270,5720401,3805468],[16578515,14608574,12046755,13470802,6175017],[15744002,12720641,10682374,7012611,1835283],[16771826,16570853,16500184,15808877,3682098],[14933946,13162175,9686214,7126453,1711902],[13421772,11605539,10424603,2698295,0],[16510658,11325120,12694424,6399659,6314321],[16771503,16373420,16688802,9292973,9996388],[16185078,15263976,12125444,3355443,10027264],[15332089,10274020,15887439,3836361,1782367],[14471604,16431231,16285307,6201251,11556212],[16118999,14737329,10855276,5460531,9772843],[13172480,16384572,4275517,4915215,262148],[15725517,11720122,6401440,2396045,6312035],[14675174,9619363,3973794,2185837,2960681],[13631453,11853505,11030883,16719692,6051939],[13433998,9354900,14441278,8548485,5126493],[16776903,10340780,16751918,9539943,16081432],[16704941,16435814,10607538,16229697,16014668],[16776932,16773075,13692138,10475218,9140830],[11052967,13390458,15210333,4671303,3552822],[16772543,16311489,16220220,16074792,3018019],[16313809,12963782,14191242,10329491,4671555],[15855056,13494730,10537653,15960714,5588029],[9747045,2592944,5131594,2838130,3486770],[16711403,16315620,10859434,828848,5127984],[16177259,16476993,3379604,15797321,10945127],[13413525,10130556,10321529,7637891,5993836],[15595246,13746313,11739213,4271656,1380609],[15515155,9675818,3127468,3183250,290187],[16113875,16765107,16758924,14574178,5061435],[16776119,10942127,6731435,5995661,5187928],[16432680,16747008,8962304,49526,16711740],[16580341,16448483,15335393,14083779,13488055],[14539179,12572845,10280392,16232291,6503726],[754053,2056033,3560527,4208689,3155484],[16367478,9351877,15032924,13709629,6378357],[15657445,16769409,16438194,16759423,16751767],[11206400,16755200,43775,16711850,11141375],[13740596,10987588,10773891,12730669,5905994],[16315327,14476535,12570615,7692651,13844503]];
MainShadowbox.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=cc_shadowbox.js.map